
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  080091e8  080091e8  000191e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a0  080098a0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080098a0  080098a0  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098a0  080098a0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a4  080098a4  000198a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080098a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002920  200000b0  08009958  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200029d0  08009958  000229d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002edab  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f7f  00000000  00000000  0004eec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001178a  00000000  00000000  00054e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001908  00000000  00000000  000665d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b6f  00000000  00000000  00067ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024f07  00000000  00000000  00069a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000094b8  00000000  00000000  0008e94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005988  00000000  00000000  00097e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0009d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	080091cc 	.word	0x080091cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	080091cc 	.word	0x080091cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_f2uiz>:
 8000d84:	0042      	lsls	r2, r0, #1
 8000d86:	d20e      	bcs.n	8000da6 <__aeabi_f2uiz+0x22>
 8000d88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d8c:	d30b      	bcc.n	8000da6 <__aeabi_f2uiz+0x22>
 8000d8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d96:	d409      	bmi.n	8000dac <__aeabi_f2uiz+0x28>
 8000d98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000da0:	fa23 f002 	lsr.w	r0, r3, r2
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr
 8000dac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000db0:	d101      	bne.n	8000db6 <__aeabi_f2uiz+0x32>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	d102      	bne.n	8000dbc <__aeabi_f2uiz+0x38>
 8000db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dba:	4770      	bx	lr
 8000dbc:	f04f 0000 	mov.w	r0, #0
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <can_rx>:
int counter ;
int speed ;
int range;

void can_rx()
{
 8000dc4:	b510      	push	{r4, lr}
	//(#) Reception:
	//(++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
	//until at least one message is received.
	//(++) Then get the message using HAL_CAN_GetRxMessage().

	if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO1))
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	480a      	ldr	r0, [pc, #40]	; (8000df4 <can_rx+0x30>)
 8000dca:	f002 fb71 	bl	80034b0 <HAL_CAN_GetRxFifoFillLevel>
 8000dce:	b180      	cbz	r0, 8000df2 <can_rx+0x2e>
	{
		//HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO1, &RxHeader, Rx_can_data);
 8000dd0:	4c09      	ldr	r4, [pc, #36]	; (8000df8 <can_rx+0x34>)
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <can_rx+0x38>)
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <can_rx+0x30>)
 8000dda:	f002 faeb 	bl	80033b4 <HAL_CAN_GetRxMessage>

		lane_dist 			= Rx_can_data[lane];
 8000dde:	f994 2000 	ldrsb.w	r2, [r4]
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <can_rx+0x3c>)
 8000de4:	601a      	str	r2, [r3, #0]
		nearest_dist 		= Rx_can_data[nearest_opj];
 8000de6:	7862      	ldrb	r2, [r4, #1]
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <can_rx+0x40>)
 8000dea:	701a      	strb	r2, [r3, #0]
		bump_detected 		= Rx_can_data[bump];
 8000dec:	78a2      	ldrb	r2, [r4, #2]
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <can_rx+0x44>)
 8000df0:	701a      	strb	r2, [r3, #0]
//		ki			 		= Rx_can_data[4];
//		kd			 		= Rx_can_data[5];
	}


}
 8000df2:	bd10      	pop	{r4, pc}
 8000df4:	20000260 	.word	0x20000260
 8000df8:	200000e8 	.word	0x200000e8
 8000dfc:	200000cc 	.word	0x200000cc
 8000e00:	20000000 	.word	0x20000000
 8000e04:	2000011c 	.word	0x2000011c
 8000e08:	20000114 	.word	0x20000114

08000e0c <can_tx>:


void can_tx(uint32_t ID , uint8_t DLC , uint8_t *payload)
{

	Tx_can_data[car_speed]		=speed;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <can_tx+0x78>)
{
 8000e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Tx_can_data[car_speed]		=speed;
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4c1c      	ldr	r4, [pc, #112]	; (8000e88 <can_tx+0x7c>)
	Tx_can_data[charge]			=percentage;
	Tx_can_data[temperature]	=temp;
	Tx_can_data[car_range]		=range;
	Tx_can_data[compass_angle]	=compass.direction;
	Tx_can_data[latitudee]		=gpsdata.ggastruct.lcation.latitude;
 8000e16:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000e8c <can_tx+0x80>
	Tx_can_data[car_speed]		=speed;
 8000e1a:	7023      	strb	r3, [r4, #0]
	Tx_can_data[charge]			=percentage;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <can_tx+0x84>)
{
 8000e1e:	4606      	mov	r6, r0
	Tx_can_data[charge]			=percentage;
 8000e20:	681b      	ldr	r3, [r3, #0]
	Tx_can_data[latitudee]		=gpsdata.ggastruct.lcation.latitude;
 8000e22:	f8d8 0000 	ldr.w	r0, [r8]
	Tx_can_data[charge]			=percentage;
 8000e26:	7063      	strb	r3, [r4, #1]
	Tx_can_data[temperature]	=temp;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <can_tx+0x88>)
{
 8000e2a:	460f      	mov	r7, r1
	Tx_can_data[temperature]	=temp;
 8000e2c:	681b      	ldr	r3, [r3, #0]
{
 8000e2e:	4615      	mov	r5, r2
	Tx_can_data[temperature]	=temp;
 8000e30:	70a3      	strb	r3, [r4, #2]
	Tx_can_data[car_range]		=range;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <can_tx+0x8c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	70e3      	strb	r3, [r4, #3]
	Tx_can_data[compass_angle]	=compass.direction;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <can_tx+0x90>)
 8000e3a:	799b      	ldrb	r3, [r3, #6]
 8000e3c:	7123      	strb	r3, [r4, #4]
	Tx_can_data[latitudee]		=gpsdata.ggastruct.lcation.latitude;
 8000e3e:	f7ff ffa1 	bl	8000d84 <__aeabi_f2uiz>
 8000e42:	7160      	strb	r0, [r4, #5]
	Tx_can_data[longitduee]		=gpsdata.ggastruct.lcation.longitude;
 8000e44:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8000e48:	f7ff ff9c 	bl	8000d84 <__aeabi_f2uiz>


	TxHeader.DLC 	= DLC;
	TxHeader.ExtId 	= CAN_ID_STD ;
 8000e4c:	2300      	movs	r3, #0
	Tx_can_data[longitduee]		=gpsdata.ggastruct.lcation.longitude;
 8000e4e:	71a0      	strb	r0, [r4, #6]
	TxHeader.DLC 	= DLC;
 8000e50:	4c13      	ldr	r4, [pc, #76]	; (8000ea0 <can_tx+0x94>)
	TxHeader.RTR 	= CAN_RTR_DATA ;
	TxHeader.StdId 	= ID ;


	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8000e52:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <can_tx+0x98>)
	TxHeader.DLC 	= DLC;
 8000e54:	6127      	str	r7, [r4, #16]
	TxHeader.ExtId 	= CAN_ID_STD ;
 8000e56:	6063      	str	r3, [r4, #4]
	TxHeader.RTR 	= CAN_RTR_DATA ;
 8000e58:	60e3      	str	r3, [r4, #12]
	TxHeader.StdId 	= ID ;
 8000e5a:	6026      	str	r6, [r4, #0]
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8000e5c:	f002 fa85 	bl	800336a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e60:	b128      	cbz	r0, 8000e6e <can_tx+0x62>
	{
		//		HAL_CAN_AddTxMessage(&hcan, &TxHeader, payload, &Txmailbox);
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, payload, &Txmailbox);
 8000e62:	462a      	mov	r2, r5
 8000e64:	4621      	mov	r1, r4
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <can_tx+0x9c>)
 8000e68:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <can_tx+0x98>)
 8000e6a:	f002 fa32 	bl	80032d2 <HAL_CAN_AddTxMessage>
	}

	while(HAL_CAN_IsTxMessagePending(&hcan, Txmailbox));
 8000e6e:	4d0e      	ldr	r5, [pc, #56]	; (8000ea8 <can_tx+0x9c>)
 8000e70:	4c0c      	ldr	r4, [pc, #48]	; (8000ea4 <can_tx+0x98>)
 8000e72:	4620      	mov	r0, r4
 8000e74:	6829      	ldr	r1, [r5, #0]
 8000e76:	f002 fa8c 	bl	8003392 <HAL_CAN_IsTxMessagePending>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d1f9      	bne.n	8000e72 <can_tx+0x66>

}
 8000e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e82:	bf00      	nop
 8000e84:	20000124 	.word	0x20000124
 8000e88:	20000108 	.word	0x20000108
 8000e8c:	20000544 	.word	0x20000544
 8000e90:	20000224 	.word	0x20000224
 8000e94:	20000228 	.word	0x20000228
 8000e98:	20000120 	.word	0x20000120
 8000e9c:	20000128 	.word	0x20000128
 8000ea0:	200000f0 	.word	0x200000f0
 8000ea4:	20000260 	.word	0x20000260
 8000ea8:	20000110 	.word	0x20000110

08000eac <HCompass_Init>:
 */

compass_S compass;

HAL_StatusTypeDef HCompass_Init()
{
 8000eac:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ErrorState;
	uint8_t dataBuffer[3];
	uint8_t CheckRegA, CheckRegB, CheckRegC;

	/* Detect the Compass first */
	ErrorState = HAL_I2C_Mem_Read(
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
{
 8000eb4:	b086      	sub	sp, #24
	ErrorState = HAL_I2C_Mem_Read(
 8000eb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000eba:	ab05      	add	r3, sp, #20
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	220a      	movs	r2, #10
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	213c      	movs	r1, #60	; 0x3c
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <HCompass_Init+0x50>)
 8000ec6:	f003 f87b 	bl	8003fc0 <HAL_I2C_Mem_Read>
	CheckRegA = dataBuffer[0];
	CheckRegB = dataBuffer[1];
	CheckRegC = dataBuffer[2];

	/* Checking for the right values in the compass in identification registers */
	if(CheckRegA == 'H' && CheckRegB == '4' && CheckRegC == '3')
 8000eca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000ece:	2b48      	cmp	r3, #72	; 0x48
 8000ed0:	d112      	bne.n	8000ef8 <HCompass_Init+0x4c>
 8000ed2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000ed6:	2b34      	cmp	r3, #52	; 0x34
 8000ed8:	d10e      	bne.n	8000ef8 <HCompass_Init+0x4c>
 8000eda:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000ede:	2b33      	cmp	r3, #51	; 0x33
 8000ee0:	d10a      	bne.n	8000ef8 <HCompass_Init+0x4c>
	{
		/* Connected successfully */
		ErrorState = HAL_OK;

		/* Access the Mode Register to set the Compass mode to Continuous measurement mode */
		HAL_I2C_Mem_Write(
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	9402      	str	r4, [sp, #8]
 8000ee6:	2400      	movs	r4, #0
 8000ee8:	2202      	movs	r2, #2
 8000eea:	213c      	movs	r1, #60	; 0x3c
 8000eec:	e9cd 4300 	strd	r4, r3, [sp]
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <HCompass_Init+0x50>)
 8000ef2:	f002 ffd5 	bl	8003ea0 <HAL_I2C_Mem_Write>
		ErrorState = HAL_OK;
 8000ef6:	4620      	mov	r0, r4
				HAL_MAX_DELAY
		);
	}

	return ErrorState;
}
 8000ef8:	b006      	add	sp, #24
 8000efa:	bd10      	pop	{r4, pc}
 8000efc:	20000310 	.word	0x20000310

08000f00 <calculate_compass_direction>:
	}

	return ErrorState;
}

void calculate_compass_direction(int16_t x, int16_t y) {
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	460e      	mov	r6, r1
	double angle = atan2(y, x) * RAD_TO_DEG;
 8000f04:	f7ff fa7e 	bl	8000404 <__aeabi_i2d>
 8000f08:	4604      	mov	r4, r0
 8000f0a:	460d      	mov	r5, r1
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f7ff fa79 	bl	8000404 <__aeabi_i2d>
 8000f12:	4622      	mov	r2, r4
 8000f14:	462b      	mov	r3, r5
 8000f16:	f006 fff2 	bl	8007efe <atan2>
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <calculate_compass_direction+0x60>)
 8000f1e:	f7ff fadb 	bl	80004d8 <__aeabi_dmul>
 8000f22:	a30d      	add	r3, pc, #52	; (adr r3, 8000f58 <calculate_compass_direction+0x58>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff fc00 	bl	800072c <__aeabi_ddiv>
    if (angle < 0) {
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2300      	movs	r3, #0
	double angle = atan2(y, x) * RAD_TO_DEG;
 8000f30:	4604      	mov	r4, r0
 8000f32:	460d      	mov	r5, r1
    if (angle < 0) {
 8000f34:	f7ff fd42 	bl	80009bc <__aeabi_dcmplt>
 8000f38:	b158      	cbz	r0, 8000f52 <calculate_compass_direction+0x52>
    	compass.direction = 360.0 + angle;
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <calculate_compass_direction+0x64>)
 8000f42:	f7ff f913 	bl	800016c <__adddf3>
    } else {
    	compass.direction = angle;
 8000f46:	f7ff fd9f 	bl	8000a88 <__aeabi_d2uiz>
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <calculate_compass_direction+0x68>)
 8000f4c:	b2c0      	uxtb	r0, r0
 8000f4e:	7198      	strb	r0, [r3, #6]
    }

}
 8000f50:	bd70      	pop	{r4, r5, r6, pc}
    	compass.direction = angle;
 8000f52:	4620      	mov	r0, r4
 8000f54:	4629      	mov	r1, r5
 8000f56:	e7f6      	b.n	8000f46 <calculate_compass_direction+0x46>
 8000f58:	54442d18 	.word	0x54442d18
 8000f5c:	400921fb 	.word	0x400921fb
 8000f60:	40668000 	.word	0x40668000
 8000f64:	40768000 	.word	0x40768000
 8000f68:	20000128 	.word	0x20000128

08000f6c <HCompass_ReadAxis>:
	uint8_t dataBuffer[6] = {0}; // The ADC Reading of the 3 Axis in 6 Bytes (Every Axis in 2 Bytes)
 8000f6c:	2300      	movs	r3, #0
{
 8000f6e:	b510      	push	{r4, lr}
 8000f70:	b086      	sub	sp, #24
	ErrorState = HAL_I2C_Mem_Read(
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	uint8_t dataBuffer[6] = {0}; // The ADC Reading of the 3 Axis in 6 Bytes (Every Axis in 2 Bytes)
 8000f76:	9304      	str	r3, [sp, #16]
 8000f78:	f8ad 3014 	strh.w	r3, [sp, #20]
	ErrorState = HAL_I2C_Mem_Read(
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000f82:	ab04      	add	r3, sp, #16
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2203      	movs	r2, #3
 8000f88:	2301      	movs	r3, #1
 8000f8a:	213c      	movs	r1, #60	; 0x3c
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <HCompass_ReadAxis+0x54>)
 8000f8e:	f003 f817 	bl	8003fc0 <HAL_I2C_Mem_Read>
	if(ErrorState == HAL_OK)
 8000f92:	4604      	mov	r4, r0
 8000f94:	b980      	cbnz	r0, 8000fb8 <HCompass_ReadAxis+0x4c>
		compass.X = ((uint16_t)dataBuffer[0] << 8) | dataBuffer[1];
 8000f96:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8000f9a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HCompass_ReadAxis+0x58>)
		compass.Z = ((uint16_t)dataBuffer[2] << 8) | dataBuffer[3];
 8000fa0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8000fa4:	ba49      	rev16	r1, r1
 8000fa6:	ba40      	rev16	r0, r0
		compass.X = ((uint16_t)dataBuffer[0] << 8) | dataBuffer[1];
 8000fa8:	8019      	strh	r1, [r3, #0]
		compass.Z = ((uint16_t)dataBuffer[2] << 8) | dataBuffer[3];
 8000faa:	ba52      	rev16	r2, r2
		compass.Y = ((uint16_t)dataBuffer[4] << 8) | dataBuffer[5];
 8000fac:	8058      	strh	r0, [r3, #2]
		calculate_compass_direction(compass.Y ,compass.X );
 8000fae:	b209      	sxth	r1, r1
 8000fb0:	b200      	sxth	r0, r0
		compass.Z = ((uint16_t)dataBuffer[2] << 8) | dataBuffer[3];
 8000fb2:	809a      	strh	r2, [r3, #4]
		calculate_compass_direction(compass.Y ,compass.X );
 8000fb4:	f7ff ffa4 	bl	8000f00 <calculate_compass_direction>
}
 8000fb8:	4620      	mov	r0, r4
 8000fba:	b006      	add	sp, #24
 8000fbc:	bd10      	pop	{r4, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000310 	.word	0x20000310
 8000fc4:	20000128 	.word	0x20000128

08000fc8 <HServo_Timer_Init>:
 * Note			-
 */
void HServo_Timer_Init()
{
	/* Start the Servo Motor Timer PWM */
	HAL_TIM_PWM_Start(&SERVO_TIMER, SERVO_CHANNEL);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4801      	ldr	r0, [pc, #4]	; (8000fd0 <HServo_Timer_Init+0x8>)
 8000fcc:	f004 bad8 	b.w	8005580 <HAL_TIM_PWM_Start>
 8000fd0:	20000404 	.word	0x20000404

08000fd4 <HServo_writePosition>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000fd4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fd8:	4350      	muls	r0, r2
 8000fda:	22b4      	movs	r2, #180	; 0xb4
 8000fdc:	fbb0 f0f2 	udiv	r0, r0, r2
{
	/* Mapping position to microseconds */
	uint16_t OnTime_us = map(u8ServoPosition, 0, 180, 500, 2500);

	/* Writing the position of the servo as PWM signal */
	__HAL_TIM_SET_COMPARE(&SERVO_TIMER, SERVO_CHANNEL, OnTime_us);
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HServo_writePosition+0x18>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000fe2:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
	__HAL_TIM_SET_COMPARE(&SERVO_TIMER, SERVO_CHANNEL, OnTime_us);
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6358      	str	r0, [r3, #52]	; 0x34
}
 8000fea:	4770      	bx	lr
 8000fec:	20000404 	.word	0x20000404

08000ff0 <NRF24_csn.part.0>:
}

//1. Chip Select function
void NRF24_csn(int state)
{
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <NRF24_csn.part.0+0x10>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	8819      	ldrh	r1, [r3, #0]
 8000ff6:	4b03      	ldr	r3, [pc, #12]	; (8001004 <NRF24_csn.part.0+0x14>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	f002 bc99 	b.w	8003930 <HAL_GPIO_WritePin>
 8000ffe:	bf00      	nop
 8001000:	20000164 	.word	0x20000164
 8001004:	20000168 	.word	0x20000168

08001008 <NRF24_ce.part.0>:
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
//2. Chip Enable
void NRF24_ce(int state)
{
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <NRF24_ce.part.0+0x10>)
 800100a:	2201      	movs	r2, #1
 800100c:	8819      	ldrh	r1, [r3, #0]
 800100e:	4b03      	ldr	r3, [pc, #12]	; (800101c <NRF24_ce.part.0+0x14>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	f002 bc8d 	b.w	8003930 <HAL_GPIO_WritePin>
 8001016:	bf00      	nop
 8001018:	20000162 	.word	0x20000162
 800101c:	20000168 	.word	0x20000168

08001020 <NRF24_csn>:
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001020:	4602      	mov	r2, r0
 8001022:	b108      	cbz	r0, 8001028 <NRF24_csn+0x8>
 8001024:	f7ff bfe4 	b.w	8000ff0 <NRF24_csn.part.0>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <NRF24_csn+0x14>)
 800102a:	8819      	ldrh	r1, [r3, #0]
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <NRF24_csn+0x18>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	f002 bc7e 	b.w	8003930 <HAL_GPIO_WritePin>
 8001034:	20000164 	.word	0x20000164
 8001038:	20000168 	.word	0x20000168

0800103c <NRF24_ce>:
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800103c:	4602      	mov	r2, r0
 800103e:	b108      	cbz	r0, 8001044 <NRF24_ce+0x8>
 8001040:	f7ff bfe2 	b.w	8001008 <NRF24_ce.part.0>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <NRF24_ce+0x14>)
 8001046:	8819      	ldrh	r1, [r3, #0]
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <NRF24_ce+0x18>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f002 bc70 	b.w	8003930 <HAL_GPIO_WritePin>
 8001050:	20000162 	.word	0x20000162
 8001054:	20000168 	.word	0x20000168

08001058 <NRF24_read_register>:
}
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001058:	b513      	push	{r0, r1, r4, lr}
 800105a:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800105c:	2000      	movs	r0, #0
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800105e:	f004 041f 	and.w	r4, r4, #31
	NRF24_csn(0);
 8001062:	f7ff ffdd 	bl	8001020 <NRF24_csn>
	spiBuf[0] = reg&0x1F;
 8001066:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800106a:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <NRF24_read_register+0x3c>)
 800106c:	a901      	add	r1, sp, #4
 800106e:	2364      	movs	r3, #100	; 0x64
 8001070:	2201      	movs	r2, #1
 8001072:	4620      	mov	r0, r4
 8001074:	f003 fcdb 	bl	8004a2e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	2201      	movs	r2, #1
 800107c:	f10d 0105 	add.w	r1, sp, #5
 8001080:	4620      	mov	r0, r4
 8001082:	f003 fe7d 	bl	8004d80 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001086:	f89d 4005 	ldrb.w	r4, [sp, #5]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800108a:	f7ff ffb1 	bl	8000ff0 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
	return retData;
}
 800108e:	4620      	mov	r0, r4
 8001090:	b002      	add	sp, #8
 8001092:	bd10      	pop	{r4, pc}
 8001094:	2000016c 	.word	0x2000016c

08001098 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001098:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800109a:	4604      	mov	r4, r0
 800109c:	460d      	mov	r5, r1
 800109e:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010a0:	2000      	movs	r0, #0
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80010a2:	f004 041f 	and.w	r4, r4, #31
	NRF24_csn(0);
 80010a6:	f7ff ffbb 	bl	8001020 <NRF24_csn>
	spiBuf[0] = reg&0x1F;
 80010aa:	f88d 4004 	strb.w	r4, [sp, #4]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010ae:	4c08      	ldr	r4, [pc, #32]	; (80010d0 <NRF24_read_registerN+0x38>)
 80010b0:	a901      	add	r1, sp, #4
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	2201      	movs	r2, #1
 80010b6:	4620      	mov	r0, r4
 80010b8:	f003 fcb9 	bl	8004a2e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	4632      	mov	r2, r6
 80010c0:	4629      	mov	r1, r5
 80010c2:	4620      	mov	r0, r4
 80010c4:	f003 fe5c 	bl	8004d80 <HAL_SPI_Receive>
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80010c8:	f7ff ff92 	bl	8000ff0 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 80010cc:	b002      	add	sp, #8
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
 80010d0:	2000016c 	.word	0x2000016c

080010d4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80010d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff ffa0 	bl	8001020 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010e0:	f044 0420 	orr.w	r4, r4, #32
	spiBuf[1] = value;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80010e4:	2364      	movs	r3, #100	; 0x64
 80010e6:	2202      	movs	r2, #2
 80010e8:	a901      	add	r1, sp, #4
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <NRF24_write_register+0x2c>)
	spiBuf[0] = reg|0x20;
 80010ec:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80010f0:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80010f4:	f003 fc9b 	bl	8004a2e <HAL_SPI_Transmit>
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80010f8:	f7ff ff7a 	bl	8000ff0 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 80010fc:	b003      	add	sp, #12
 80010fe:	bd30      	pop	{r4, r5, pc}
 8001100:	2000016c 	.word	0x2000016c

08001104 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001104:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001106:	4604      	mov	r4, r0
 8001108:	460d      	mov	r5, r1
 800110a:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800110c:	2000      	movs	r0, #0
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800110e:	f044 0420 	orr.w	r4, r4, #32
	NRF24_csn(0);
 8001112:	f7ff ff85 	bl	8001020 <NRF24_csn>
	spiBuf[0] = reg|0x20;
 8001116:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800111a:	4c08      	ldr	r4, [pc, #32]	; (800113c <NRF24_write_registerN+0x38>)
 800111c:	a901      	add	r1, sp, #4
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	2201      	movs	r2, #1
 8001122:	4620      	mov	r0, r4
 8001124:	f003 fc83 	bl	8004a2e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	4632      	mov	r2, r6
 800112c:	4629      	mov	r1, r5
 800112e:	4620      	mov	r0, r4
 8001130:	f003 fc7d 	bl	8004a2e <HAL_SPI_Transmit>
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001134:	f7ff ff5c 	bl	8000ff0 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8001138:	b002      	add	sp, #8
 800113a:	bd70      	pop	{r4, r5, r6, pc}
 800113c:	2000016c 	.word	0x2000016c

08001140 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001140:	b573      	push	{r0, r1, r4, r5, r6, lr}
  payload_size = MIN(size,max_payload_size);
}
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <NRF24_read_payload+0x40>)
{
 8001144:	4604      	mov	r4, r0
 8001146:	781d      	ldrb	r5, [r3, #0]
	NRF24_csn(0);
 8001148:	2000      	movs	r0, #0
 800114a:	428d      	cmp	r5, r1
 800114c:	bf28      	it	cs
 800114e:	460d      	movcs	r5, r1
 8001150:	f7ff ff66 	bl	8001020 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001154:	2361      	movs	r3, #97	; 0x61
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001156:	4e0b      	ldr	r6, [pc, #44]	; (8001184 <NRF24_read_payload+0x44>)
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001158:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800115c:	f10d 0107 	add.w	r1, sp, #7
 8001160:	2364      	movs	r3, #100	; 0x64
 8001162:	2201      	movs	r2, #1
 8001164:	4630      	mov	r0, r6
 8001166:	f003 fc62 	bl	8004a2e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	462a      	mov	r2, r5
 800116e:	4621      	mov	r1, r4
 8001170:	4630      	mov	r0, r6
 8001172:	f003 fe05 	bl	8004d80 <HAL_SPI_Receive>
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001176:	f7ff ff3b 	bl	8000ff0 <NRF24_csn.part.0>
}
 800117a:	b002      	add	sp, #8
 800117c:	bd70      	pop	{r4, r5, r6, pc}
 800117e:	bf00      	nop
 8001180:	2000020c 	.word	0x2000020c
 8001184:	2000016c 	.word	0x2000016c

08001188 <NRF24_flush_tx>:
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001188:	21ff      	movs	r1, #255	; 0xff
 800118a:	20e1      	movs	r0, #225	; 0xe1
 800118c:	f7ff bfa2 	b.w	80010d4 <NRF24_write_register>

08001190 <NRF24_flush_rx>:
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001190:	21ff      	movs	r1, #255	; 0xff
 8001192:	20e2      	movs	r0, #226	; 0xe2
 8001194:	f7ff bf9e 	b.w	80010d4 <NRF24_write_register>

08001198 <NRF24_get_status>:
	statReg = NRF24_read_register(REG_STATUS);
 8001198:	2007      	movs	r0, #7
 800119a:	f7ff bf5d 	b.w	8001058 <NRF24_read_register>
	...

080011a0 <NRF24_startListening>:
{
 80011a0:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff ff58 	bl	8001058 <NRF24_read_register>
 80011a8:	f040 0103 	orr.w	r1, r0, #3
 80011ac:	b2c9      	uxtb	r1, r1
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff ff90 	bl	80010d4 <NRF24_write_register>
	if(pipe0_reading_address)
 80011b4:	4908      	ldr	r1, [pc, #32]	; (80011d8 <NRF24_startListening+0x38>)
 80011b6:	e9d1 3200 	ldrd	r3, r2, [r1]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d003      	beq.n	80011c6 <NRF24_startListening+0x26>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80011be:	2205      	movs	r2, #5
 80011c0:	200a      	movs	r0, #10
 80011c2:	f7ff ff9f 	bl	8001104 <NRF24_write_registerN>
	NRF24_flush_tx();
 80011c6:	f7ff ffdf 	bl	8001188 <NRF24_flush_tx>
	NRF24_flush_rx();
 80011ca:	f7ff ffe1 	bl	8001190 <NRF24_flush_rx>
}
 80011ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80011d2:	f7ff bf19 	b.w	8001008 <NRF24_ce.part.0>
 80011d6:	bf00      	nop
 80011d8:	20000210 	.word	0x20000210

080011dc <NRF24_openReadingPipe>:
{
 80011dc:	b513      	push	{r0, r1, r4, lr}
	if (number == 0)
 80011de:	4604      	mov	r4, r0
{
 80011e0:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 80011e4:	b9e8      	cbnz	r0, 8001222 <NRF24_openReadingPipe+0x46>
    pipe0_reading_address = address;
 80011e6:	4619      	mov	r1, r3
 80011e8:	4610      	mov	r0, r2
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <NRF24_openReadingPipe+0x58>)
 80011ec:	e9c3 0100 	strd	r0, r1, [r3]
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80011f0:	2205      	movs	r2, #5
 80011f2:	4669      	mov	r1, sp
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <NRF24_openReadingPipe+0x5c>)
 80011f6:	5d18      	ldrb	r0, [r3, r4]
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80011f8:	f7ff ff84 	bl	8001104 <NRF24_write_registerN>
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <NRF24_openReadingPipe+0x60>)
 80011fe:	7819      	ldrb	r1, [r3, #0]
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <NRF24_openReadingPipe+0x64>)
 8001202:	5d18      	ldrb	r0, [r3, r4]
 8001204:	f7ff ff66 	bl	80010d4 <NRF24_write_register>
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001208:	2002      	movs	r0, #2
 800120a:	f7ff ff25 	bl	8001058 <NRF24_read_register>
 800120e:	2301      	movs	r3, #1
 8001210:	40a3      	lsls	r3, r4
 8001212:	ea40 0103 	orr.w	r1, r0, r3
 8001216:	b2c9      	uxtb	r1, r1
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff ff5b 	bl	80010d4 <NRF24_write_register>
}
 800121e:	b002      	add	sp, #8
 8001220:	bd10      	pop	{r4, pc}
	if(number <= 6)
 8001222:	2806      	cmp	r0, #6
 8001224:	d8fb      	bhi.n	800121e <NRF24_openReadingPipe+0x42>
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <NRF24_openReadingPipe+0x5c>)
		if(number < 2)
 8001228:	2c01      	cmp	r4, #1
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800122a:	5c18      	ldrb	r0, [r3, r0]
		if(number < 2)
 800122c:	d0e0      	beq.n	80011f0 <NRF24_openReadingPipe+0x14>
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800122e:	2201      	movs	r2, #1
 8001230:	4669      	mov	r1, sp
 8001232:	e7e1      	b.n	80011f8 <NRF24_openReadingPipe+0x1c>
 8001234:	20000210 	.word	0x20000210
 8001238:	08009606 	.word	0x08009606
 800123c:	2000020c 	.word	0x2000020c
 8001240:	0800960d 	.word	0x0800960d

08001244 <NRF24_setChannel>:
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001244:	287f      	cmp	r0, #127	; 0x7f
 8001246:	4601      	mov	r1, r0
 8001248:	bf28      	it	cs
 800124a:	217f      	movcs	r1, #127	; 0x7f
 800124c:	2005      	movs	r0, #5
 800124e:	f7ff bf41 	b.w	80010d4 <NRF24_write_register>

08001252 <NRF24_getDynamicPayloadSize>:
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001252:	2060      	movs	r0, #96	; 0x60
 8001254:	f7ff bf00 	b.w	8001058 <NRF24_read_register>

08001258 <NRF24_read>:
{
 8001258:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 800125a:	f7ff ff71 	bl	8001140 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800125e:	2017      	movs	r0, #23
 8001260:	f7ff fefa 	bl	8001058 <NRF24_read_register>
 8001264:	4604      	mov	r4, r0
	NRF24_flush_rx();
 8001266:	f7ff ff93 	bl	8001190 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800126a:	f7ff fff2 	bl	8001252 <NRF24_getDynamicPayloadSize>
}
 800126e:	f004 0001 	and.w	r0, r4, #1
 8001272:	bd10      	pop	{r4, pc}

08001274 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001274:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001276:	201d      	movs	r0, #29
 8001278:	f7ff feee 	bl	8001058 <NRF24_read_register>
 800127c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8001280:	201d      	movs	r0, #29
 8001282:	f7ff ff27 	bl	80010d4 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
	dynamic_payloads_enabled = false;
}
 8001286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD,0);
 800128a:	2100      	movs	r1, #0
 800128c:	201c      	movs	r0, #28
 800128e:	f7ff bf21 	b.w	80010d4 <NRF24_write_register>

08001292 <NRF24_setAutoAck>:
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
	if ( enable )
 8001292:	4601      	mov	r1, r0
 8001294:	b100      	cbz	r0, 8001298 <NRF24_setAutoAck+0x6>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001296:	213f      	movs	r1, #63	; 0x3f
  else
    NRF24_write_register(REG_EN_AA, 0x00);
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff bf1b 	b.w	80010d4 <NRF24_write_register>

0800129e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800129e:	b510      	push	{r4, lr}
 80012a0:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012a2:	2006      	movs	r0, #6
 80012a4:	f7ff fed8 	bl	8001058 <NRF24_read_register>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80012a8:	2c03      	cmp	r4, #3
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012aa:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
  if ( level == RF24_PA_0dB)
 80012ae:	d102      	bne.n	80012b6 <NRF24_setPALevel+0x18>
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012b0:	f041 0106 	orr.w	r1, r1, #6
 80012b4:	e00a      	b.n	80012cc <NRF24_setPALevel+0x2e>
  else if ( level == RF24_PA_m6dB )
 80012b6:	2c02      	cmp	r4, #2
 80012b8:	d006      	beq.n	80012c8 <NRF24_setPALevel+0x2a>
 80012ba:	2c04      	cmp	r4, #4
 80012bc:	d0f8      	beq.n	80012b0 <NRF24_setPALevel+0x12>
 80012be:	2c01      	cmp	r4, #1
 80012c0:	d104      	bne.n	80012cc <NRF24_setPALevel+0x2e>
    setup |= _BV(RF_PWR_LOW);
 80012c2:	f041 0102 	orr.w	r1, r1, #2
 80012c6:	e001      	b.n	80012cc <NRF24_setPALevel+0x2e>
    setup |= _BV(RF_PWR_HIGH) ;
 80012c8:	f041 0104 	orr.w	r1, r1, #4
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80012cc:	2006      	movs	r0, #6
}
 80012ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80012d2:	f7ff beff 	b.w	80010d4 <NRF24_write_register>

080012d6 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80012d6:	b538      	push	{r3, r4, r5, lr}
 80012d8:	4605      	mov	r5, r0
	bool result = false;
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012da:	2006      	movs	r0, #6
 80012dc:	f7ff febc 	bl	8001058 <NRF24_read_register>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  if( speed == RF24_250KBPS )
 80012e0:	2d02      	cmp	r5, #2
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80012e2:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
  if( speed == RF24_250KBPS )
 80012e6:	d10c      	bne.n	8001302 <NRF24_setDataRate+0x2c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
    setup |= _BV( RF_DR_LOW ) ;
 80012e8:	f044 0420 	orr.w	r4, r4, #32
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80012ec:	4621      	mov	r1, r4
 80012ee:	2006      	movs	r0, #6
 80012f0:	f7ff fef0 	bl	80010d4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80012f4:	2006      	movs	r0, #6
 80012f6:	f7ff feaf 	bl	8001058 <NRF24_read_register>
  {
    wide_band = false;
  }

  return result;
}
 80012fa:	1b03      	subs	r3, r0, r4
 80012fc:	4258      	negs	r0, r3
 80012fe:	4158      	adcs	r0, r3
 8001300:	bd38      	pop	{r3, r4, r5, pc}
    if ( speed == RF24_2MBPS )
 8001302:	2d01      	cmp	r5, #1
      setup |= _BV(RF_DR_HIGH);
 8001304:	bf08      	it	eq
 8001306:	f044 0408 	orreq.w	r4, r4, #8
 800130a:	e7ef      	b.n	80012ec <NRF24_setDataRate+0x16>

0800130c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800130c:	b510      	push	{r4, lr}
 800130e:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fea1 	bl	8001058 <NRF24_read_register>
 8001316:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800131a:	b12c      	cbz	r4, 8001328 <NRF24_setCRCLength+0x1c>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800131c:	2c01      	cmp	r4, #1
  {
    config |= _BV(BIT_EN_CRC);
 800131e:	bf0c      	ite	eq
 8001320:	f041 0108 	orreq.w	r1, r1, #8
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
    config |= _BV( BIT_CRCO );
 8001324:	f041 010c 	orrne.w	r1, r1, #12
  }
  NRF24_write_register( REG_CONFIG, config );
 8001328:	2000      	movs	r0, #0
}
 800132a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  NRF24_write_register( REG_CONFIG, config );
 800132e:	f7ff bed1 	b.w	80010d4 <NRF24_write_register>

08001332 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001332:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fe8f 	bl	8001058 <NRF24_read_register>
}
 800133a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800133e:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff bec6 	b.w	80010d4 <NRF24_write_register>

08001348 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	4605      	mov	r5, r0
	uint8_t status = NRF24_get_status();
 800134c:	f7ff ff24 	bl	8001198 <NRF24_get_status>
 8001350:	f000 0340 	and.w	r3, r0, #64	; 0x40

  bool result = ( status & _BV(BIT_RX_DR) );
 8001354:	2b00      	cmp	r3, #0
	uint8_t status = NRF24_get_status();
 8001356:	4604      	mov	r4, r0
  bool result = ( status & _BV(BIT_RX_DR) );
 8001358:	bf14      	ite	ne
 800135a:	2601      	movne	r6, #1
 800135c:	2600      	moveq	r6, #0

  if (result)
 800135e:	d00d      	beq.n	800137c <NRF24_availablePipe+0x34>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001360:	b115      	cbz	r5, 8001368 <NRF24_availablePipe+0x20>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001362:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8001366:	702b      	strb	r3, [r5, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	2007      	movs	r0, #7
 800136c:	f7ff feb2 	bl	80010d4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001370:	06a3      	lsls	r3, r4, #26
 8001372:	d503      	bpl.n	800137c <NRF24_availablePipe+0x34>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001374:	2120      	movs	r1, #32
 8001376:	2007      	movs	r0, #7
 8001378:	f7ff feac 	bl	80010d4 <NRF24_write_register>
    }
  }
  return result;
}
 800137c:	4630      	mov	r0, r6
 800137e:	bd70      	pop	{r4, r5, r6, pc}

08001380 <NRF24_available>:
	return NRF24_availablePipe(NULL);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff bfe1 	b.w	8001348 <NRF24_availablePipe>

08001386 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001386:	b570      	push	{r4, r5, r6, lr}
 8001388:	4616      	mov	r6, r2
 800138a:	4604      	mov	r4, r0
 800138c:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
  uint8_t data_len = MIN(len,max_payload_size);
	
  NRF24_csn(0);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fe46 	bl	8001020 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001394:	2e20      	cmp	r6, #32
 8001396:	f004 0007 	and.w	r0, r4, #7
 800139a:	4632      	mov	r2, r6
 800139c:	4629      	mov	r1, r5
 800139e:	bf28      	it	cs
 80013a0:	2220      	movcs	r2, #32
 80013a2:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 80013a6:	f7ff fead 	bl	8001104 <NRF24_write_registerN>
  NRF24_csn(1);
}
 80013aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80013ae:	f7ff be1f 	b.w	8000ff0 <NRF24_csn.part.0>

080013b2 <NRF24_resetStatus>:
}

//46. Reset Status
void NRF24_resetStatus(void)
{
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013b2:	2170      	movs	r1, #112	; 0x70
 80013b4:	2007      	movs	r0, #7
 80013b6:	f7ff be8d 	b.w	80010d4 <NRF24_write_register>
	...

080013bc <NRF24_ACTIVATE_cmd>:
}

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80013bc:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fe2e 	bl	8001020 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80013c4:	f247 3350 	movw	r3, #29520	; 0x7350
	cmdRxBuf[1] = 0x73;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80013c8:	2202      	movs	r2, #2
	cmdRxBuf[0] = CMD_ACTIVATE;
 80013ca:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80013ce:	a901      	add	r1, sp, #4
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <NRF24_ACTIVATE_cmd+0x28>)
 80013d4:	f003 fb2b 	bl	8004a2e <HAL_SPI_Transmit>
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80013d8:	f7ff fe0a 	bl	8000ff0 <NRF24_csn.part.0>
	NRF24_csn(1);
}
 80013dc:	b003      	add	sp, #12
 80013de:	f85d fb04 	ldr.w	pc, [sp], #4
 80013e2:	bf00      	nop
 80013e4:	2000016c 	.word	0x2000016c

080013e8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80013e8:	b510      	push	{r4, lr}
 80013ea:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80013ec:	49bc      	ldr	r1, [pc, #752]	; (80016e0 <printRadioSettings+0x2f8>)
 80013ee:	a807      	add	r0, sp, #28
 80013f0:	f006 f920 	bl	8007634 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013f4:	a807      	add	r0, sp, #28
 80013f6:	f7fe feab 	bl	8000150 <strlen>
 80013fa:	230a      	movs	r3, #10
 80013fc:	b282      	uxth	r2, r0
 80013fe:	a907      	add	r1, sp, #28
 8001400:	48b8      	ldr	r0, [pc, #736]	; (80016e4 <printRadioSettings+0x2fc>)
 8001402:	f004 f9bc 	bl	800577e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff fe26 	bl	8001058 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 800140c:	0704      	lsls	r4, r0, #28
 800140e:	f140 8232 	bpl.w	8001876 <printRadioSettings+0x48e>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001412:	0740      	lsls	r0, r0, #29
 8001414:	bf4c      	ite	mi
 8001416:	49b4      	ldrmi	r1, [pc, #720]	; (80016e8 <printRadioSettings+0x300>)
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001418:	49b4      	ldrpl	r1, [pc, #720]	; (80016ec <printRadioSettings+0x304>)
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800141a:	a807      	add	r0, sp, #28
 800141c:	f006 f90a 	bl	8007634 <strcpy>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001420:	a807      	add	r0, sp, #28
 8001422:	f7fe fe95 	bl	8000150 <strlen>
 8001426:	230a      	movs	r3, #10
 8001428:	b282      	uxth	r2, r0
 800142a:	a907      	add	r1, sp, #28
 800142c:	48ad      	ldr	r0, [pc, #692]	; (80016e4 <printRadioSettings+0x2fc>)
 800142e:	f004 f9a6 	bl	800577e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff fe10 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001438:	f3c0 1340 	ubfx	r3, r0, #5, #1
 800143c:	9303      	str	r3, [sp, #12]
 800143e:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800144e:	f000 0201 	and.w	r2, r0, #1
 8001452:	49a7      	ldr	r1, [pc, #668]	; (80016f0 <printRadioSettings+0x308>)
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	f3c0 0340 	ubfx	r3, r0, #1, #1
 800145a:	a807      	add	r0, sp, #28
 800145c:	f006 f840 	bl	80074e0 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001460:	a807      	add	r0, sp, #28
 8001462:	f7fe fe75 	bl	8000150 <strlen>
 8001466:	230a      	movs	r3, #10
 8001468:	b282      	uxth	r2, r0
 800146a:	a907      	add	r1, sp, #28
 800146c:	489d      	ldr	r0, [pc, #628]	; (80016e4 <printRadioSettings+0x2fc>)
 800146e:	f004 f986 	bl	800577e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001472:	2002      	movs	r0, #2
 8001474:	f7ff fdf0 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001478:	f3c0 1340 	ubfx	r3, r0, #5, #1
 800147c:	9303      	str	r3, [sp, #12]
 800147e:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800148e:	f000 0201 	and.w	r2, r0, #1
 8001492:	4998      	ldr	r1, [pc, #608]	; (80016f4 <printRadioSettings+0x30c>)
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	f3c0 0340 	ubfx	r3, r0, #1, #1
 800149a:	a807      	add	r0, sp, #28
 800149c:	f006 f820 	bl	80074e0 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014a0:	a807      	add	r0, sp, #28
 80014a2:	f7fe fe55 	bl	8000150 <strlen>
 80014a6:	230a      	movs	r3, #10
 80014a8:	b282      	uxth	r2, r0
 80014aa:	a907      	add	r1, sp, #28
 80014ac:	488d      	ldr	r0, [pc, #564]	; (80016e4 <printRadioSettings+0x2fc>)
 80014ae:	f004 f966 	bl	800577e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80014b2:	2003      	movs	r0, #3
 80014b4:	f7ff fdd0 	bl	8001058 <NRF24_read_register>
 80014b8:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80014bc:	498e      	ldr	r1, [pc, #568]	; (80016f8 <printRadioSettings+0x310>)
 80014be:	3202      	adds	r2, #2
 80014c0:	a807      	add	r0, sp, #28
 80014c2:	f006 f80d 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c6:	a807      	add	r0, sp, #28
 80014c8:	f7fe fe42 	bl	8000150 <strlen>
 80014cc:	230a      	movs	r3, #10
 80014ce:	b282      	uxth	r2, r0
 80014d0:	a907      	add	r1, sp, #28
 80014d2:	4884      	ldr	r0, [pc, #528]	; (80016e4 <printRadioSettings+0x2fc>)
 80014d4:	f004 f953 	bl	800577e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80014d8:	2005      	movs	r0, #5
 80014da:	f7ff fdbd 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80014de:	4987      	ldr	r1, [pc, #540]	; (80016fc <printRadioSettings+0x314>)
 80014e0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80014e4:	a807      	add	r0, sp, #28
 80014e6:	f005 fffb 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014ea:	a807      	add	r0, sp, #28
 80014ec:	f7fe fe30 	bl	8000150 <strlen>
 80014f0:	a907      	add	r1, sp, #28
 80014f2:	b282      	uxth	r2, r0
 80014f4:	230a      	movs	r3, #10
 80014f6:	487b      	ldr	r0, [pc, #492]	; (80016e4 <printRadioSettings+0x2fc>)
 80014f8:	f004 f941 	bl	800577e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80014fc:	2006      	movs	r0, #6
 80014fe:	f7ff fdab 	bl	8001058 <NRF24_read_register>
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001502:	0701      	lsls	r1, r0, #28
 8001504:	bf4c      	ite	mi
 8001506:	497e      	ldrmi	r1, [pc, #504]	; (8001700 <printRadioSettings+0x318>)
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001508:	497e      	ldrpl	r1, [pc, #504]	; (8001704 <printRadioSettings+0x31c>)
	reg8Val = NRF24_read_register(0x06);
 800150a:	4604      	mov	r4, r0
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800150c:	a807      	add	r0, sp, #28
 800150e:	f006 f891 	bl	8007634 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001512:	a807      	add	r0, sp, #28
 8001514:	f7fe fe1c 	bl	8000150 <strlen>
 8001518:	230a      	movs	r3, #10
 800151a:	b282      	uxth	r2, r0
 800151c:	a907      	add	r1, sp, #28
 800151e:	4871      	ldr	r0, [pc, #452]	; (80016e4 <printRadioSettings+0x2fc>)
 8001520:	f004 f92d 	bl	800577e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001524:	f014 0f06 	tst.w	r4, #6
	reg8Val = (reg8Val>>1);
 8001528:	f3c4 0341 	ubfx	r3, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800152c:	f040 81a5 	bne.w	800187a <printRadioSettings+0x492>
 8001530:	4975      	ldr	r1, [pc, #468]	; (8001708 <printRadioSettings+0x320>)
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001532:	a807      	add	r0, sp, #28
 8001534:	f006 f87e 	bl	8007634 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001538:	a807      	add	r0, sp, #28
 800153a:	f7fe fe09 	bl	8000150 <strlen>
 800153e:	230a      	movs	r3, #10
 8001540:	b282      	uxth	r2, r0
 8001542:	a907      	add	r1, sp, #28
 8001544:	4867      	ldr	r0, [pc, #412]	; (80016e4 <printRadioSettings+0x2fc>)
 8001546:	f004 f91a 	bl	800577e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800154a:	a905      	add	r1, sp, #20
 800154c:	2205      	movs	r2, #5
 800154e:	200a      	movs	r0, #10
 8001550:	f7ff fda2 	bl	8001098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001554:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001558:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001562:	496a      	ldr	r1, [pc, #424]	; (800170c <printRadioSettings+0x324>)
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800156a:	a807      	add	r0, sp, #28
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001572:	f005 ffb5 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001576:	a807      	add	r0, sp, #28
 8001578:	f7fe fdea 	bl	8000150 <strlen>
 800157c:	230a      	movs	r3, #10
 800157e:	b282      	uxth	r2, r0
 8001580:	a907      	add	r1, sp, #28
 8001582:	4858      	ldr	r0, [pc, #352]	; (80016e4 <printRadioSettings+0x2fc>)
 8001584:	f004 f8fb 	bl	800577e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001588:	a905      	add	r1, sp, #20
 800158a:	2205      	movs	r2, #5
 800158c:	200b      	movs	r0, #11
 800158e:	f7ff fd83 	bl	8001098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001592:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001596:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80015a0:	495b      	ldr	r1, [pc, #364]	; (8001710 <printRadioSettings+0x328>)
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80015a8:	a807      	add	r0, sp, #28
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80015b0:	f005 ff96 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b4:	a807      	add	r0, sp, #28
 80015b6:	f7fe fdcb 	bl	8000150 <strlen>
 80015ba:	230a      	movs	r3, #10
 80015bc:	b282      	uxth	r2, r0
 80015be:	a907      	add	r1, sp, #28
 80015c0:	4848      	ldr	r0, [pc, #288]	; (80016e4 <printRadioSettings+0x2fc>)
 80015c2:	f004 f8dc 	bl	800577e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80015c6:	a905      	add	r1, sp, #20
 80015c8:	2201      	movs	r2, #1
 80015ca:	200c      	movs	r0, #12
 80015cc:	f7ff fd64 	bl	8001098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80015d0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80015d4:	494f      	ldr	r1, [pc, #316]	; (8001714 <printRadioSettings+0x32c>)
 80015d6:	a807      	add	r0, sp, #28
 80015d8:	f005 ff82 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015dc:	a807      	add	r0, sp, #28
 80015de:	f7fe fdb7 	bl	8000150 <strlen>
 80015e2:	230a      	movs	r3, #10
 80015e4:	b282      	uxth	r2, r0
 80015e6:	a907      	add	r1, sp, #28
 80015e8:	483e      	ldr	r0, [pc, #248]	; (80016e4 <printRadioSettings+0x2fc>)
 80015ea:	f004 f8c8 	bl	800577e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80015ee:	a905      	add	r1, sp, #20
 80015f0:	2201      	movs	r2, #1
 80015f2:	200d      	movs	r0, #13
 80015f4:	f7ff fd50 	bl	8001098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80015f8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80015fc:	4946      	ldr	r1, [pc, #280]	; (8001718 <printRadioSettings+0x330>)
 80015fe:	a807      	add	r0, sp, #28
 8001600:	f005 ff6e 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001604:	a807      	add	r0, sp, #28
 8001606:	f7fe fda3 	bl	8000150 <strlen>
 800160a:	230a      	movs	r3, #10
 800160c:	b282      	uxth	r2, r0
 800160e:	a907      	add	r1, sp, #28
 8001610:	4834      	ldr	r0, [pc, #208]	; (80016e4 <printRadioSettings+0x2fc>)
 8001612:	f004 f8b4 	bl	800577e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001616:	a905      	add	r1, sp, #20
 8001618:	2201      	movs	r2, #1
 800161a:	200e      	movs	r0, #14
 800161c:	f7ff fd3c 	bl	8001098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001620:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001624:	493d      	ldr	r1, [pc, #244]	; (800171c <printRadioSettings+0x334>)
 8001626:	a807      	add	r0, sp, #28
 8001628:	f005 ff5a 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800162c:	a807      	add	r0, sp, #28
 800162e:	f7fe fd8f 	bl	8000150 <strlen>
 8001632:	230a      	movs	r3, #10
 8001634:	b282      	uxth	r2, r0
 8001636:	a907      	add	r1, sp, #28
 8001638:	482a      	ldr	r0, [pc, #168]	; (80016e4 <printRadioSettings+0x2fc>)
 800163a:	f004 f8a0 	bl	800577e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800163e:	a905      	add	r1, sp, #20
 8001640:	2201      	movs	r2, #1
 8001642:	200f      	movs	r0, #15
 8001644:	f7ff fd28 	bl	8001098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001648:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800164c:	4934      	ldr	r1, [pc, #208]	; (8001720 <printRadioSettings+0x338>)
 800164e:	a807      	add	r0, sp, #28
 8001650:	f005 ff46 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001654:	a807      	add	r0, sp, #28
 8001656:	f7fe fd7b 	bl	8000150 <strlen>
 800165a:	230a      	movs	r3, #10
 800165c:	b282      	uxth	r2, r0
 800165e:	a907      	add	r1, sp, #28
 8001660:	4820      	ldr	r0, [pc, #128]	; (80016e4 <printRadioSettings+0x2fc>)
 8001662:	f004 f88c 	bl	800577e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001666:	a905      	add	r1, sp, #20
 8001668:	2205      	movs	r2, #5
 800166a:	2010      	movs	r0, #16
 800166c:	f7ff fd14 	bl	8001098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001670:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001674:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800167e:	4929      	ldr	r1, [pc, #164]	; (8001724 <printRadioSettings+0x33c>)
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001686:	a807      	add	r0, sp, #28
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800168e:	f005 ff27 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001692:	a807      	add	r0, sp, #28
 8001694:	f7fe fd5c 	bl	8000150 <strlen>
 8001698:	230a      	movs	r3, #10
 800169a:	b282      	uxth	r2, r0
 800169c:	a907      	add	r1, sp, #28
 800169e:	4811      	ldr	r0, [pc, #68]	; (80016e4 <printRadioSettings+0x2fc>)
 80016a0:	f004 f86d 	bl	800577e <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80016a4:	2011      	movs	r0, #17
 80016a6:	f7ff fcd7 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016aa:	491f      	ldr	r1, [pc, #124]	; (8001728 <printRadioSettings+0x340>)
 80016ac:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80016b0:	a807      	add	r0, sp, #28
 80016b2:	f005 ff15 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016b6:	a807      	add	r0, sp, #28
 80016b8:	f7fe fd4a 	bl	8000150 <strlen>
 80016bc:	230a      	movs	r3, #10
 80016be:	b282      	uxth	r2, r0
 80016c0:	a907      	add	r1, sp, #28
 80016c2:	4808      	ldr	r0, [pc, #32]	; (80016e4 <printRadioSettings+0x2fc>)
 80016c4:	f004 f85b 	bl	800577e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80016c8:	2012      	movs	r0, #18
 80016ca:	f7ff fcc5 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016ce:	4917      	ldr	r1, [pc, #92]	; (800172c <printRadioSettings+0x344>)
 80016d0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80016d4:	a807      	add	r0, sp, #28
 80016d6:	f005 ff03 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016da:	a807      	add	r0, sp, #28
 80016dc:	e028      	b.n	8001730 <printRadioSettings+0x348>
 80016de:	bf00      	nop
 80016e0:	080091e8 	.word	0x080091e8
 80016e4:	200001c4 	.word	0x200001c4
 80016e8:	0800921b 	.word	0x0800921b
 80016ec:	08009237 	.word	0x08009237
 80016f0:	08009266 	.word	0x08009266
 80016f4:	080092aa 	.word	0x080092aa
 80016f8:	080092f3 	.word	0x080092f3
 80016fc:	0800930c 	.word	0x0800930c
 8001700:	0800931f 	.word	0x0800931f
 8001704:	08009336 	.word	0x08009336
 8001708:	0800934d 	.word	0x0800934d
 800170c:	0800939a 	.word	0x0800939a
 8001710:	080093ca 	.word	0x080093ca
 8001714:	080093fa 	.word	0x080093fa
 8001718:	08009422 	.word	0x08009422
 800171c:	0800944a 	.word	0x0800944a
 8001720:	08009472 	.word	0x08009472
 8001724:	0800949a 	.word	0x0800949a
 8001728:	080094c4 	.word	0x080094c4
 800172c:	080094dd 	.word	0x080094dd
 8001730:	f7fe fd0e 	bl	8000150 <strlen>
 8001734:	230a      	movs	r3, #10
 8001736:	b282      	uxth	r2, r0
 8001738:	a907      	add	r1, sp, #28
 800173a:	4854      	ldr	r0, [pc, #336]	; (800188c <printRadioSettings+0x4a4>)
 800173c:	f004 f81f 	bl	800577e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001740:	2013      	movs	r0, #19
 8001742:	f7ff fc89 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001746:	4952      	ldr	r1, [pc, #328]	; (8001890 <printRadioSettings+0x4a8>)
 8001748:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800174c:	a807      	add	r0, sp, #28
 800174e:	f005 fec7 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001752:	a807      	add	r0, sp, #28
 8001754:	f7fe fcfc 	bl	8000150 <strlen>
 8001758:	230a      	movs	r3, #10
 800175a:	b282      	uxth	r2, r0
 800175c:	a907      	add	r1, sp, #28
 800175e:	484b      	ldr	r0, [pc, #300]	; (800188c <printRadioSettings+0x4a4>)
 8001760:	f004 f80d 	bl	800577e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001764:	2014      	movs	r0, #20
 8001766:	f7ff fc77 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800176a:	494a      	ldr	r1, [pc, #296]	; (8001894 <printRadioSettings+0x4ac>)
 800176c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001770:	a807      	add	r0, sp, #28
 8001772:	f005 feb5 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001776:	a807      	add	r0, sp, #28
 8001778:	f7fe fcea 	bl	8000150 <strlen>
 800177c:	230a      	movs	r3, #10
 800177e:	b282      	uxth	r2, r0
 8001780:	a907      	add	r1, sp, #28
 8001782:	4842      	ldr	r0, [pc, #264]	; (800188c <printRadioSettings+0x4a4>)
 8001784:	f003 fffb 	bl	800577e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001788:	2015      	movs	r0, #21
 800178a:	f7ff fc65 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800178e:	4942      	ldr	r1, [pc, #264]	; (8001898 <printRadioSettings+0x4b0>)
 8001790:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001794:	a807      	add	r0, sp, #28
 8001796:	f005 fea3 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800179a:	a807      	add	r0, sp, #28
 800179c:	f7fe fcd8 	bl	8000150 <strlen>
 80017a0:	230a      	movs	r3, #10
 80017a2:	b282      	uxth	r2, r0
 80017a4:	a907      	add	r1, sp, #28
 80017a6:	4839      	ldr	r0, [pc, #228]	; (800188c <printRadioSettings+0x4a4>)
 80017a8:	f003 ffe9 	bl	800577e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80017ac:	2016      	movs	r0, #22
 80017ae:	f7ff fc53 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017b2:	493a      	ldr	r1, [pc, #232]	; (800189c <printRadioSettings+0x4b4>)
 80017b4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80017b8:	a807      	add	r0, sp, #28
 80017ba:	f005 fe91 	bl	80074e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017be:	a807      	add	r0, sp, #28
 80017c0:	f7fe fcc6 	bl	8000150 <strlen>
 80017c4:	a907      	add	r1, sp, #28
 80017c6:	b282      	uxth	r2, r0
 80017c8:	230a      	movs	r3, #10
 80017ca:	4830      	ldr	r0, [pc, #192]	; (800188c <printRadioSettings+0x4a4>)
 80017cc:	f003 ffd7 	bl	800577e <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80017d0:	201c      	movs	r0, #28
 80017d2:	f7ff fc41 	bl	8001058 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d6:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80017da:	9303      	str	r3, [sp, #12]
 80017dc:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80017ec:	f000 0201 	and.w	r2, r0, #1
 80017f0:	492b      	ldr	r1, [pc, #172]	; (80018a0 <printRadioSettings+0x4b8>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80017f8:	a807      	add	r0, sp, #28
 80017fa:	f005 fe71 	bl	80074e0 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017fe:	a807      	add	r0, sp, #28
 8001800:	f7fe fca6 	bl	8000150 <strlen>
 8001804:	a907      	add	r1, sp, #28
 8001806:	b282      	uxth	r2, r0
 8001808:	230a      	movs	r3, #10
 800180a:	4820      	ldr	r0, [pc, #128]	; (800188c <printRadioSettings+0x4a4>)
 800180c:	f003 ffb7 	bl	800577e <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001810:	201d      	movs	r0, #29
 8001812:	f7ff fc21 	bl	8001058 <NRF24_read_register>
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001816:	0742      	lsls	r2, r0, #29
 8001818:	bf4c      	ite	mi
 800181a:	4922      	ldrmi	r1, [pc, #136]	; (80018a4 <printRadioSettings+0x4bc>)
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800181c:	4922      	ldrpl	r1, [pc, #136]	; (80018a8 <printRadioSettings+0x4c0>)
	reg8Val = NRF24_read_register(0x1d);
 800181e:	4604      	mov	r4, r0
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001820:	a807      	add	r0, sp, #28
 8001822:	f005 ff07 	bl	8007634 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001826:	a807      	add	r0, sp, #28
 8001828:	f7fe fc92 	bl	8000150 <strlen>
 800182c:	a907      	add	r1, sp, #28
 800182e:	230a      	movs	r3, #10
 8001830:	b282      	uxth	r2, r0
 8001832:	4816      	ldr	r0, [pc, #88]	; (800188c <printRadioSettings+0x4a4>)
 8001834:	f003 ffa3 	bl	800577e <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001838:	07a3      	lsls	r3, r4, #30
 800183a:	bf4c      	ite	mi
 800183c:	491b      	ldrmi	r1, [pc, #108]	; (80018ac <printRadioSettings+0x4c4>)
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800183e:	491c      	ldrpl	r1, [pc, #112]	; (80018b0 <printRadioSettings+0x4c8>)
 8001840:	a807      	add	r0, sp, #28
 8001842:	f005 fef7 	bl	8007634 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001846:	a807      	add	r0, sp, #28
 8001848:	f7fe fc82 	bl	8000150 <strlen>
 800184c:	230a      	movs	r3, #10
 800184e:	b282      	uxth	r2, r0
 8001850:	a907      	add	r1, sp, #28
 8001852:	480e      	ldr	r0, [pc, #56]	; (800188c <printRadioSettings+0x4a4>)
 8001854:	f003 ff93 	bl	800577e <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <printRadioSettings+0x4cc>)
 800185a:	a807      	add	r0, sp, #28
 800185c:	f005 feea 	bl	8007634 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001860:	a807      	add	r0, sp, #28
 8001862:	f7fe fc75 	bl	8000150 <strlen>
 8001866:	230a      	movs	r3, #10
 8001868:	b282      	uxth	r2, r0
 800186a:	a907      	add	r1, sp, #28
 800186c:	4807      	ldr	r0, [pc, #28]	; (800188c <printRadioSettings+0x4a4>)
 800186e:	f003 ff86 	bl	800577e <HAL_UART_Transmit>
}
 8001872:	b020      	add	sp, #128	; 0x80
 8001874:	bd10      	pop	{r4, pc}
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001876:	4910      	ldr	r1, [pc, #64]	; (80018b8 <printRadioSettings+0x4d0>)
 8001878:	e5cf      	b.n	800141a <printRadioSettings+0x32>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <printRadioSettings+0x49a>
 800187e:	490f      	ldr	r1, [pc, #60]	; (80018bc <printRadioSettings+0x4d4>)
 8001880:	e657      	b.n	8001532 <printRadioSettings+0x14a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001882:	2b02      	cmp	r3, #2
 8001884:	bf0c      	ite	eq
 8001886:	490e      	ldreq	r1, [pc, #56]	; (80018c0 <printRadioSettings+0x4d8>)
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001888:	490e      	ldrne	r1, [pc, #56]	; (80018c4 <printRadioSettings+0x4dc>)
 800188a:	e652      	b.n	8001532 <printRadioSettings+0x14a>
 800188c:	200001c4 	.word	0x200001c4
 8001890:	080094f6 	.word	0x080094f6
 8001894:	0800950f 	.word	0x0800950f
 8001898:	08009528 	.word	0x08009528
 800189c:	08009541 	.word	0x08009541
 80018a0:	0800955a 	.word	0x0800955a
 80018a4:	080095a4 	.word	0x080095a4
 80018a8:	080095ba 	.word	0x080095ba
 80018ac:	080095d1 	.word	0x080095d1
 80018b0:	080095eb 	.word	0x080095eb
 80018b4:	080091e8 	.word	0x080091e8
 80018b8:	08009252 	.word	0x08009252
 80018bc:	08009361 	.word	0x08009361
 80018c0:	08009375 	.word	0x08009375
 80018c4:	08009388 	.word	0x08009388

080018c8 <NRF24_begin>:
{
 80018c8:	b082      	sub	sp, #8
 80018ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018cc:	4606      	mov	r6, r0
 80018ce:	460d      	mov	r5, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	a906      	add	r1, sp, #24
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80018d4:	2258      	movs	r2, #88	; 0x58
{
 80018d6:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80018da:	4856      	ldr	r0, [pc, #344]	; (8001a34 <NRF24_begin+0x16c>)
 80018dc:	f005 feb2 	bl	8007644 <memcpy>
	nrf24_PORT = nrf24PORT;
 80018e0:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <NRF24_begin+0x170>)
 80018e2:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <NRF24_begin+0x174>)
 80018e6:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <NRF24_begin+0x178>)
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80018ea:	f04f 35e7 	mov.w	r5, #3890735079	; 0xe7e7e7e7
	nrf24_CE_PIN = nrfCE_Pin;
 80018ee:	801c      	strh	r4, [r3, #0]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80018f0:	f7ff fb7e 	bl	8000ff0 <NRF24_csn.part.0>
	NRF24_ce(0);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fba1 	bl	800103c <NRF24_ce>
	HAL_Delay(5);
 80018fa:	2005      	movs	r0, #5
 80018fc:	f001 f996 	bl	8002c2c <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8001900:	2108      	movs	r1, #8
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff fbe6 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001908:	213f      	movs	r1, #63	; 0x3f
 800190a:	2001      	movs	r0, #1
 800190c:	f7ff fbe2 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001910:	2103      	movs	r1, #3
 8001912:	2002      	movs	r0, #2
 8001914:	f7ff fbde 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001918:	2103      	movs	r1, #3
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800191a:	24e7      	movs	r4, #231	; 0xe7
	NRF24_write_register(0x03, 0x03);
 800191c:	4608      	mov	r0, r1
 800191e:	f7ff fbd9 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001922:	2103      	movs	r1, #3
 8001924:	2004      	movs	r0, #4
 8001926:	f7ff fbd5 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800192a:	2102      	movs	r1, #2
 800192c:	2005      	movs	r0, #5
 800192e:	f7ff fbd1 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001932:	210f      	movs	r1, #15
 8001934:	2006      	movs	r0, #6
 8001936:	f7ff fbcd 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800193a:	210e      	movs	r1, #14
 800193c:	2007      	movs	r0, #7
 800193e:	f7ff fbc9 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001942:	2100      	movs	r1, #0
 8001944:	2008      	movs	r0, #8
 8001946:	f7ff fbc5 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800194a:	2100      	movs	r1, #0
 800194c:	2009      	movs	r0, #9
 800194e:	f7ff fbc1 	bl	80010d4 <NRF24_write_register>
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001952:	4669      	mov	r1, sp
 8001954:	2205      	movs	r2, #5
 8001956:	200a      	movs	r0, #10
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001958:	9500      	str	r5, [sp, #0]
 800195a:	f88d 4004 	strb.w	r4, [sp, #4]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800195e:	f7ff fbd1 	bl	8001104 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001962:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	23c2      	movs	r3, #194	; 0xc2
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800196a:	2205      	movs	r2, #5
 800196c:	4669      	mov	r1, sp
 800196e:	200b      	movs	r0, #11
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001970:	f88d 3004 	strb.w	r3, [sp, #4]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001974:	f7ff fbc6 	bl	8001104 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001978:	21c3      	movs	r1, #195	; 0xc3
 800197a:	200c      	movs	r0, #12
 800197c:	f7ff fbaa 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001980:	21c4      	movs	r1, #196	; 0xc4
 8001982:	200d      	movs	r0, #13
 8001984:	f7ff fba6 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001988:	21c5      	movs	r1, #197	; 0xc5
 800198a:	200e      	movs	r0, #14
 800198c:	f7ff fba2 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001990:	21c6      	movs	r1, #198	; 0xc6
 8001992:	200f      	movs	r0, #15
 8001994:	f7ff fb9e 	bl	80010d4 <NRF24_write_register>
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001998:	2205      	movs	r2, #5
 800199a:	4669      	mov	r1, sp
 800199c:	2010      	movs	r0, #16
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800199e:	9500      	str	r5, [sp, #0]
 80019a0:	f88d 4004 	strb.w	r4, [sp, #4]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80019a4:	f7ff fbae 	bl	8001104 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80019a8:	2100      	movs	r1, #0
 80019aa:	2011      	movs	r0, #17
 80019ac:	f7ff fb92 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80019b0:	2100      	movs	r1, #0
 80019b2:	2012      	movs	r0, #18
 80019b4:	f7ff fb8e 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80019b8:	2100      	movs	r1, #0
 80019ba:	2013      	movs	r0, #19
 80019bc:	f7ff fb8a 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2014      	movs	r0, #20
 80019c4:	f7ff fb86 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80019c8:	2100      	movs	r1, #0
 80019ca:	2015      	movs	r0, #21
 80019cc:	f7ff fb82 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	2016      	movs	r0, #22
 80019d4:	f7ff fb7e 	bl	80010d4 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 80019d8:	f7ff fcf0 	bl	80013bc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80019dc:	2100      	movs	r1, #0
 80019de:	201c      	movs	r0, #28
 80019e0:	f7ff fb78 	bl	80010d4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80019e4:	2100      	movs	r1, #0
 80019e6:	201d      	movs	r0, #29
 80019e8:	f7ff fb74 	bl	80010d4 <NRF24_write_register>
	printRadioSettings();
 80019ec:	f7ff fcfc 	bl	80013e8 <printRadioSettings>
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80019f0:	21ff      	movs	r1, #255	; 0xff
 80019f2:	2004      	movs	r0, #4
 80019f4:	f7ff fb6e 	bl	80010d4 <NRF24_write_register>
	NRF24_setPALevel(RF24_PA_0dB);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f7ff fc50 	bl	800129e <NRF24_setPALevel>
	NRF24_setDataRate(RF24_2MBPS);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff fc69 	bl	80012d6 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7ff fc81 	bl	800130c <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8001a0a:	f7ff fc33 	bl	8001274 <NRF24_disableDynamicPayloads>
  payload_size = MIN(size,max_payload_size);
 8001a0e:	2220      	movs	r2, #32
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <NRF24_begin+0x17c>)
 8001a12:	701a      	strb	r2, [r3, #0]
	NRF24_resetStatus();
 8001a14:	f7ff fccd 	bl	80013b2 <NRF24_resetStatus>
	NRF24_setChannel(76);
 8001a18:	204c      	movs	r0, #76	; 0x4c
 8001a1a:	f7ff fc13 	bl	8001244 <NRF24_setChannel>
	NRF24_flush_tx();
 8001a1e:	f7ff fbb3 	bl	8001188 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a22:	f7ff fbb5 	bl	8001190 <NRF24_flush_rx>
	NRF24_powerDown();
 8001a26:	f7ff fc84 	bl	8001332 <NRF24_powerDown>
}
 8001a2a:	b002      	add	sp, #8
 8001a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a30:	b002      	add	sp, #8
 8001a32:	4770      	bx	lr
 8001a34:	2000016c 	.word	0x2000016c
 8001a38:	20000168 	.word	0x20000168
 8001a3c:	20000164 	.word	0x20000164
 8001a40:	20000162 	.word	0x20000162
 8001a44:	2000020c 	.word	0x2000020c

08001a48 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001a48:	b084      	sub	sp, #16
 8001a4a:	b508      	push	{r3, lr}
 8001a4c:	f10d 0c08 	add.w	ip, sp, #8
 8001a50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001a54:	2248      	movs	r2, #72	; 0x48
 8001a56:	4661      	mov	r1, ip
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <nrf24_DebugUART_Init+0x20>)
 8001a5a:	f005 fdf3 	bl	8007644 <memcpy>
}
 8001a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001a62:	b004      	add	sp, #16
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200001c4 	.word	0x200001c4

08001a6c <nrf_init>:
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
}
void nrf_init(void)
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
	NRF24_begin(GPIOB, GPIO_PIN_10, GPIO_PIN_11, hspi2);
 8001a6e:	4c1b      	ldr	r4, [pc, #108]	; (8001adc <nrf_init+0x70>)
{
 8001a70:	b096      	sub	sp, #88	; 0x58
	NRF24_begin(GPIOB, GPIO_PIN_10, GPIO_PIN_11, hspi2);
 8001a72:	1d21      	adds	r1, r4, #4
 8001a74:	2254      	movs	r2, #84	; 0x54
 8001a76:	4668      	mov	r0, sp
 8001a78:	f005 fde4 	bl	8007644 <memcpy>
 8001a7c:	6823      	ldr	r3, [r4, #0]
	nrf24_DebugUART_Init(huart2);
 8001a7e:	466c      	mov	r4, sp
 8001a80:	4e17      	ldr	r6, [pc, #92]	; (8001ae0 <nrf_init+0x74>)
	NRF24_begin(GPIOB, GPIO_PIN_10, GPIO_PIN_11, hspi2);
 8001a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a8a:	4816      	ldr	r0, [pc, #88]	; (8001ae4 <nrf_init+0x78>)
	nrf24_DebugUART_Init(huart2);
 8001a8c:	f106 0510 	add.w	r5, r6, #16
	NRF24_begin(GPIOB, GPIO_PIN_10, GPIO_PIN_11, hspi2);
 8001a90:	f7ff ff1a 	bl	80018c8 <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aa4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aa8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001aac:	f7ff ffcc 	bl	8001a48 <nrf24_DebugUART_Init>
	printRadioSettings();
 8001ab0:	f7ff fc9a 	bl	80013e8 <printRadioSettings>
	NRF24_setAutoAck(false);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fbec 	bl	8001292 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001aba:	2034      	movs	r0, #52	; 0x34
 8001abc:	f7ff fbc2 	bl	8001244 <NRF24_setChannel>
  payload_size = MIN(size,max_payload_size);
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <nrf_init+0x7c>)
	NRF24_setPayloadSize(32);
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8001ac4:	2001      	movs	r0, #1
  payload_size = MIN(size,max_payload_size);
 8001ac6:	701a      	strb	r2, [r3, #0]
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <nrf_init+0x80>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7ff fb85 	bl	80011dc <NRF24_openReadingPipe>
	NRF24_startListening();
}
 8001ad2:	b016      	add	sp, #88	; 0x58
 8001ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	NRF24_startListening();
 8001ad8:	f7ff bb62 	b.w	80011a0 <NRF24_startListening>
 8001adc:	20000364 	.word	0x20000364
 8001ae0:	20000494 	.word	0x20000494
 8001ae4:	40010c00 	.word	0x40010c00
 8001ae8:	2000020c 	.word	0x2000020c
 8001aec:	20000008 	.word	0x20000008

08001af0 <Read_Temperature>:
//Temperature variables
uint32_t volatile temp;


float Read_Temperature()
{
 8001af0:	b508      	push	{r3, lr}
	temp = ((V25 - VSENSE * adc[0]) / Avg_Slope) +25 ;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <Read_Temperature+0x60>)
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	f7fe fc75 	bl	80003e4 <__aeabi_ui2d>
 8001afa:	a30f      	add	r3, pc, #60	; (adr r3, 8001b38 <Read_Temperature+0x48>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fcea 	bl	80004d8 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	a10d      	add	r1, pc, #52	; (adr r1, 8001b40 <Read_Temperature+0x50>)
 8001b0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b0e:	f7fe fb2b 	bl	8000168 <__aeabi_dsub>
 8001b12:	a30d      	add	r3, pc, #52	; (adr r3, 8001b48 <Read_Temperature+0x58>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fe08 	bl	800072c <__aeabi_ddiv>
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <Read_Temperature+0x64>)
 8001b20:	f7fe fb24 	bl	800016c <__adddf3>
 8001b24:	f7fe ffb0 	bl	8000a88 <__aeabi_d2uiz>
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <Read_Temperature+0x68>)
 8001b2a:	6018      	str	r0, [r3, #0]
	return temp;
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f7ff f8d1 	bl	8000cd4 <__aeabi_ui2f>
}
 8001b32:	bd08      	pop	{r3, pc}
 8001b34:	f3af 8000 	nop.w
 8001b38:	66666666 	.word	0x66666666
 8001b3c:	3f4a6666 	.word	0x3f4a6666
 8001b40:	ae147ae1 	.word	0xae147ae1
 8001b44:	3ff6e147 	.word	0x3ff6e147
 8001b48:	75f6fd22 	.word	0x75f6fd22
 8001b4c:	3f719ce0 	.word	0x3f719ce0
 8001b50:	20000218 	.word	0x20000218
 8001b54:	40390000 	.word	0x40390000
 8001b58:	20000228 	.word	0x20000228

08001b5c <gps_task>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void gps_task(void*paramters)
{
 8001b5c:	b507      	push	{r0, r1, r2, lr}

	while(1)
	{
		dma_uart(&hdma_usart1_rx, &huart1, &gpsdata, GGA, rx_databuffer);
 8001b5e:	4e07      	ldr	r6, [pc, #28]	; (8001b7c <gps_task+0x20>)
 8001b60:	4d07      	ldr	r5, [pc, #28]	; (8001b80 <gps_task+0x24>)
 8001b62:	4c08      	ldr	r4, [pc, #32]	; (8001b84 <gps_task+0x28>)
 8001b64:	462b      	mov	r3, r5
 8001b66:	4622      	mov	r2, r4
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <gps_task+0x2c>)
 8001b6a:	4808      	ldr	r0, [pc, #32]	; (8001b8c <gps_task+0x30>)
 8001b6c:	9600      	str	r6, [sp, #0]
 8001b6e:	f000 fccb 	bl	8002508 <dma_uart>
		vTaskDelay(500);
 8001b72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b76:	f004 fe79 	bl	800686c <vTaskDelay>
	while(1)
 8001b7a:	e7f3      	b.n	8001b64 <gps_task+0x8>
 8001b7c:	20000580 	.word	0x20000580
 8001b80:	200004dc 	.word	0x200004dc
 8001b84:	20000544 	.word	0x20000544
 8001b88:	2000044c 	.word	0x2000044c
 8001b8c:	200002cc 	.word	0x200002cc

08001b90 <Battery_Temperature_task>:
	}
}

void Battery_Temperature_task(void*paramters)
{
	percentage =100;
 8001b90:	2264      	movs	r2, #100	; 0x64
{
 8001b92:	b508      	push	{r3, lr}
	percentage =100;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <Battery_Temperature_task+0x1c>)
 8001b96:	601a      	str	r2, [r3, #0]
	new_percentage =100;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <Battery_Temperature_task+0x20>)
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <Battery_Temperature_task+0x24>)
 8001b9c:	601a      	str	r2, [r3, #0]
	while(1)
	{
		Read_Temperature();
 8001b9e:	f7ff ffa7 	bl	8001af0 <Read_Temperature>
		//		Read_Battery();
		vTaskDelay(500);
 8001ba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba6:	f004 fe61 	bl	800686c <vTaskDelay>
	while(1)
 8001baa:	e7f8      	b.n	8001b9e <Battery_Temperature_task+0xe>
 8001bac:	20000224 	.word	0x20000224
 8001bb0:	20000220 	.word	0x20000220
 8001bb4:	42c80000 	.word	0x42c80000

08001bb8 <compass_task>:
	}
}

void compass_task(void*paramters)
{
 8001bb8:	b508      	push	{r3, lr}
	HCompass_Init();
 8001bba:	f7ff f977 	bl	8000eac <HCompass_Init>
	while(1)
	{
		HCompass_ReadAxis();
 8001bbe:	f7ff f9d5 	bl	8000f6c <HCompass_ReadAxis>
		vTaskDelay(500);
 8001bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc6:	f004 fe51 	bl	800686c <vTaskDelay>
	while(1)
 8001bca:	e7f8      	b.n	8001bbe <compass_task+0x6>

08001bcc <CAN_task>:
	}
}


void CAN_task(void*paramters)
{
 8001bcc:	b508      	push	{r3, lr}
	HAL_CAN_Start(&hcan);
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <CAN_task+0x20>)
 8001bd0:	f001 fb51 	bl	8003276 <HAL_CAN_Start>
	while(1)
	{
		can_tx(0x001, 8, Tx_can_data);
 8001bd4:	4c06      	ldr	r4, [pc, #24]	; (8001bf0 <CAN_task+0x24>)
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	2108      	movs	r1, #8
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7ff f916 	bl	8000e0c <can_tx>
		can_rx();
 8001be0:	f7ff f8f0 	bl	8000dc4 <can_rx>
		vTaskDelay(100);
 8001be4:	2064      	movs	r0, #100	; 0x64
 8001be6:	f004 fe41 	bl	800686c <vTaskDelay>
	while(1)
 8001bea:	e7f4      	b.n	8001bd6 <CAN_task+0xa>
 8001bec:	20000260 	.word	0x20000260
 8001bf0:	20000108 	.word	0x20000108

08001bf4 <STEERING_task>:
	}
}

void STEERING_task(void*paramters)
{
 8001bf4:	b508      	push	{r3, lr}
	HServo_Timer_Init();
 8001bf6:	f7ff f9e7 	bl	8000fc8 <HServo_Timer_Init>
	while(1)
	{
		steering();
 8001bfa:	f000 fcb9 	bl	8002570 <steering>
		//		HServo_writePosition(100);

		vTaskDelay(50);
 8001bfe:	2032      	movs	r0, #50	; 0x32
 8001c00:	f004 fe34 	bl	800686c <vTaskDelay>
	while(1)
 8001c04:	e7f9      	b.n	8001bfa <STEERING_task+0x6>
	...

08001c08 <NRF_task>:
	}
}


void NRF_task(void*paramters)
{
 8001c08:	b508      	push	{r3, lr}
	nrf_init();
 8001c0a:	f7ff ff2f 	bl	8001a6c <nrf_init>

	while(1)
	{
		if(NRF24_available())
		{
			NRF24_read(myRxData, 32);
 8001c0e:	4c0c      	ldr	r4, [pc, #48]	; (8001c40 <NRF_task+0x38>)
			NRF24_writeAckPayload(1, myAckPayload, 32);
 8001c10:	4d0c      	ldr	r5, [pc, #48]	; (8001c44 <NRF_task+0x3c>)
		if(NRF24_available())
 8001c12:	f7ff fbb5 	bl	8001380 <NRF24_available>
 8001c16:	b170      	cbz	r0, 8001c36 <NRF_task+0x2e>
			NRF24_read(myRxData, 32);
 8001c18:	2120      	movs	r1, #32
 8001c1a:	4809      	ldr	r0, [pc, #36]	; (8001c40 <NRF_task+0x38>)
 8001c1c:	f7ff fb1c 	bl	8001258 <NRF24_read>
			NRF24_writeAckPayload(1, myAckPayload, 32);
 8001c20:	2220      	movs	r2, #32
 8001c22:	4629      	mov	r1, r5
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7ff fbae 	bl	8001386 <NRF24_writeAckPayload>
			myRxData[32] = '\r'; myRxData[32+1] = '\n';
 8001c2a:	230d      	movs	r3, #13
 8001c2c:	f884 3020 	strb.w	r3, [r4, #32]
 8001c30:	230a      	movs	r3, #10
 8001c32:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		}

		vTaskDelay(300);
 8001c36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c3a:	f004 fe17 	bl	800686c <vTaskDelay>
	{
 8001c3e:	e7e8      	b.n	8001c12 <NRF_task+0xa>
 8001c40:	20000130 	.word	0x20000130
 8001c44:	20000010 	.word	0x20000010

08001c48 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f003 ff64 	bl	8005b18 <osDelay>
	for(;;)
 8001c50:	e7fb      	b.n	8001c4a <StartDefaultTask+0x2>
	...

08001c54 <HAL_GPIO_EXTI_Callback>:
	counter++;
 8001c54:	4a02      	ldr	r2, [pc, #8]	; (8001c60 <HAL_GPIO_EXTI_Callback+0xc>)
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000118 	.word	0x20000118

08001c64 <SystemClock_Config>:
{
 8001c64:	b510      	push	{r4, lr}
 8001c66:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c68:	2214      	movs	r2, #20
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	a80c      	add	r0, sp, #48	; 0x30
 8001c6e:	f005 fc57 	bl	8007520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c72:	2214      	movs	r2, #20
 8001c74:	2100      	movs	r1, #0
 8001c76:	eb0d 0002 	add.w	r0, sp, r2
 8001c7a:	f005 fc51 	bl	8007520 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c7e:	2210      	movs	r2, #16
 8001c80:	2100      	movs	r1, #0
 8001c82:	a801      	add	r0, sp, #4
 8001c84:	f005 fc4c 	bl	8007520 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c88:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c90:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c9e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ca0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca2:	f002 facb 	bl	800423c <HAL_RCC_OscConfig>
 8001ca6:	b108      	cbz	r0, 8001cac <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001caa:	e7fe      	b.n	8001caa <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cac:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cae:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb6:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb8:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	a805      	add	r0, sp, #20
 8001cc0:	f002 fc7e 	bl	80045c0 <HAL_RCC_ClockConfig>
 8001cc4:	b108      	cbz	r0, 8001cca <SystemClock_Config+0x66>
 8001cc6:	b672      	cpsid	i
	while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cce:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cd0:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cd2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f002 fd4e 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 8001cd8:	b108      	cbz	r0, 8001cde <SystemClock_Config+0x7a>
 8001cda:	b672      	cpsid	i
	while (1)
 8001cdc:	e7fe      	b.n	8001cdc <SystemClock_Config+0x78>
}
 8001cde:	b014      	add	sp, #80	; 0x50
 8001ce0:	bd10      	pop	{r4, pc}
	...

08001ce4 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	2610      	movs	r6, #16
{
 8001ce6:	b580      	push	{r7, lr}
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	f04f 0900 	mov.w	r9, #0
{
 8001cec:	b092      	sub	sp, #72	; 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	4cb4      	ldr	r4, [pc, #720]	; (8001fc0 <main+0x2dc>)
  HAL_Init();
 8001cf0:	f000 ff78 	bl	8002be4 <HAL_Init>
  SystemClock_Config();
 8001cf4:	f7ff ffb6 	bl	8001c64 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	4632      	mov	r2, r6
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	a808      	add	r0, sp, #32
 8001cfe:	f005 fc0f 	bl	8007520 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, nrf_csn_Pin|nrf_ce_Pin, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d06:	f043 0320 	orr.w	r3, r3, #32
 8001d0a:	61a3      	str	r3, [r4, #24]
 8001d0c:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, nrf_csn_Pin|nrf_ce_Pin, GPIO_PIN_RESET);
 8001d0e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	9303      	str	r3, [sp, #12]
 8001d18:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, nrf_csn_Pin|nrf_ce_Pin, GPIO_PIN_RESET);
 8001d1c:	48a9      	ldr	r0, [pc, #676]	; (8001fc4 <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	61a3      	str	r3, [r4, #24]
 8001d24:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	9304      	str	r3, [sp, #16]
 8001d2e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	61a3      	str	r3, [r4, #24]
 8001d3a:	69a3      	ldr	r3, [r4, #24]
  hcan.Instance = CAN1;
 8001d3c:	f8df a288 	ldr.w	sl, [pc, #648]	; 8001fc8 <main+0x2e4>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	9305      	str	r3, [sp, #20]
 8001d46:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, nrf_csn_Pin|nrf_ce_Pin, GPIO_PIN_RESET);
 8001d48:	f001 fdf2 	bl	8003930 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	4b9f      	ldr	r3, [pc, #636]	; (8001fcc <main+0x2e8>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	48a0      	ldr	r0, [pc, #640]	; (8001fd0 <main+0x2ec>)
 8001d50:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d56:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f001 fd10 	bl	800377c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	4898      	ldr	r0, [pc, #608]	; (8001fc4 <main+0x2e0>)
 8001d62:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f001 fd05 	bl	800377c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001d72:	464a      	mov	r2, r9
 8001d74:	2105      	movs	r1, #5
 8001d76:	200a      	movs	r0, #10
 8001d78:	f001 fbbc 	bl	80034f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d7c:	200a      	movs	r0, #10
 8001d7e:	f001 fbe9 	bl	8003554 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d82:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001d84:	464a      	mov	r2, r9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d86:	432b      	orrs	r3, r5
 8001d88:	6163      	str	r3, [r4, #20]
 8001d8a:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001d8c:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d8e:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001d90:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001d96:	f001 fbad 	bl	80034f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d9a:	200b      	movs	r0, #11
 8001d9c:	f001 fbda 	bl	8003554 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001da0:	464a      	mov	r2, r9
 8001da2:	2105      	movs	r1, #5
 8001da4:	200f      	movs	r0, #15
 8001da6:	f001 fba5 	bl	80034f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001daa:	200f      	movs	r0, #15
 8001dac:	f001 fbd2 	bl	8003554 <HAL_NVIC_EnableIRQ>
  hcan.Instance = CAN1;
 8001db0:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <main+0x2f0>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001db2:	f44f 2860 	mov.w	r8, #917504	; 0xe0000
  hcan.Init.Prescaler = 16;
 8001db6:	e9ca 3600 	strd	r3, r6, [sl]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001dba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001dbe:	4650      	mov	r0, sl
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001dc0:	f8ca 9018 	str.w	r9, [sl, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001dc4:	f8aa 901c 	strh.w	r9, [sl, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001dc8:	e9ca 9902 	strd	r9, r9, [sl, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001dcc:	e9ca 8304 	strd	r8, r3, [sl, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001dd0:	f001 f966 	bl	80030a0 <HAL_CAN_Init>
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	b108      	cbz	r0, 8001ddc <main+0xf8>
 8001dd8:	b672      	cpsid	i
	while (1)
 8001dda:	e7fe      	b.n	8001dda <main+0xf6>
	canfilterconfig.FilterIdHigh = 0x103<<5;
 8001ddc:	f242 0360 	movw	r3, #8288	; 0x2060
	canfilterconfig.FilterBank = 10;
 8001de0:	f04f 090a 	mov.w	r9, #10
	canfilterconfig.FilterIdLow = 0x0000;
 8001de4:	e9cd 3008 	strd	r3, r0, [sp, #32]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001de8:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001dec:	a908      	add	r1, sp, #32
 8001dee:	4650      	mov	r0, sl
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001df0:	e9cd 590c 	strd	r5, r9, [sp, #48]	; 0x30
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001df4:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001df8:	9510      	str	r5, [sp, #64]	; 0x40
	canfilterconfig.SlaveStartFilterBank = 10;
 8001dfa:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001dfe:	f001 f9ca 	bl	8003196 <HAL_CAN_ConfigFilter>
  hi2c1.Instance = I2C1;
 8001e02:	4875      	ldr	r0, [pc, #468]	; (8001fd8 <main+0x2f4>)
  hi2c1.Init.ClockSpeed = 400000;
 8001e04:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8001fdc <main+0x2f8>
 8001e08:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <main+0x2fc>)
  hi2c1.Init.OwnAddress1 = 0;
 8001e0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8001e0e:	e9c0 c300 	strd	ip, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e16:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e1a:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1e:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e20:	f001 ff96 	bl	8003d50 <HAL_I2C_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b108      	cbz	r0, 8001e2c <main+0x148>
 8001e28:	b672      	cpsid	i
	while (1)
 8001e2a:	e7fe      	b.n	8001e2a <main+0x146>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 8001e30:	486c      	ldr	r0, [pc, #432]	; (8001fe4 <main+0x300>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e32:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8001fe8 <main+0x304>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e36:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e3a:	e9c0 a200 	strd	sl, r2, [r0]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e3e:	2220      	movs	r2, #32
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e40:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e44:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e48:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 10;
 8001e4c:	e9c0 390a 	strd	r3, r9, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e50:	e9c0 1206 	strd	r1, r2, [r0, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e54:	f002 fd93 	bl	800497e <HAL_SPI_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b108      	cbz	r0, 8001e60 <main+0x17c>
 8001e5c:	b672      	cpsid	i
	while (1)
 8001e5e:	e7fe      	b.n	8001e5e <main+0x17a>
  huart1.Init.BaudRate = 9600;
 8001e60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Instance = USART1;
 8001e64:	4861      	ldr	r0, [pc, #388]	; (8001fec <main+0x308>)
  huart1.Init.BaudRate = 9600;
 8001e66:	f8df e188 	ldr.w	lr, [pc, #392]	; 8001ff0 <main+0x30c>
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8001e6e:	e9c0 e200 	strd	lr, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e72:	220c      	movs	r2, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e74:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e7c:	f003 fc50 	bl	8005720 <HAL_UART_Init>
 8001e80:	b108      	cbz	r0, 8001e86 <main+0x1a2>
 8001e82:	b672      	cpsid	i
	while (1)
 8001e84:	e7fe      	b.n	8001e84 <main+0x1a0>
  hadc1.Instance = ADC1;
 8001e86:	4c5b      	ldr	r4, [pc, #364]	; (8001ff4 <main+0x310>)
 8001e88:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <main+0x314>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e8a:	e9cd 0008 	strd	r0, r0, [sp, #32]
  hadc1.Instance = ADC1;
 8001e8e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e90:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e94:	900a      	str	r0, [sp, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e96:	7520      	strb	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e98:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e9a:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e9c:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e9e:	7325      	strb	r5, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ea0:	f8c4 801c 	str.w	r8, [r4, #28]
  hadc1.Init.NbrOfConversion = 2;
 8001ea4:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ea6:	f001 f87d 	bl	8002fa4 <HAL_ADC_Init>
 8001eaa:	b108      	cbz	r0, 8001eb0 <main+0x1cc>
 8001eac:	b672      	cpsid	i
	while (1)
 8001eae:	e7fe      	b.n	8001eae <main+0x1ca>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001eb0:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eb6:	e9cd 6508 	strd	r6, r5, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001eba:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ebc:	f000 ff04 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 8001ec0:	b108      	cbz	r0, 8001ec6 <main+0x1e2>
 8001ec2:	b672      	cpsid	i
	while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <main+0x1e0>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001ec6:	2307      	movs	r3, #7
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ec8:	e9cd 0708 	strd	r0, r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ecc:	a908      	add	r1, sp, #32
 8001ece:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001ed0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed2:	f000 fef9 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	b108      	cbz	r0, 8001ede <main+0x1fa>
 8001eda:	b672      	cpsid	i
	while (1)
 8001edc:	e7fe      	b.n	8001edc <main+0x1f8>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ede:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee0:	e9cd 0006 	strd	r0, r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee4:	221c      	movs	r2, #28
 8001ee6:	a808      	add	r0, sp, #32
 8001ee8:	f005 fb1a 	bl	8007520 <memset>
  htim3.Init.Prescaler = 72;
 8001eec:	2348      	movs	r3, #72	; 0x48
  htim3.Instance = TIM3;
 8001eee:	4d43      	ldr	r5, [pc, #268]	; (8001ffc <main+0x318>)
  htim3.Init.Prescaler = 72;
 8001ef0:	4843      	ldr	r0, [pc, #268]	; (8002000 <main+0x31c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	60ac      	str	r4, [r5, #8]
  htim3.Init.Prescaler = 72;
 8001ef4:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 20000;
 8001ef8:	f644 6320 	movw	r3, #20000	; 0x4e20
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001efc:	4628      	mov	r0, r5
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f02:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f04:	f003 f98a 	bl	800521c <HAL_TIM_PWM_Init>
 8001f08:	b108      	cbz	r0, 8001f0e <main+0x22a>
 8001f0a:	b672      	cpsid	i
	while (1)
 8001f0c:	e7fe      	b.n	8001f0c <main+0x228>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f12:	a906      	add	r1, sp, #24
 8001f14:	4628      	mov	r0, r5
 8001f16:	f003 fb35 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	b108      	cbz	r0, 8001f22 <main+0x23e>
 8001f1e:	b672      	cpsid	i
	while (1)
 8001f20:	e7fe      	b.n	8001f20 <main+0x23c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f22:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f24:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 8001f26:	e9cd 3008 	strd	r3, r0, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2a:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2c:	a908      	add	r1, sp, #32
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f003 f9cc 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 8001f34:	b108      	cbz	r0, 8001f3a <main+0x256>
 8001f36:	b672      	cpsid	i
	while (1)
 8001f38:	e7fe      	b.n	8001f38 <main+0x254>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	482f      	ldr	r0, [pc, #188]	; (8001ffc <main+0x318>)
 8001f3e:	a908      	add	r1, sp, #32
 8001f40:	f003 f9c4 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 8001f44:	4604      	mov	r4, r0
 8001f46:	b108      	cbz	r0, 8001f4c <main+0x268>
 8001f48:	b672      	cpsid	i
	while (1)
 8001f4a:	e7fe      	b.n	8001f4a <main+0x266>
  HAL_TIM_MspPostInit(&htim3);
 8001f4c:	482b      	ldr	r0, [pc, #172]	; (8001ffc <main+0x318>)
 8001f4e:	f000 fcf1 	bl	8002934 <HAL_TIM_MspPostInit>
  huart2.Init.BaudRate = 115200;
 8001f52:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001f56:	482b      	ldr	r0, [pc, #172]	; (8002004 <main+0x320>)
  huart2.Init.BaudRate = 115200;
 8001f58:	492b      	ldr	r1, [pc, #172]	; (8002008 <main+0x324>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001f5e:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f62:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f64:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6c:	f003 fbd8 	bl	8005720 <HAL_UART_Init>
 8001f70:	4604      	mov	r4, r0
 8001f72:	b108      	cbz	r0, 8001f78 <main+0x294>
 8001f74:	b672      	cpsid	i
	while (1)
 8001f76:	e7fe      	b.n	8001f76 <main+0x292>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f78:	2210      	movs	r2, #16
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	a808      	add	r0, sp, #32
 8001f7e:	f005 facf 	bl	8007520 <memset>
  htim2.Init.Prescaler = 7200-1;
 8001f82:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001f8a:	4e20      	ldr	r6, [pc, #128]	; (800200c <main+0x328>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.Prescaler = 7200-1;
 8001f90:	e9c6 2300 	strd	r2, r3, [r6]
  htim2.Init.Period = 10000;
 8001f94:	f242 7310 	movw	r3, #10000	; 0x2710
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f98:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa2:	f003 f90f 	bl	80051c4 <HAL_TIM_Base_Init>
 8001fa6:	b108      	cbz	r0, 8001fac <main+0x2c8>
 8001fa8:	b672      	cpsid	i
	while (1)
 8001faa:	e7fe      	b.n	8001faa <main+0x2c6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb4:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb6:	f003 f9ec 	bl	8005392 <HAL_TIM_ConfigClockSource>
 8001fba:	b348      	cbz	r0, 8002010 <main+0x32c>
 8001fbc:	b672      	cpsid	i
	while (1)
 8001fbe:	e7fe      	b.n	8001fbe <main+0x2da>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010c00 	.word	0x40010c00
 8001fc8:	20000260 	.word	0x20000260
 8001fcc:	10110000 	.word	0x10110000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40006400 	.word	0x40006400
 8001fd8:	20000310 	.word	0x20000310
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	00061a80 	.word	0x00061a80
 8001fe4:	20000364 	.word	0x20000364
 8001fe8:	40003800 	.word	0x40003800
 8001fec:	2000044c 	.word	0x2000044c
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	20000230 	.word	0x20000230
 8001ff8:	40012400 	.word	0x40012400
 8001ffc:	20000404 	.word	0x20000404
 8002000:	40000400 	.word	0x40000400
 8002004:	20000494 	.word	0x20000494
 8002008:	40004400 	.word	0x40004400
 800200c:	200003bc 	.word	0x200003bc
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002010:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002014:	a906      	add	r1, sp, #24
 8002016:	4630      	mov	r0, r6
 8002018:	f003 fab4 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4604      	mov	r4, r0
 800201e:	b108      	cbz	r0, 8002024 <main+0x340>
 8002020:	b672      	cpsid	i
	while (1)
 8002022:	e7fe      	b.n	8002022 <main+0x33e>
	HAL_TIM_Base_Start_IT(&htim2);
 8002024:	4630      	mov	r0, r6
 8002026:	f002 ffc5 	bl	8004fb4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, rx_databuffer, (uint16_t) bufsize);
 800202a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800202e:	492b      	ldr	r1, [pc, #172]	; (80020dc <main+0x3f8>)
 8002030:	482b      	ldr	r0, [pc, #172]	; (80020e0 <main+0x3fc>)
 8002032:	f003 fcc7 	bl	80059c4 <HAL_UART_Receive_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc, 2);
 8002036:	2202      	movs	r2, #2
 8002038:	492a      	ldr	r1, [pc, #168]	; (80020e4 <main+0x400>)
 800203a:	482b      	ldr	r0, [pc, #172]	; (80020e8 <main+0x404>)
 800203c:	f000 fefe 	bl	8002e3c <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&SERVO_TIMER, TIM_CHANNEL_2);
 8002040:	2104      	movs	r1, #4
 8002042:	482a      	ldr	r0, [pc, #168]	; (80020ec <main+0x408>)
 8002044:	f003 fa9c 	bl	8005580 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&SERVO_TIMER, TIM_CHANNEL_2, 5000);
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	682b      	ldr	r3, [r5, #0]
	HAL_Delay(1000);
 800204e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	__HAL_TIM_SET_COMPARE(&SERVO_TIMER, TIM_CHANNEL_2, 5000);
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8002054:	f000 fdea 	bl	8002c2c <HAL_Delay>
  osKernelInitialize();
 8002058:	f003 fcc6 	bl	80059e8 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800205c:	4621      	mov	r1, r4
 800205e:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <main+0x40c>)
 8002060:	4824      	ldr	r0, [pc, #144]	; (80020f4 <main+0x410>)
 8002062:	f003 fcfd 	bl	8005a60 <osThreadNew>
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <main+0x414>)
	xTaskCreate(gps_task, "gps task", 80, NULL, 6, NULL);
 8002068:	2250      	movs	r2, #80	; 0x50
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800206a:	6018      	str	r0, [r3, #0]
	xTaskCreate(gps_task, "gps task", 80, NULL, 6, NULL);
 800206c:	2306      	movs	r3, #6
 800206e:	4923      	ldr	r1, [pc, #140]	; (80020fc <main+0x418>)
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	4823      	ldr	r0, [pc, #140]	; (8002100 <main+0x41c>)
 8002074:	4623      	mov	r3, r4
 8002076:	9401      	str	r4, [sp, #4]
 8002078:	f004 fa69 	bl	800654e <xTaskCreate>
	xTaskCreate(Battery_Temperature_task,"battery and temp task", 80, NULL, 3, NULL);
 800207c:	2303      	movs	r3, #3
 800207e:	2250      	movs	r2, #80	; 0x50
 8002080:	4920      	ldr	r1, [pc, #128]	; (8002104 <main+0x420>)
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4820      	ldr	r0, [pc, #128]	; (8002108 <main+0x424>)
 8002086:	4623      	mov	r3, r4
 8002088:	9401      	str	r4, [sp, #4]
 800208a:	f004 fa60 	bl	800654e <xTaskCreate>
	xTaskCreate(compass_task, "compass task", 80, NULL, 4, NULL);
 800208e:	2304      	movs	r3, #4
 8002090:	2250      	movs	r2, #80	; 0x50
 8002092:	491e      	ldr	r1, [pc, #120]	; (800210c <main+0x428>)
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	481e      	ldr	r0, [pc, #120]	; (8002110 <main+0x42c>)
 8002098:	4623      	mov	r3, r4
 800209a:	9401      	str	r4, [sp, #4]
 800209c:	f004 fa57 	bl	800654e <xTaskCreate>
	xTaskCreate(CAN_task, "can task", 80, NULL, 7, NULL);
 80020a0:	2307      	movs	r3, #7
 80020a2:	2250      	movs	r2, #80	; 0x50
 80020a4:	491b      	ldr	r1, [pc, #108]	; (8002114 <main+0x430>)
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	481b      	ldr	r0, [pc, #108]	; (8002118 <main+0x434>)
 80020aa:	4623      	mov	r3, r4
 80020ac:	9401      	str	r4, [sp, #4]
 80020ae:	f004 fa4e 	bl	800654e <xTaskCreate>
	xTaskCreate(STEERING_task, "steering task", 80, NULL, 2, NULL);
 80020b2:	2302      	movs	r3, #2
 80020b4:	2250      	movs	r2, #80	; 0x50
 80020b6:	4919      	ldr	r1, [pc, #100]	; (800211c <main+0x438>)
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	4819      	ldr	r0, [pc, #100]	; (8002120 <main+0x43c>)
 80020bc:	4623      	mov	r3, r4
 80020be:	9401      	str	r4, [sp, #4]
 80020c0:	f004 fa45 	bl	800654e <xTaskCreate>
	xTaskCreate(NRF_task, "nrf task", 200, NULL, 11, NULL);
 80020c4:	230b      	movs	r3, #11
 80020c6:	22c8      	movs	r2, #200	; 0xc8
 80020c8:	4916      	ldr	r1, [pc, #88]	; (8002124 <main+0x440>)
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4816      	ldr	r0, [pc, #88]	; (8002128 <main+0x444>)
 80020ce:	4623      	mov	r3, r4
 80020d0:	9401      	str	r4, [sp, #4]
 80020d2:	f004 fa3c 	bl	800654e <xTaskCreate>
  osKernelStart();
 80020d6:	f003 fca3 	bl	8005a20 <osKernelStart>
	while (1)
 80020da:	e7fe      	b.n	80020da <main+0x3f6>
 80020dc:	20000580 	.word	0x20000580
 80020e0:	2000044c 	.word	0x2000044c
 80020e4:	20000218 	.word	0x20000218
 80020e8:	20000230 	.word	0x20000230
 80020ec:	20000404 	.word	0x20000404
 80020f0:	0800966c 	.word	0x0800966c
 80020f4:	08001c49 	.word	0x08001c49
 80020f8:	2000022c 	.word	0x2000022c
 80020fc:	08009613 	.word	0x08009613
 8002100:	08001b5d 	.word	0x08001b5d
 8002104:	0800961c 	.word	0x0800961c
 8002108:	08001b91 	.word	0x08001b91
 800210c:	08009632 	.word	0x08009632
 8002110:	08001bb9 	.word	0x08001bb9
 8002114:	0800963f 	.word	0x0800963f
 8002118:	08001bcd 	.word	0x08001bcd
 800211c:	08009648 	.word	0x08009648
 8002120:	08001bf5 	.word	0x08001bf5
 8002124:	08009656 	.word	0x08009656
 8002128:	08001c09 	.word	0x08001c09

0800212c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 800212c:	6802      	ldr	r2, [r0, #0]
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x34>)
{
 8002130:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8002132:	429a      	cmp	r2, r3
{
 8002134:	4604      	mov	r4, r0
  if (htim->Instance == TIM1) {
 8002136:	d101      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8002138:	f000 fd66 	bl	8002c08 <HAL_IncTick>
	if(htim->Instance == TIM2)
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002142:	d10c      	bne.n	800215e <HAL_TIM_PeriodElapsedCallback+0x32>
		speed = counter/15;
 8002144:	220f      	movs	r2, #15
 8002146:	4907      	ldr	r1, [pc, #28]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x38>)
		range += counter/15;
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x3c>)
		speed = counter/15;
 800214a:	680b      	ldr	r3, [r1, #0]
 800214c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002150:	4a06      	ldr	r2, [pc, #24]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002152:	6013      	str	r3, [r2, #0]
		range += counter/15;
 8002154:	6802      	ldr	r2, [r0, #0]
 8002156:	441a      	add	r2, r3
		counter=0;
 8002158:	2300      	movs	r3, #0
		range += counter/15;
 800215a:	6002      	str	r2, [r0, #0]
		counter=0;
 800215c:	600b      	str	r3, [r1, #0]
}
 800215e:	bd10      	pop	{r4, pc}
 8002160:	40012c00 	.word	0x40012c00
 8002164:	20000118 	.word	0x20000118
 8002168:	20000120 	.word	0x20000120
 800216c:	20000124 	.word	0x20000124

08002170 <Error_Handler>:
 8002170:	b672      	cpsid	i
	while (1)
 8002172:	e7fe      	b.n	8002172 <Error_Handler+0x2>

08002174 <decodeGGA>:
uint8_t rx_databuffer[bufsize];
GPSSTRUCT gpsdata;


int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	inx = 0;
	char buffer[12];
	int i = 0;
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8002178:	2300      	movs	r3, #0
{
 800217a:	4605      	mov	r5, r0
 800217c:	468a      	mov	sl, r1
	inx = 0;
 800217e:	4cad      	ldr	r4, [pc, #692]	; (8002434 <decodeGGA+0x2c0>)
{
 8002180:	b087      	sub	sp, #28
	inx = 0;
 8002182:	6023      	str	r3, [r4, #0]
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8002184:	5cea      	ldrb	r2, [r5, r3]
 8002186:	3301      	adds	r3, #1
 8002188:	2a2c      	cmp	r2, #44	; 0x2c
 800218a:	d1fa      	bne.n	8002182 <decodeGGA+0xe>
	inx++;
 800218c:	6023      	str	r3, [r4, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 800218e:	5cea      	ldrb	r2, [r5, r3]
 8002190:	3301      	adds	r3, #1
 8002192:	2a2c      	cmp	r2, #44	; 0x2c
 8002194:	d1fa      	bne.n	800218c <decodeGGA+0x18>
	inx++;
 8002196:	6023      	str	r3, [r4, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8002198:	5cea      	ldrb	r2, [r5, r3]
 800219a:	3301      	adds	r3, #1
 800219c:	2a2c      	cmp	r2, #44	; 0x2c
 800219e:	d1fa      	bne.n	8002196 <decodeGGA+0x22>
	inx++;
 80021a0:	6023      	str	r3, [r4, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 80021a2:	5cea      	ldrb	r2, [r5, r3]
 80021a4:	3301      	adds	r3, #1
 80021a6:	2a2c      	cmp	r2, #44	; 0x2c
 80021a8:	d1fa      	bne.n	80021a0 <decodeGGA+0x2c>
	inx++;
 80021aa:	6023      	str	r3, [r4, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 80021ac:	5cea      	ldrb	r2, [r5, r3]
 80021ae:	3301      	adds	r3, #1
 80021b0:	2a2c      	cmp	r2, #44	; 0x2c
 80021b2:	d1fa      	bne.n	80021aa <decodeGGA+0x36>
	inx++;
 80021b4:	6023      	str	r3, [r4, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 80021b6:	5cea      	ldrb	r2, [r5, r3]
 80021b8:	3301      	adds	r3, #1
 80021ba:	2a2c      	cmp	r2, #44	; 0x2c
 80021bc:	d1fa      	bne.n	80021b4 <decodeGGA+0x40>
	inx++;
 80021be:	6023      	str	r3, [r4, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 80021c0:	5ceb      	ldrb	r3, [r5, r3]
 80021c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80021c6:	2a01      	cmp	r2, #1
 80021c8:	d902      	bls.n	80021d0 <decodeGGA+0x5c>
 80021ca:	2b36      	cmp	r3, #54	; 0x36
 80021cc:	f040 8178 	bne.w	80024c0 <decodeGGA+0x34c>
	{
		gga->isValid = 1;   // fix available
 80021d0:	2301      	movs	r3, #1
 80021d2:	f8ca 301c 	str.w	r3, [sl, #28]
	else
	{
		gga->isValid = 0;   // If the fix is not available
		return 1;
	}
	while (GGAbuffer[inx] != ',') inx++;
 80021d6:	2300      	movs	r3, #0
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 80021d8:	6023      	str	r3, [r4, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80021da:	5cea      	ldrb	r2, [r5, r3]
 80021dc:	3301      	adds	r3, #1
 80021de:	2a2c      	cmp	r2, #44	; 0x2c
 80021e0:	d1fa      	bne.n	80021d8 <decodeGGA+0x64>
	inx++;
 80021e2:	6023      	str	r3, [r4, #0]
	memset(buffer,'\0',12);
 80021e4:	2300      	movs	r3, #0
 80021e6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80021ea:	9305      	str	r3, [sp, #20]
	i=0;
	while (GGAbuffer[inx] != ',')
 80021ec:	ab03      	add	r3, sp, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	5cea      	ldrb	r2, [r5, r3]
 80021f6:	2a2c      	cmp	r2, #44	; 0x2c
 80021f8:	f040 8169 	bne.w	80024ce <decodeGGA+0x35a>
	{
		buffer[i] = GGAbuffer[inx];
		i++;
		inx++;
	}
	hr = (atoi(buffer)/10000) + GMT/100;
 80021fc:	a803      	add	r0, sp, #12
 80021fe:	f005 f8e3 	bl	80073c8 <atoi>
 8002202:	2764      	movs	r7, #100	; 0x64
 8002204:	f242 7210 	movw	r2, #10000	; 0x2710
 8002208:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8002438 <decodeGGA+0x2c4>
 800220c:	fb90 f0f2 	sdiv	r0, r0, r2
 8002210:	f8d8 3000 	ldr.w	r3, [r8]
 8002214:	4e89      	ldr	r6, [pc, #548]	; (800243c <decodeGGA+0x2c8>)
 8002216:	fb93 f3f7 	sdiv	r3, r3, r7
 800221a:	4403      	add	r3, r0
	min = ((atoi(buffer)/100)%100) + GMT%100;
 800221c:	a803      	add	r0, sp, #12
	hr = (atoi(buffer)/10000) + GMT/100;
 800221e:	6033      	str	r3, [r6, #0]
	min = ((atoi(buffer)/100)%100) + GMT%100;
 8002220:	f005 f8d2 	bl	80073c8 <atoi>
 8002224:	fb90 f0f7 	sdiv	r0, r0, r7
 8002228:	fb90 f3f7 	sdiv	r3, r0, r7
 800222c:	fb07 0013 	mls	r0, r7, r3, r0
 8002230:	f8d8 3000 	ldr.w	r3, [r8]
 8002234:	fb93 f2f7 	sdiv	r2, r3, r7
 8002238:	fb07 3312 	mls	r3, r7, r2, r3
 800223c:	4418      	add	r0, r3

	if (min>59)
 800223e:	283b      	cmp	r0, #59	; 0x3b
	{
		min = min-60;
		hr++;
 8002240:	bfc8      	it	gt
 8002242:	6833      	ldrgt	r3, [r6, #0]
 8002244:	4a7e      	ldr	r2, [pc, #504]	; (8002440 <decodeGGA+0x2cc>)
 8002246:	bfc4      	itt	gt
 8002248:	3301      	addgt	r3, #1
 800224a:	6033      	strgt	r3, [r6, #0]
	}
	if (hr<0)
 800224c:	6833      	ldr	r3, [r6, #0]
		min = min-60;
 800224e:	bfca      	itet	gt
 8002250:	383c      	subgt	r0, #60	; 0x3c
	min = ((atoi(buffer)/100)%100) + GMT%100;
 8002252:	6010      	strle	r0, [r2, #0]
		min = min-60;
 8002254:	6010      	strgt	r0, [r2, #0]
	if (hr<0)
 8002256:	2b00      	cmp	r3, #0
 8002258:	da05      	bge.n	8002266 <decodeGGA+0xf2>
	{
		hr =24+hr;
		daychange--;
 800225a:	497a      	ldr	r1, [pc, #488]	; (8002444 <decodeGGA+0x2d0>)
		hr =24+hr;
 800225c:	3318      	adds	r3, #24
 800225e:	6033      	str	r3, [r6, #0]
		daychange--;
 8002260:	680b      	ldr	r3, [r1, #0]
 8002262:	3b01      	subs	r3, #1
 8002264:	600b      	str	r3, [r1, #0]
	}
	if (hr>24)
 8002266:	6833      	ldr	r3, [r6, #0]
 8002268:	2b18      	cmp	r3, #24
 800226a:	dd05      	ble.n	8002278 <decodeGGA+0x104>
	{
		hr =hr-24;
		daychange++;
 800226c:	4975      	ldr	r1, [pc, #468]	; (8002444 <decodeGGA+0x2d0>)
		hr =hr-24;
 800226e:	3b18      	subs	r3, #24
 8002270:	6033      	str	r3, [r6, #0]
		daychange++;
 8002272:	680b      	ldr	r3, [r1, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	600b      	str	r3, [r1, #0]
	}
	gga->tim.hour = hr;
 8002278:	6833      	ldr	r3, [r6, #0]
	gga->tim.min = min;
	gga->tim.sec = atoi(buffer)%100;
 800227a:	a803      	add	r0, sp, #12
	gga->tim.hour = hr;
 800227c:	f8ca 3010 	str.w	r3, [sl, #16]
	gga->tim.min = min;
 8002280:	6813      	ldr	r3, [r2, #0]
 8002282:	f8ca 3014 	str.w	r3, [sl, #20]
	gga->tim.sec = atoi(buffer)%100;
 8002286:	f005 f89f 	bl	80073c8 <atoi>
 800228a:	2364      	movs	r3, #100	; 0x64
 800228c:	fb90 f2f3 	sdiv	r2, r0, r3
 8002290:	fb02 0013 	mls	r0, r2, r3, r0

	//get latitude
	inx++;
 8002294:	6823      	ldr	r3, [r4, #0]
	gga->tim.sec = atoi(buffer)%100;
 8002296:	f8ca 0018 	str.w	r0, [sl, #24]
	inx++;
 800229a:	3301      	adds	r3, #1
 800229c:	6023      	str	r3, [r4, #0]
	memset(buffer,'\0',12);
 800229e:	2300      	movs	r3, #0
 80022a0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80022a4:	9305      	str	r3, [sp, #20]
	i=0;
	while (GGAbuffer[inx] != ',')
 80022a6:	a903      	add	r1, sp, #12
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	5cea      	ldrb	r2, [r5, r3]
 80022ac:	2a2c      	cmp	r2, #44	; 0x2c
 80022ae:	f040 8113 	bne.w	80024d8 <decodeGGA+0x364>
	{
		buffer[i] = GGAbuffer[inx];
		i++;
		inx++;
	}
	if (strlen(buffer) <6) return 2;
 80022b2:	a803      	add	r0, sp, #12
 80022b4:	f7fd ff4c 	bl	8000150 <strlen>
 80022b8:	2805      	cmp	r0, #5
 80022ba:	f240 8121 	bls.w	8002500 <decodeGGA+0x38c>
	int16_t num = (atoi(buffer));
 80022be:	a803      	add	r0, sp, #12
 80022c0:	f005 f882 	bl	80073c8 <atoi>
	int j = 0;
 80022c4:	f04f 0800 	mov.w	r8, #0
	int16_t num = (atoi(buffer));
 80022c8:	b206      	sxth	r6, r0
	while (buffer[j] != '.') j++;
 80022ca:	ab03      	add	r3, sp, #12
 80022cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022d0:	f108 0801 	add.w	r8, r8, #1
 80022d4:	2a2e      	cmp	r2, #46	; 0x2e
 80022d6:	d1f9      	bne.n	80022cc <decodeGGA+0x158>
	j++;
	int declen = (strlen(buffer))-j;
 80022d8:	a803      	add	r0, sp, #12
 80022da:	f7fd ff39 	bl	8000150 <strlen>
	int dec = atoi ((char*) buffer+j);
 80022de:	ab03      	add	r3, sp, #12
	int declen = (strlen(buffer))-j;
 80022e0:	4607      	mov	r7, r0
	int dec = atoi ((char*) buffer+j);
 80022e2:	eb03 0008 	add.w	r0, r3, r8
 80022e6:	f005 f86f 	bl	80073c8 <atoi>
 80022ea:	4683      	mov	fp, r0
	int declen = (strlen(buffer))-j;
 80022ec:	eba7 0008 	sub.w	r0, r7, r8
	float lat = (num / 100.0) + (dec/pow(10, (declen+2)));
 80022f0:	3002      	adds	r0, #2
 80022f2:	f7fe f887 	bl	8000404 <__aeabi_i2d>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	2000      	movs	r0, #0
 80022fc:	4952      	ldr	r1, [pc, #328]	; (8002448 <decodeGGA+0x2d4>)
 80022fe:	f005 fe01 	bl	8007f04 <pow>
 8002302:	4680      	mov	r8, r0
 8002304:	4630      	mov	r0, r6
 8002306:	4689      	mov	r9, r1
 8002308:	f7fe f87c 	bl	8000404 <__aeabi_i2d>
 800230c:	2200      	movs	r2, #0
 800230e:	4b4f      	ldr	r3, [pc, #316]	; (800244c <decodeGGA+0x2d8>)
 8002310:	f7fe fa0c 	bl	800072c <__aeabi_ddiv>
 8002314:	4606      	mov	r6, r0
 8002316:	4658      	mov	r0, fp
 8002318:	460f      	mov	r7, r1
 800231a:	f7fe f873 	bl	8000404 <__aeabi_i2d>
 800231e:	4642      	mov	r2, r8
 8002320:	464b      	mov	r3, r9
 8002322:	f7fe fa03 	bl	800072c <__aeabi_ddiv>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4630      	mov	r0, r6
 800232c:	4639      	mov	r1, r7
 800232e:	f7fd ff1d 	bl	800016c <__adddf3>
 8002332:	f7fe fbc9 	bl	8000ac8 <__aeabi_d2f>
	gga->lcation.latitude =lat;
	inx++;
 8002336:	6823      	ldr	r3, [r4, #0]
	float lat = (num / 100.0) + (dec/pow(10, (declen+2)));
 8002338:	f8ca 0000 	str.w	r0, [sl]
	inx++;
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	6022      	str	r2, [r4, #0]
	gga->lcation.ns = GGAbuffer[inx];


	//get longitude
	inx++;
	inx++;
 8002340:	3303      	adds	r3, #3
	gga->lcation.ns = GGAbuffer[inx];
 8002342:	5caa      	ldrb	r2, [r5, r2]
	inx++;
 8002344:	6023      	str	r3, [r4, #0]
	memset(buffer,'\0',12);
 8002346:	2300      	movs	r3, #0
 8002348:	e9cd 3303 	strd	r3, r3, [sp, #12]
	gga->lcation.ns = GGAbuffer[inx];
 800234c:	f88a 2004 	strb.w	r2, [sl, #4]
	memset(buffer,'\0',12);
 8002350:	9305      	str	r3, [sp, #20]
	i=0;
	while (GGAbuffer[inx] != ',')
 8002352:	a903      	add	r1, sp, #12
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	5cea      	ldrb	r2, [r5, r3]
 8002358:	2a2c      	cmp	r2, #44	; 0x2c
 800235a:	f040 80c2 	bne.w	80024e2 <decodeGGA+0x36e>
	{
		buffer[i] = GGAbuffer[inx];
		i++;
		inx++;
	}
	num = (atoi(buffer));
 800235e:	a803      	add	r0, sp, #12
 8002360:	f005 f832 	bl	80073c8 <atoi>
	j = 0;
 8002364:	2700      	movs	r7, #0
	num = (atoi(buffer));
 8002366:	fa0f f880 	sxth.w	r8, r0
	while (buffer[j] != '.') j++;
 800236a:	ab03      	add	r3, sp, #12
 800236c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002370:	3701      	adds	r7, #1
 8002372:	2a2e      	cmp	r2, #46	; 0x2e
 8002374:	d1fa      	bne.n	800236c <decodeGGA+0x1f8>
	j++;
	declen = (strlen(buffer))-j;
 8002376:	a803      	add	r0, sp, #12
 8002378:	f7fd feea 	bl	8000150 <strlen>
	dec = atoi ((char*) buffer+j);
 800237c:	ab03      	add	r3, sp, #12
	declen = (strlen(buffer))-j;
 800237e:	4606      	mov	r6, r0
	dec = atoi ((char*) buffer+j);
 8002380:	19d8      	adds	r0, r3, r7
 8002382:	f005 f821 	bl	80073c8 <atoi>
 8002386:	4683      	mov	fp, r0
	declen = (strlen(buffer))-j;
 8002388:	1bf0      	subs	r0, r6, r7
	lat = (num / 100.0) + (dec/pow(10, (declen+2)));
 800238a:	3002      	adds	r0, #2
 800238c:	f7fe f83a 	bl	8000404 <__aeabi_i2d>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	2000      	movs	r0, #0
 8002396:	492c      	ldr	r1, [pc, #176]	; (8002448 <decodeGGA+0x2d4>)
 8002398:	f005 fdb4 	bl	8007f04 <pow>
 800239c:	4606      	mov	r6, r0
 800239e:	4640      	mov	r0, r8
 80023a0:	460f      	mov	r7, r1
 80023a2:	f7fe f82f 	bl	8000404 <__aeabi_i2d>
 80023a6:	2200      	movs	r2, #0
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <decodeGGA+0x2d8>)
 80023aa:	f7fe f9bf 	bl	800072c <__aeabi_ddiv>
 80023ae:	4680      	mov	r8, r0
 80023b0:	4658      	mov	r0, fp
 80023b2:	4689      	mov	r9, r1
 80023b4:	f7fe f826 	bl	8000404 <__aeabi_i2d>
 80023b8:	4632      	mov	r2, r6
 80023ba:	463b      	mov	r3, r7
 80023bc:	f7fe f9b6 	bl	800072c <__aeabi_ddiv>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4640      	mov	r0, r8
 80023c6:	4649      	mov	r1, r9
 80023c8:	f7fd fed0 	bl	800016c <__adddf3>
 80023cc:	f7fe fb7c 	bl	8000ac8 <__aeabi_d2f>
	gga->lcation.longitude =lat;
	inx++;
 80023d0:	6823      	ldr	r3, [r4, #0]
	lat = (num / 100.0) + (dec/pow(10, (declen+2)));
 80023d2:	f8ca 0008 	str.w	r0, [sl, #8]
	inx++;
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	6022      	str	r2, [r4, #0]

	inx++;
	inx++;
	inx++;

	inx++;
 80023da:	3305      	adds	r3, #5
	gga->lcation.ew = GGAbuffer[inx];
 80023dc:	5caa      	ldrb	r2, [r5, r2]
	inx++;
 80023de:	6023      	str	r3, [r4, #0]
	memset(buffer,'\0',12);
 80023e0:	2300      	movs	r3, #0
 80023e2:	e9cd 3303 	strd	r3, r3, [sp, #12]
	gga->lcation.ew = GGAbuffer[inx];
 80023e6:	f88a 200c 	strb.w	r2, [sl, #12]
	memset(buffer,'\0',12);
 80023ea:	9305      	str	r3, [sp, #20]
	i=0;
	while (GGAbuffer[inx] != ',')
 80023ec:	a903      	add	r1, sp, #12
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	5cea      	ldrb	r2, [r5, r3]
 80023f2:	2a2c      	cmp	r2, #44	; 0x2c
 80023f4:	d17a      	bne.n	80024ec <decodeGGA+0x378>
	{
		buffer[i] = GGAbuffer[inx];
		i++;
		inx++;
	}
	gga->numofsat = atoi(buffer);
 80023f6:	a803      	add	r0, sp, #12
 80023f8:	f004 ffe6 	bl	80073c8 <atoi>

	inx++;
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	4c0d      	ldr	r4, [pc, #52]	; (8002434 <decodeGGA+0x2c0>)
	gga->numofsat = atoi(buffer);
 8002400:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
	inx++;
 8002404:	3301      	adds	r3, #1
 8002406:	6023      	str	r3, [r4, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8002408:	5cea      	ldrb	r2, [r5, r3]
 800240a:	3301      	adds	r3, #1
 800240c:	2a2c      	cmp	r2, #44	; 0x2c
 800240e:	d1fa      	bne.n	8002406 <decodeGGA+0x292>

	inx++;
 8002410:	6023      	str	r3, [r4, #0]
	memset(buffer,'\0',12);
 8002412:	2300      	movs	r3, #0
 8002414:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002418:	9305      	str	r3, [sp, #20]
	i=0;
	while (GGAbuffer[inx] != ',')
 800241a:	a903      	add	r1, sp, #12
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	5cea      	ldrb	r2, [r5, r3]
 8002420:	2a2c      	cmp	r2, #44	; 0x2c
 8002422:	d168      	bne.n	80024f6 <decodeGGA+0x382>
	{
		buffer[i] = GGAbuffer[inx];
		i++;
		inx++;
	}
	num = (atoi(buffer));
 8002424:	a803      	add	r0, sp, #12
 8002426:	f004 ffcf 	bl	80073c8 <atoi>
	j = 0;
 800242a:	2600      	movs	r6, #0
	num = (atoi(buffer));
 800242c:	fa0f f880 	sxth.w	r8, r0
 8002430:	e00e      	b.n	8002450 <decodeGGA+0x2dc>
 8002432:	bf00      	nop
 8002434:	20000578 	.word	0x20000578
 8002438:	20000030 	.word	0x20000030
 800243c:	20000574 	.word	0x20000574
 8002440:	2000057c 	.word	0x2000057c
 8002444:	20000540 	.word	0x20000540
 8002448:	40240000 	.word	0x40240000
 800244c:	40590000 	.word	0x40590000
	while (buffer[j] != '.') j++;
 8002450:	9a01      	ldr	r2, [sp, #4]
 8002452:	3601      	adds	r6, #1
 8002454:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002458:	2b2e      	cmp	r3, #46	; 0x2e
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	d1f8      	bne.n	8002450 <decodeGGA+0x2dc>
	j++;
	declen = (strlen(buffer))-j;
 800245e:	a803      	add	r0, sp, #12
 8002460:	f7fd fe76 	bl	8000150 <strlen>
	dec = atoi ((char*) buffer+j);
 8002464:	ab03      	add	r3, sp, #12
	declen = (strlen(buffer))-j;
 8002466:	4607      	mov	r7, r0
	dec = atoi ((char*) buffer+j);
 8002468:	1998      	adds	r0, r3, r6
 800246a:	f004 ffad 	bl	80073c8 <atoi>
 800246e:	4681      	mov	r9, r0
	lat = (num) + (dec/pow(10, (declen)));
 8002470:	1bb8      	subs	r0, r7, r6
 8002472:	f7fd ffc7 	bl	8000404 <__aeabi_i2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	2000      	movs	r0, #0
 800247c:	4921      	ldr	r1, [pc, #132]	; (8002504 <decodeGGA+0x390>)
 800247e:	f005 fd41 	bl	8007f04 <pow>
 8002482:	4606      	mov	r6, r0
 8002484:	460f      	mov	r7, r1
 8002486:	4648      	mov	r0, r9
 8002488:	f7fd ffbc 	bl	8000404 <__aeabi_i2d>
 800248c:	4632      	mov	r2, r6
 800248e:	463b      	mov	r3, r7
 8002490:	f7fe f94c 	bl	800072c <__aeabi_ddiv>
 8002494:	4606      	mov	r6, r0
 8002496:	4640      	mov	r0, r8
 8002498:	460f      	mov	r7, r1
 800249a:	f7fd ffb3 	bl	8000404 <__aeabi_i2d>
 800249e:	460b      	mov	r3, r1
 80024a0:	4602      	mov	r2, r0
 80024a2:	4639      	mov	r1, r7
 80024a4:	4630      	mov	r0, r6
 80024a6:	f7fd fe61 	bl	800016c <__adddf3>
 80024aa:	f7fe fb0d 	bl	8000ac8 <__aeabi_d2f>
	gga->alt.altitude =lat;
	inx++;
 80024ae:	6823      	ldr	r3, [r4, #0]
	lat = (num) + (dec/pow(10, (declen)));
 80024b0:	f8ca 0020 	str.w	r0, [sl, #32]
	inx++;
 80024b4:	3301      	adds	r3, #1
 80024b6:	6023      	str	r3, [r4, #0]
	gga->alt.unit = GGAbuffer[inx];
 80024b8:	5ceb      	ldrb	r3, [r5, r3]
 80024ba:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
 80024be:	e002      	b.n	80024c6 <decodeGGA+0x352>
		gga->isValid = 0;   // If the fix is not available
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8ca 301c 	str.w	r3, [sl, #28]
	return 1;
 80024c6:	2001      	movs	r0, #1
}
 80024c8:	b007      	add	sp, #28
 80024ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inx++;
 80024ce:	3301      	adds	r3, #1
		buffer[i] = GGAbuffer[inx];
 80024d0:	f801 2b01 	strb.w	r2, [r1], #1
		inx++;
 80024d4:	6023      	str	r3, [r4, #0]
 80024d6:	e68c      	b.n	80021f2 <decodeGGA+0x7e>
		inx++;
 80024d8:	3301      	adds	r3, #1
		buffer[i] = GGAbuffer[inx];
 80024da:	f801 2b01 	strb.w	r2, [r1], #1
		inx++;
 80024de:	6023      	str	r3, [r4, #0]
 80024e0:	e6e2      	b.n	80022a8 <decodeGGA+0x134>
		inx++;
 80024e2:	3301      	adds	r3, #1
		buffer[i] = GGAbuffer[inx];
 80024e4:	f801 2b01 	strb.w	r2, [r1], #1
		inx++;
 80024e8:	6023      	str	r3, [r4, #0]
 80024ea:	e733      	b.n	8002354 <decodeGGA+0x1e0>
		inx++;
 80024ec:	3301      	adds	r3, #1
		buffer[i] = GGAbuffer[inx];
 80024ee:	f801 2b01 	strb.w	r2, [r1], #1
		inx++;
 80024f2:	6023      	str	r3, [r4, #0]
 80024f4:	e77b      	b.n	80023ee <decodeGGA+0x27a>
		inx++;
 80024f6:	3301      	adds	r3, #1
		buffer[i] = GGAbuffer[inx];
 80024f8:	f801 2b01 	strb.w	r2, [r1], #1
		inx++;
 80024fc:	6023      	str	r3, [r4, #0]
 80024fe:	e78d      	b.n	800241c <decodeGGA+0x2a8>
	if (strlen(buffer) <6) return 2;
 8002500:	2002      	movs	r0, #2
 8002502:	e7e1      	b.n	80024c8 <decodeGGA+0x354>
 8002504:	40240000 	.word	0x40240000

08002508 <dma_uart>:

int decodeRMC (char *RMCbuffer, GGASTRUCT *rmc);


void dma_uart(DMA_HandleTypeDef *hdma ,UART_HandleTypeDef *huart ,GPSSTRUCT *gpsdata ,char *GGA, uint8_t *rx_databuffer)
{
 8002508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800250c:	9f06      	ldr	r7, [sp, #24]
 800250e:	4690      	mov	r8, r2
 8002510:	460e      	mov	r6, r1
 8002512:	463d      	mov	r5, r7
	int index =0;

	for(int i =0; i<bufsize-3; i++)
 8002514:	2400      	movs	r4, #0
 8002516:	f240 125b 	movw	r2, #347	; 0x15b
	{
		if(rx_databuffer[i]=='G'&&rx_databuffer[i+1]=='G'&&rx_databuffer[i+2]=='A')
 800251a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800251e:	2947      	cmp	r1, #71	; 0x47
 8002520:	d121      	bne.n	8002566 <dma_uart+0x5e>
 8002522:	7829      	ldrb	r1, [r5, #0]
 8002524:	2947      	cmp	r1, #71	; 0x47
 8002526:	d11e      	bne.n	8002566 <dma_uart+0x5e>
 8002528:	7869      	ldrb	r1, [r5, #1]
 800252a:	2941      	cmp	r1, #65	; 0x41
 800252c:	d11b      	bne.n	8002566 <dma_uart+0x5e>
		{
			i+=3;
			memset(GGA,'\0',100);
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	2264      	movs	r2, #100	; 0x64
 8002534:	f004 fff4 	bl	8007520 <memset>
 8002538:	4603      	mov	r3, r0
			while (rx_databuffer[i] !='*')
 800253a:	3402      	adds	r4, #2
 800253c:	443c      	add	r4, r7
 800253e:	1e41      	subs	r1, r0, #1
 8002540:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8002544:	2a2a      	cmp	r2, #42	; 0x2a
 8002546:	d10b      	bne.n	8002560 <dma_uart+0x58>
				index++;
			}
			break;
		}
	}
	decodeGGA(GGA, &gpsdata->ggastruct);
 8002548:	4641      	mov	r1, r8
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fe12 	bl	8002174 <decodeGGA>
//	hdma->Instance->CR |= DMA_SxCR_TCIE; // Enable transfer complete interrupt
//	hdma->Instance->CR |= DMA_SxCR_EN; // Enable the DMA channel
//	// 4. Enable the DMA channel to resume the transfer
//	HAL_DMA_Start(hdma, (hdma->Instance->M0AR),rx_databuffer, bufsize);
	// start receive again
	HAL_UART_Receive_DMA(huart, rx_databuffer, bufsize);
 8002550:	4639      	mov	r1, r7
 8002552:	4630      	mov	r0, r6



}
 8002554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UART_Receive_DMA(huart, rx_databuffer, bufsize);
 8002558:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800255c:	f003 ba32 	b.w	80059c4 <HAL_UART_Receive_DMA>
				GGA[index] = rx_databuffer[i];
 8002560:	f801 2f01 	strb.w	r2, [r1, #1]!
				index++;
 8002564:	e7ec      	b.n	8002540 <dma_uart+0x38>
	for(int i =0; i<bufsize-3; i++)
 8002566:	3401      	adds	r4, #1
 8002568:	4294      	cmp	r4, r2
 800256a:	d1d6      	bne.n	800251a <dma_uart+0x12>
 800256c:	e7ec      	b.n	8002548 <dma_uart+0x40>
	...

08002570 <steering>:
int angle;
float kp=1.5,ki,kd=0.2;


void steering()
{
 8002570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	error = TARGET_DISTANCE + lane_dist;
 8002574:	4b34      	ldr	r3, [pc, #208]	; (8002648 <steering+0xd8>)
	proportional = kp * error;
	integral += ki * error;
 8002576:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800264c <steering+0xdc>
	error = TARGET_DISTANCE + lane_dist;
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	f7fd ff42 	bl	8000404 <__aeabi_i2d>
 8002580:	4604      	mov	r4, r0
 8002582:	460d      	mov	r5, r1
 8002584:	4b32      	ldr	r3, [pc, #200]	; (8002650 <steering+0xe0>)
 8002586:	e9c3 4500 	strd	r4, r5, [r3]
	proportional = kp * error;
 800258a:	4b32      	ldr	r3, [pc, #200]	; (8002654 <steering+0xe4>)
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	f7fd ff4b 	bl	8000428 <__aeabi_f2d>
 8002592:	4622      	mov	r2, r4
 8002594:	462b      	mov	r3, r5
 8002596:	f7fd ff9f 	bl	80004d8 <__aeabi_dmul>
 800259a:	4606      	mov	r6, r0
 800259c:	460f      	mov	r7, r1
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <steering+0xe8>)
 80025a0:	e9c3 6700 	strd	r6, r7, [r3]
	integral += ki * error;
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <steering+0xec>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	f7fd ff3e 	bl	8000428 <__aeabi_f2d>
 80025ac:	4622      	mov	r2, r4
 80025ae:	462b      	mov	r3, r5
 80025b0:	f7fd ff92 	bl	80004d8 <__aeabi_dmul>
 80025b4:	e9da 2300 	ldrd	r2, r3, [sl]
 80025b8:	f7fd fdd8 	bl	800016c <__adddf3>
 80025bc:	4680      	mov	r8, r0
 80025be:	4689      	mov	r9, r1
	derivative = kd * (error - previousError);
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <steering+0xf0>)
	integral += ki * error;
 80025c2:	e9ca 8900 	strd	r8, r9, [sl]
	derivative = kd * (error - previousError);
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	4620      	mov	r0, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	f7fd fdcb 	bl	8000168 <__aeabi_dsub>
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <steering+0xf4>)
 80025d4:	4682      	mov	sl, r0
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	468b      	mov	fp, r1
 80025da:	f7fd ff25 	bl	8000428 <__aeabi_f2d>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4650      	mov	r0, sl
 80025e4:	4659      	mov	r1, fp
 80025e6:	f7fd ff77 	bl	80004d8 <__aeabi_dmul>
 80025ea:	4682      	mov	sl, r0
 80025ec:	468b      	mov	fp, r1
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <steering+0xf8>)
	controlSignal = proportional + integral + derivative;
 80025f0:	4642      	mov	r2, r8
	derivative = kd * (error - previousError);
 80025f2:	e9c3 ab00 	strd	sl, fp, [r3]
	controlSignal = proportional + integral + derivative;
 80025f6:	4630      	mov	r0, r6
 80025f8:	464b      	mov	r3, r9
 80025fa:	4639      	mov	r1, r7
 80025fc:	f7fd fdb6 	bl	800016c <__adddf3>
 8002600:	4652      	mov	r2, sl
 8002602:	465b      	mov	r3, fp
 8002604:	f7fd fdb2 	bl	800016c <__adddf3>
 8002608:	4606      	mov	r6, r0
 800260a:	460f      	mov	r7, r1
 800260c:	4b17      	ldr	r3, [pc, #92]	; (800266c <steering+0xfc>)
	previousError = error;
//	angle = map(controlSignal, -100, 100, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE);
	angle = (controlSignal - (-40)) * (180 - 20) / (40 - (-40)) + 20;
 800260e:	2200      	movs	r2, #0
	controlSignal = proportional + integral + derivative;
 8002610:	e9c3 6700 	strd	r6, r7, [r3]
	previousError = error;
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <steering+0xf0>)
 8002616:	e9c3 4500 	strd	r4, r5, [r3]
	angle = (controlSignal - (-40)) * (180 - 20) / (40 - (-40)) + 20;
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <steering+0x100>)
 800261c:	f7fd fda6 	bl	800016c <__adddf3>
 8002620:	2200      	movs	r2, #0
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <steering+0x104>)
 8002624:	f7fd ff58 	bl	80004d8 <__aeabi_dmul>
 8002628:	2200      	movs	r2, #0
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <steering+0x108>)
 800262c:	f7fe f87e 	bl	800072c <__aeabi_ddiv>
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <steering+0x10c>)
 8002632:	2200      	movs	r2, #0
 8002634:	f7fd fd9a 	bl	800016c <__adddf3>
 8002638:	f7fe f9fe 	bl	8000a38 <__aeabi_d2iz>
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <steering+0x110>)
 800263e:	6018      	str	r0, [r3, #0]
	HServo_writePosition(angle);
}
 8002640:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HServo_writePosition(angle);
 8002644:	f7fe bcc6 	b.w	8000fd4 <HServo_writePosition>
 8002648:	20000000 	.word	0x20000000
 800264c:	20000700 	.word	0x20000700
 8002650:	200006f8 	.word	0x200006f8
 8002654:	20000038 	.word	0x20000038
 8002658:	20000718 	.word	0x20000718
 800265c:	20000708 	.word	0x20000708
 8002660:	20000710 	.word	0x20000710
 8002664:	20000034 	.word	0x20000034
 8002668:	200006f0 	.word	0x200006f0
 800266c:	200006e8 	.word	0x200006e8
 8002670:	40440000 	.word	0x40440000
 8002674:	40640000 	.word	0x40640000
 8002678:	40540000 	.word	0x40540000
 800267c:	40340000 	.word	0x40340000
 8002680:	200006e0 	.word	0x200006e0

08002684 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_MspInit+0x48>)
{
 8002686:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002688:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800268a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	619a      	str	r2, [r3, #24]
 8002692:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002694:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002698:	f002 0201 	and.w	r2, r2, #1
 800269c:	9200      	str	r2, [sp, #0]
 800269e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026a6:	61da      	str	r2, [r3, #28]
 80026a8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026aa:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026b4:	f000 ff1e 	bl	80034f4 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026b8:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <HAL_MspInit+0x4c>)
 80026ba:	6853      	ldr	r3, [r2, #4]
 80026bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	b003      	add	sp, #12
 80026c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000

080026d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d4:	b530      	push	{r4, r5, lr}
 80026d6:	4605      	mov	r5, r0
 80026d8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	2210      	movs	r2, #16
 80026dc:	2100      	movs	r1, #0
 80026de:	a802      	add	r0, sp, #8
 80026e0:	f004 ff1e 	bl	8007520 <memset>
  if(hadc->Instance==ADC1)
 80026e4:	682a      	ldr	r2, [r5, #0]
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_ADC_MspInit+0x88>)
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d134      	bne.n	8002756 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ec:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80026f0:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	481b      	ldr	r0, [pc, #108]	; (8002760 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f8:	619a      	str	r2, [r3, #24]
 80026fa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026fe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002702:	9200      	str	r2, [sp, #0]
 8002704:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002708:	4c16      	ldr	r4, [pc, #88]	; (8002764 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	f042 0204 	orr.w	r2, r2, #4
 800270e:	619a      	str	r2, [r3, #24]
 8002710:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002712:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271c:	2303      	movs	r3, #3
 800271e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f001 f82b 	bl	800377c <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002726:	2080      	movs	r0, #128	; 0x80
 8002728:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272c:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800272e:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002732:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 8002736:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002738:	490b      	ldr	r1, [pc, #44]	; (8002768 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800273a:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800273c:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002740:	e9c4 c205 	strd	ip, r2, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002744:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002746:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002748:	f000 ff12 	bl	8003570 <HAL_DMA_Init>
 800274c:	b108      	cbz	r0, 8002752 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 800274e:	f7ff fd0f 	bl	8002170 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002752:	622c      	str	r4, [r5, #32]
 8002754:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002756:	b007      	add	sp, #28
 8002758:	bd30      	pop	{r4, r5, pc}
 800275a:	bf00      	nop
 800275c:	40012400 	.word	0x40012400
 8002760:	40010800 	.word	0x40010800
 8002764:	20000288 	.word	0x20000288
 8002768:	40020008 	.word	0x40020008

0800276c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800276c:	b510      	push	{r4, lr}
 800276e:	4604      	mov	r4, r0
 8002770:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002772:	2210      	movs	r2, #16
 8002774:	2100      	movs	r1, #0
 8002776:	a802      	add	r0, sp, #8
 8002778:	f004 fed2 	bl	8007520 <memset>
  if(hcan->Instance==CAN1)
 800277c:	6822      	ldr	r2, [r4, #0]
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_CAN_MspInit+0x7c>)
 8002780:	429a      	cmp	r2, r3
 8002782:	d12e      	bne.n	80027e2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002784:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002788:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	4818      	ldr	r0, [pc, #96]	; (80027ec <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800278c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002790:	61da      	str	r2, [r3, #28]
 8002792:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002796:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800279a:	9200      	str	r2, [sp, #0]
 800279c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	f042 0208 	orr.w	r2, r2, #8
 80027a4:	619a      	str	r2, [r3, #24]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027b4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	f000 ffe1 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027be:	2302      	movs	r3, #2
 80027c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	4809      	ldr	r0, [pc, #36]	; (80027ec <HAL_CAN_MspInit+0x80>)
 80027c8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027cc:	f000 ffd6 	bl	800377c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_CAN_MspInit+0x84>)
 80027d2:	6853      	ldr	r3, [r2, #4]
 80027d4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80027d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80027e2:	b006      	add	sp, #24
 80027e4:	bd10      	pop	{r4, pc}
 80027e6:	bf00      	nop
 80027e8:	40006400 	.word	0x40006400
 80027ec:	40010c00 	.word	0x40010c00
 80027f0:	40010000 	.word	0x40010000

080027f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f4:	b510      	push	{r4, lr}
 80027f6:	4604      	mov	r4, r0
 80027f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fa:	2210      	movs	r2, #16
 80027fc:	2100      	movs	r1, #0
 80027fe:	a802      	add	r0, sp, #8
 8002800:	f004 fe8e 	bl	8007520 <memset>
  if(hi2c->Instance==I2C1)
 8002804:	6822      	ldr	r2, [r4, #0]
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_I2C_MspInit+0x58>)
 8002808:	429a      	cmp	r2, r3
 800280a:	d11c      	bne.n	8002846 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280c:	4c10      	ldr	r4, [pc, #64]	; (8002850 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002810:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	4810      	ldr	r0, [pc, #64]	; (8002854 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	f043 0308 	orr.w	r3, r3, #8
 8002818:	61a3      	str	r3, [r4, #24]
 800281a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002826:	2312      	movs	r3, #18
 8002828:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002830:	f000 ffa4 	bl	800377c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002834:	69e3      	ldr	r3, [r4, #28]
 8002836:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800283a:	61e3      	str	r3, [r4, #28]
 800283c:	69e3      	ldr	r3, [r4, #28]
 800283e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002846:	b006      	add	sp, #24
 8002848:	bd10      	pop	{r4, pc}
 800284a:	bf00      	nop
 800284c:	40005400 	.word	0x40005400
 8002850:	40021000 	.word	0x40021000
 8002854:	40010c00 	.word	0x40010c00

08002858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002858:	b510      	push	{r4, lr}
 800285a:	4604      	mov	r4, r0
 800285c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285e:	2210      	movs	r2, #16
 8002860:	2100      	movs	r1, #0
 8002862:	a802      	add	r0, sp, #8
 8002864:	f004 fe5c 	bl	8007520 <memset>
  if(hspi->Instance==SPI2)
 8002868:	6822      	ldr	r2, [r4, #0]
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_SPI_MspInit+0x70>)
 800286c:	429a      	cmp	r2, r3
 800286e:	d128      	bne.n	80028c2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002870:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8002874:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002876:	4815      	ldr	r0, [pc, #84]	; (80028cc <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287c:	61da      	str	r2, [r3, #28]
 800287e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002882:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002886:	9200      	str	r2, [sp, #0]
 8002888:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	f042 0208 	orr.w	r2, r2, #8
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028aa:	f000 ff67 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028b2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028be:	f000 ff5d 	bl	800377c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028c2:	b006      	add	sp, #24
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	bf00      	nop
 80028c8:	40003800 	.word	0x40003800
 80028cc:	40010c00 	.word	0x40010c00

080028d0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80028d0:	6803      	ldr	r3, [r0, #0]
{
 80028d2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d115      	bne.n	8002906 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80028de:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80028e0:	2105      	movs	r1, #5
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	61da      	str	r2, [r3, #28]
 80028e8:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80028ea:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80028f2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80028f6:	f000 fdfd 	bl	80034f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028fa:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028fc:	b003      	add	sp, #12
 80028fe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002902:	f000 be27 	b.w	8003554 <HAL_NVIC_EnableIRQ>
}
 8002906:	b003      	add	sp, #12
 8002908:	f85d fb04 	ldr.w	pc, [sp], #4

0800290c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 800290c:	6802      	ldr	r2, [r0, #0]
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_TIM_PWM_MspInit+0x24>)
{
 8002910:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8002912:	429a      	cmp	r2, r3
 8002914:	d10a      	bne.n	800292c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002916:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	f042 0202 	orr.w	r2, r2, #2
 8002920:	61da      	str	r2, [r3, #28]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800292c:	b002      	add	sp, #8
 800292e:	4770      	bx	lr
 8002930:	40000400 	.word	0x40000400

08002934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002934:	b510      	push	{r4, lr}
 8002936:	4604      	mov	r4, r0
 8002938:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293a:	2210      	movs	r2, #16
 800293c:	2100      	movs	r1, #0
 800293e:	a802      	add	r0, sp, #8
 8002940:	f004 fdee 	bl	8007520 <memset>
  if(htim->Instance==TIM3)
 8002944:	6822      	ldr	r2, [r4, #0]
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_TIM_MspPostInit+0x44>)
 8002948:	429a      	cmp	r2, r3
 800294a:	d113      	bne.n	8002974 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002950:	699a      	ldr	r2, [r3, #24]
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	480a      	ldr	r0, [pc, #40]	; (800297c <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	f042 0204 	orr.w	r2, r2, #4
 8002958:	619a      	str	r2, [r3, #24]
 800295a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	f000 ff04 	bl	800377c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002974:	b006      	add	sp, #24
 8002976:	bd10      	pop	{r4, pc}
 8002978:	40000400 	.word	0x40000400
 800297c:	40010800 	.word	0x40010800

08002980 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	2210      	movs	r2, #16
{
 8002982:	b570      	push	{r4, r5, r6, lr}
 8002984:	4606      	mov	r6, r0
 8002986:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	eb0d 0002 	add.w	r0, sp, r2
 800298c:	2100      	movs	r1, #0
 800298e:	f004 fdc7 	bl	8007520 <memset>
  if(huart->Instance==USART1)
 8002992:	6833      	ldr	r3, [r6, #0]
 8002994:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_UART_MspInit+0xe8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d13c      	bne.n	8002a14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800299a:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <HAL_UART_MspInit+0xec>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a8:	619a      	str	r2, [r3, #24]
 80029aa:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ac:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029b2:	9200      	str	r2, [sp, #0]
 80029b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80029b8:	4c2d      	ldr	r4, [pc, #180]	; (8002a70 <HAL_UART_MspInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	f042 0204 	orr.w	r2, r2, #4
 80029be:	619a      	str	r2, [r3, #24]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	4828      	ldr	r0, [pc, #160]	; (8002a74 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d6:	f000 fed1 	bl	800377c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029da:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	4825      	ldr	r0, [pc, #148]	; (8002a74 <HAL_UART_MspInit+0xf4>)
 80029e0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e2:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f000 fec8 	bl	800377c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_UART_MspInit+0xf8>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029ee:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f0:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029f4:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029f6:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029fa:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fe:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a00:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a02:	f000 fdb5 	bl	8003570 <HAL_DMA_Init>
 8002a06:	b108      	cbz	r0, 8002a0c <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8002a08:	f7ff fbb2 	bl	8002170 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a0c:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002a0e:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a10:	b008      	add	sp, #32
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_UART_MspInit+0xfc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d1fa      	bne.n	8002a10 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_UART_MspInit+0xec>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	4814      	ldr	r0, [pc, #80]	; (8002a74 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a26:	61da      	str	r2, [r3, #28]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002a2e:	9202      	str	r2, [sp, #8]
 8002a30:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	f042 0204 	orr.w	r2, r2, #4
 8002a38:	619a      	str	r2, [r3, #24]
 8002a3a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	9303      	str	r3, [sp, #12]
 8002a44:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f000 fe94 	bl	800377c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a54:	2300      	movs	r3, #0
 8002a56:	2108      	movs	r1, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	4806      	ldr	r0, [pc, #24]	; (8002a74 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f000 fe8b 	bl	800377c <HAL_GPIO_Init>
}
 8002a66:	e7d3      	b.n	8002a10 <HAL_UART_MspInit+0x90>
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	200002cc 	.word	0x200002cc
 8002a74:	40010800 	.word	0x40010800
 8002a78:	40020058 	.word	0x40020058
 8002a7c:	40004400 	.word	0x40004400

08002a80 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_InitTick+0x7c>)
{
 8002a82:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a84:	699a      	ldr	r2, [r3, #24]
{
 8002a86:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8c:	619a      	str	r2, [r3, #24]
 8002a8e:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a90:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a96:	9302      	str	r3, [sp, #8]
{
 8002a98:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a9a:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a9c:	4d18      	ldr	r5, [pc, #96]	; (8002b00 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a9e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aa0:	f001 fe4a 	bl	8004738 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f001 fe38 	bl	8004718 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002aa8:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <HAL_InitTick+0x84>)
 8002aaa:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002aac:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002ab0:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_InitTick+0x88>)
 8002ab4:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002ab8:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aba:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002abc:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8002abe:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8002ac0:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac4:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8002ac6:	f002 fb7d 	bl	80051c4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002aca:	4604      	mov	r4, r0
 8002acc:	b980      	cbnz	r0, 8002af0 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f002 fa70 	bl	8004fb4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	b958      	cbnz	r0, 8002af0 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002ad8:	2019      	movs	r0, #25
 8002ada:	f000 fd3b 	bl	8003554 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ade:	2e0f      	cmp	r6, #15
 8002ae0:	d809      	bhi.n	8002af6 <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	4631      	mov	r1, r6
 8002ae6:	2019      	movs	r0, #25
 8002ae8:	f000 fd04 	bl	80034f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_InitTick+0x8c>)
 8002aee:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8002af0:	4620      	mov	r0, r4
 8002af2:	b008      	add	sp, #32
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8002af6:	2401      	movs	r4, #1
 8002af8:	e7fa      	b.n	8002af0 <HAL_InitTick+0x70>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	20000720 	.word	0x20000720
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	000f4240 	.word	0x000f4240
 8002b0c:	20000044 	.word	0x20000044

08002b10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler>

08002b12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler>

08002b14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler>

08002b16 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <BusFault_Handler>

08002b18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <UsageFault_Handler>

08002b1a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b1a:	4770      	bx	lr

08002b1c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002b1c:	2010      	movs	r0, #16
 8002b1e:	f000 bf0d 	b.w	800393c <HAL_GPIO_EXTI_IRQHandler>
	...

08002b24 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b24:	4801      	ldr	r0, [pc, #4]	; (8002b2c <DMA1_Channel1_IRQHandler+0x8>)
 8002b26:	f000 bd95 	b.w	8003654 <HAL_DMA_IRQHandler>
 8002b2a:	bf00      	nop
 8002b2c:	20000288 	.word	0x20000288

08002b30 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b30:	4801      	ldr	r0, [pc, #4]	; (8002b38 <DMA1_Channel5_IRQHandler+0x8>)
 8002b32:	f000 bd8f 	b.w	8003654 <HAL_DMA_IRQHandler>
 8002b36:	bf00      	nop
 8002b38:	200002cc 	.word	0x200002cc

08002b3c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b3c:	4801      	ldr	r0, [pc, #4]	; (8002b44 <TIM1_UP_IRQHandler+0x8>)
 8002b3e:	f002 ba67 	b.w	8005010 <HAL_TIM_IRQHandler>
 8002b42:	bf00      	nop
 8002b44:	20000720 	.word	0x20000720

08002b48 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b48:	4801      	ldr	r0, [pc, #4]	; (8002b50 <TIM2_IRQHandler+0x8>)
 8002b4a:	f002 ba61 	b.w	8005010 <HAL_TIM_IRQHandler>
 8002b4e:	bf00      	nop
 8002b50:	200003bc 	.word	0x200003bc

08002b54 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b54:	4a0b      	ldr	r2, [pc, #44]	; (8002b84 <_sbrk+0x30>)
{
 8002b56:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002b58:	6811      	ldr	r1, [r2, #0]
{
 8002b5a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002b5c:	b909      	cbnz	r1, 8002b62 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002b5e:	490a      	ldr	r1, [pc, #40]	; (8002b88 <_sbrk+0x34>)
 8002b60:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b62:	6810      	ldr	r0, [r2, #0]
 8002b64:	4909      	ldr	r1, [pc, #36]	; (8002b8c <_sbrk+0x38>)
 8002b66:	4c0a      	ldr	r4, [pc, #40]	; (8002b90 <_sbrk+0x3c>)
 8002b68:	4403      	add	r3, r0
 8002b6a:	1b09      	subs	r1, r1, r4
 8002b6c:	428b      	cmp	r3, r1
 8002b6e:	d906      	bls.n	8002b7e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002b70:	f004 fd34 	bl	80075dc <__errno>
 8002b74:	230c      	movs	r3, #12
 8002b76:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002b7c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002b7e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002b80:	e7fc      	b.n	8002b7c <_sbrk+0x28>
 8002b82:	bf00      	nop
 8002b84:	20000768 	.word	0x20000768
 8002b88:	200029d0 	.word	0x200029d0
 8002b8c:	20005000 	.word	0x20005000
 8002b90:	00000400 	.word	0x00000400

08002b94 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b94:	4770      	bx	lr
	...

08002b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b98:	f7ff fffc 	bl	8002b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b9e:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bb4:	4c09      	ldr	r4, [pc, #36]	; (8002bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f004 fd11 	bl	80075e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc6:	f7ff f88d 	bl	8001ce4 <main>
  bx lr
 8002bca:	4770      	bx	lr
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002bd4:	080098a8 	.word	0x080098a8
  ldr r2, =_sbss
 8002bd8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002bdc:	200029d0 	.word	0x200029d0

08002be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC1_2_IRQHandler>
	...

08002be4 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_Init+0x20>)
{
 8002be6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be8:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bec:	f043 0310 	orr.w	r3, r3, #16
 8002bf0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf2:	f000 fc6d 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf6:	200f      	movs	r0, #15
 8002bf8:	f7ff ff42 	bl	8002a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bfc:	f7ff fd42 	bl	8002684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002c00:	2000      	movs	r0, #0
 8002c02:	bd08      	pop	{r3, pc}
 8002c04:	40022000 	.word	0x40022000

08002c08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002c08:	4a03      	ldr	r2, [pc, #12]	; (8002c18 <HAL_IncTick+0x10>)
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <HAL_IncTick+0x14>)
 8002c0c:	6811      	ldr	r1, [r2, #0]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	440b      	add	r3, r1
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	2000076c 	.word	0x2000076c
 8002c1c:	20000040 	.word	0x20000040

08002c20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c20:	4b01      	ldr	r3, [pc, #4]	; (8002c28 <HAL_GetTick+0x8>)
 8002c22:	6818      	ldr	r0, [r3, #0]
}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000076c 	.word	0x2000076c

08002c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff fff6 	bl	8002c20 <HAL_GetTick>
 8002c34:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c36:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002c38:	bf1e      	ittt	ne
 8002c3a:	4b04      	ldrne	r3, [pc, #16]	; (8002c4c <HAL_Delay+0x20>)
 8002c3c:	781b      	ldrbne	r3, [r3, #0]
 8002c3e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	1b43      	subs	r3, r0, r5
 8002c46:	42a3      	cmp	r3, r4
 8002c48:	d3fa      	bcc.n	8002c40 <HAL_Delay+0x14>
  {
  }
}
 8002c4a:	bd38      	pop	{r3, r4, r5, pc}
 8002c4c:	20000040 	.word	0x20000040

08002c50 <HAL_ADC_ConvCpltCallback>:
 8002c50:	4770      	bx	lr

08002c52 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c52:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002c54:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c58:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002c5c:	d11b      	bne.n	8002c96 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	6892      	ldr	r2, [r2, #8]
 8002c6a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002c6e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002c72:	d10c      	bne.n	8002c8e <ADC_DMAConvCplt+0x3c>
 8002c74:	7b1a      	ldrb	r2, [r3, #12]
 8002c76:	b952      	cbnz	r2, 8002c8e <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c82:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c84:	bf5e      	ittt	pl
 8002c86:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8002c88:	f042 0201 	orrpl.w	r2, r2, #1
 8002c8c:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ffde 	bl	8002c50 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c94:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c96:	6a1b      	ldr	r3, [r3, #32]
}
 8002c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4718      	bx	r3

08002ca0 <HAL_ADC_ConvHalfCpltCallback>:
 8002ca0:	4770      	bx	lr

08002ca2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ca2:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002ca6:	f7ff fffb 	bl	8002ca0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002caa:	bd08      	pop	{r3, pc}

08002cac <HAL_ADC_ErrorCallback>:
 8002cac:	4770      	bx	lr

08002cae <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cae:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002cb0:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cb8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cc2:	f7ff fff3 	bl	8002cac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc6:	bd08      	pop	{r3, pc}

08002cc8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002cc8:	2300      	movs	r3, #0
{ 
 8002cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002ccc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002cce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8002cd2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d06c      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0xea>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002cde:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ce0:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8002ce2:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ce4:	6808      	ldr	r0, [r1, #0]
 8002ce6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8002cea:	d822      	bhi.n	8002d32 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cec:	261f      	movs	r6, #31
 8002cee:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002cf0:	3b05      	subs	r3, #5
 8002cf2:	409e      	lsls	r6, r3
 8002cf4:	ea25 0506 	bic.w	r5, r5, r6
 8002cf8:	fa00 f303 	lsl.w	r3, r0, r3
 8002cfc:	432b      	orrs	r3, r5
 8002cfe:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d00:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d02:	688b      	ldr	r3, [r1, #8]
 8002d04:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002d08:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d0c:	d929      	bls.n	8002d62 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d0e:	68d6      	ldr	r6, [r2, #12]
 8002d10:	3d1e      	subs	r5, #30
 8002d12:	40a9      	lsls	r1, r5
 8002d14:	ea26 0101 	bic.w	r1, r6, r1
 8002d18:	40ab      	lsls	r3, r5
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d1e:	f1a0 0310 	sub.w	r3, r0, #16
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d925      	bls.n	8002d72 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d26:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002d32:	2d0c      	cmp	r5, #12
 8002d34:	f04f 051f 	mov.w	r5, #31
 8002d38:	d809      	bhi.n	8002d4e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d3a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002d3c:	3b23      	subs	r3, #35	; 0x23
 8002d3e:	409d      	lsls	r5, r3
 8002d40:	ea26 0505 	bic.w	r5, r6, r5
 8002d44:	fa00 f303 	lsl.w	r3, r0, r3
 8002d48:	432b      	orrs	r3, r5
 8002d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4c:	e7d8      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d4e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8002d50:	3b41      	subs	r3, #65	; 0x41
 8002d52:	409d      	lsls	r5, r3
 8002d54:	ea26 0505 	bic.w	r5, r6, r5
 8002d58:	fa00 f303 	lsl.w	r3, r0, r3
 8002d5c:	432b      	orrs	r3, r5
 8002d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002d60:	e7ce      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d62:	6910      	ldr	r0, [r2, #16]
 8002d64:	40a9      	lsls	r1, r5
 8002d66:	ea20 0101 	bic.w	r1, r0, r1
 8002d6a:	40ab      	lsls	r3, r5
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6113      	str	r3, [r2, #16]
 8002d70:	e7d9      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_ADC_ConfigChannel+0xf0>)
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d116      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d78:	6893      	ldr	r3, [r2, #8]
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	d4d3      	bmi.n	8002d26 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d7e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d80:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d86:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d88:	d1cd      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_ADC_ConfigChannel+0xf4>)
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_ADC_ConfigChannel+0xf8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d94:	220a      	movs	r2, #10
 8002d96:	4353      	muls	r3, r2
            wait_loop_index--;
 8002d98:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002d9a:	9b01      	ldr	r3, [sp, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0c2      	beq.n	8002d26 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002da0:	9b01      	ldr	r3, [sp, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	e7f8      	b.n	8002d98 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002da8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002daa:	f043 0320 	orr.w	r3, r3, #32
 8002dae:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002db0:	e7ba      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8002db2:	2002      	movs	r0, #2
 8002db4:	e7bb      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x66>
 8002db6:	bf00      	nop
 8002db8:	40012400 	.word	0x40012400
 8002dbc:	2000003c 	.word	0x2000003c
 8002dc0:	000f4240 	.word	0x000f4240

08002dc4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002dc4:	2300      	movs	r3, #0
{
 8002dc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002dc8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002dca:	6803      	ldr	r3, [r0, #0]
{
 8002dcc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	07d2      	lsls	r2, r2, #31
 8002dd2:	d502      	bpl.n	8002dda <ADC_Enable+0x16>
  return HAL_OK;
 8002dd4:	2000      	movs	r0, #0
}
 8002dd6:	b003      	add	sp, #12
 8002dd8:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <ADC_Enable+0x70>)
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <ADC_Enable+0x74>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002dec:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002dee:	9b01      	ldr	r3, [sp, #4]
 8002df0:	b9e3      	cbnz	r3, 8002e2c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002df2:	f7ff ff15 	bl	8002c20 <HAL_GetTick>
 8002df6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	07db      	lsls	r3, r3, #31
 8002dfe:	d4e9      	bmi.n	8002dd4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e00:	f7ff ff0e 	bl	8002c20 <HAL_GetTick>
 8002e04:	1b40      	subs	r0, r0, r5
 8002e06:	2802      	cmp	r0, #2
 8002e08:	d9f6      	bls.n	8002df8 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f013 0301 	ands.w	r3, r3, #1
 8002e12:	d1f1      	bne.n	8002df8 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8002e16:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e18:	f042 0210 	orr.w	r2, r2, #16
 8002e1c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002e20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002e2a:	e7d4      	b.n	8002dd6 <ADC_Enable+0x12>
      wait_loop_index--;
 8002e2c:	9b01      	ldr	r3, [sp, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	e7dc      	b.n	8002dec <ADC_Enable+0x28>
 8002e32:	bf00      	nop
 8002e34:	2000003c 	.word	0x2000003c
 8002e38:	000f4240 	.word	0x000f4240

08002e3c <HAL_ADC_Start_DMA>:
{
 8002e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e40:	4b40      	ldr	r3, [pc, #256]	; (8002f44 <HAL_ADC_Start_DMA+0x108>)
{
 8002e42:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e44:	6802      	ldr	r2, [r0, #0]
{
 8002e46:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e48:	429a      	cmp	r2, r3
{
 8002e4a:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e4c:	d002      	beq.n	8002e54 <HAL_ADC_Start_DMA+0x18>
 8002e4e:	493e      	ldr	r1, [pc, #248]	; (8002f48 <HAL_ADC_Start_DMA+0x10c>)
 8002e50:	428a      	cmp	r2, r1
 8002e52:	d103      	bne.n	8002e5c <HAL_ADC_Start_DMA+0x20>
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002e5a:	d16e      	bne.n	8002f3a <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002e5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d06c      	beq.n	8002f3e <HAL_ADC_Start_DMA+0x102>
 8002e64:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8002e66:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8002e68:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002e6c:	f7ff ffaa 	bl	8002dc4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002e70:	4606      	mov	r6, r0
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d15d      	bne.n	8002f32 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8002e76:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e78:	6821      	ldr	r1, [r4, #0]
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8002e7c:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8002e80:	f025 0501 	bic.w	r5, r5, #1
 8002e84:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e88:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e8c:	d104      	bne.n	8002e98 <HAL_ADC_Start_DMA+0x5c>
 8002e8e:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <HAL_ADC_Start_DMA+0x108>)
 8002e90:	6853      	ldr	r3, [r2, #4]
 8002e92:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002e96:	d13e      	bne.n	8002f16 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e9e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ea0:	684b      	ldr	r3, [r1, #4]
 8002ea2:	055a      	lsls	r2, r3, #21
 8002ea4:	d505      	bpl.n	8002eb2 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ea6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ea8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eb0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eb4:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eb6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eba:	bf18      	it	ne
 8002ebc:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ebe:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ec0:	bf18      	it	ne
 8002ec2:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ed0:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ed2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_ADC_Start_DMA+0x114>)
 8002ed6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <HAL_ADC_Start_DMA+0x118>)
 8002eda:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002edc:	f06f 0302 	mvn.w	r3, #2
 8002ee0:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ee4:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	f000 fb6f 	bl	80035d4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002efe:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	bf0c      	ite	eq
 8002f06:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f0a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	4630      	mov	r0, r6
 8002f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f1e:	6853      	ldr	r3, [r2, #4]
 8002f20:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f22:	bf41      	itttt	mi
 8002f24:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8002f26:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8002f2a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8002f2e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8002f30:	e7bf      	b.n	8002eb2 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8002f32:	2300      	movs	r3, #0
 8002f34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002f38:	e7ea      	b.n	8002f10 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8002f3a:	2601      	movs	r6, #1
 8002f3c:	e7e8      	b.n	8002f10 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002f3e:	2602      	movs	r6, #2
 8002f40:	e7e6      	b.n	8002f10 <HAL_ADC_Start_DMA+0xd4>
 8002f42:	bf00      	nop
 8002f44:	40012400 	.word	0x40012400
 8002f48:	40012800 	.word	0x40012800
 8002f4c:	08002c53 	.word	0x08002c53
 8002f50:	08002ca3 	.word	0x08002ca3
 8002f54:	08002caf 	.word	0x08002caf

08002f58 <ADC_ConversionStop_Disable>:
{
 8002f58:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f5a:	6803      	ldr	r3, [r0, #0]
{
 8002f5c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	07d1      	lsls	r1, r2, #31
 8002f62:	d401      	bmi.n	8002f68 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002f64:	2000      	movs	r0, #0
}
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002f70:	f7ff fe56 	bl	8002c20 <HAL_GetTick>
 8002f74:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	07db      	lsls	r3, r3, #31
 8002f7c:	d5f2      	bpl.n	8002f64 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f7e:	f7ff fe4f 	bl	8002c20 <HAL_GetTick>
 8002f82:	1b40      	subs	r0, r0, r5
 8002f84:	2802      	cmp	r0, #2
 8002f86:	d9f6      	bls.n	8002f76 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	07da      	lsls	r2, r3, #31
 8002f8e:	d5f2      	bpl.n	8002f76 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8002f92:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f94:	f043 0310 	orr.w	r3, r3, #16
 8002f98:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002fa2:	e7e0      	b.n	8002f66 <ADC_ConversionStop_Disable+0xe>

08002fa4 <HAL_ADC_Init>:
{
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d06d      	beq.n	8003088 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002fae:	b923      	cbnz	r3, 8002fba <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002fb2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002fb6:	f7ff fb8d 	bl	80026d4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff ffcc 	bl	8002f58 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fc2:	f013 0310 	ands.w	r3, r3, #16
 8002fc6:	d161      	bne.n	800308c <HAL_ADC_Init+0xe8>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d15f      	bne.n	800308c <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8002fcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fce:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002fd0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002fd4:	f022 0202 	bic.w	r2, r2, #2
 8002fd8:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fdc:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fde:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002fe0:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002fe2:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fe4:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fe6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fea:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fee:	d036      	beq.n	800305e <HAL_ADC_Init+0xba>
 8002ff0:	1e77      	subs	r7, r6, #1
 8002ff2:	427d      	negs	r5, r7
 8002ff4:	417d      	adcs	r5, r7
 8002ff6:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff8:	7d27      	ldrb	r7, [r4, #20]
 8002ffa:	2f01      	cmp	r7, #1
 8002ffc:	d106      	bne.n	800300c <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ffe:	bb82      	cbnz	r2, 8003062 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003000:	69a2      	ldr	r2, [r4, #24]
 8003002:	3a01      	subs	r2, #1
 8003004:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8003008:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800300c:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800300e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003012:	6857      	ldr	r7, [r2, #4]
 8003014:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8003018:	ea45 0507 	orr.w	r5, r5, r7
 800301c:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800301e:	6897      	ldr	r7, [r2, #8]
 8003020:	4d1d      	ldr	r5, [pc, #116]	; (8003098 <HAL_ADC_Init+0xf4>)
 8003022:	ea05 0507 	and.w	r5, r5, r7
 8003026:	ea45 0501 	orr.w	r5, r5, r1
 800302a:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800302c:	d001      	beq.n	8003032 <HAL_ADC_Init+0x8e>
 800302e:	2e01      	cmp	r6, #1
 8003030:	d102      	bne.n	8003038 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003032:	6923      	ldr	r3, [r4, #16]
 8003034:	3b01      	subs	r3, #1
 8003036:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8003038:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800303a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800303e:	432b      	orrs	r3, r5
 8003040:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003042:	6892      	ldr	r2, [r2, #8]
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_ADC_Init+0xf8>)
 8003046:	4013      	ands	r3, r2
 8003048:	4299      	cmp	r1, r3
 800304a:	d113      	bne.n	8003074 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 800304c:	2300      	movs	r3, #0
 800304e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800305e:	4635      	mov	r5, r6
 8003060:	e7ca      	b.n	8002ff8 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003062:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003064:	f042 0220 	orr.w	r2, r2, #32
 8003068:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800306c:	f042 0201 	orr.w	r2, r2, #1
 8003070:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003072:	e7cb      	b.n	800300c <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8003074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003076:	f023 0312 	bic.w	r3, r3, #18
 800307a:	f043 0310 	orr.w	r3, r3, #16
 800307e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8003088:	2001      	movs	r0, #1
 800308a:	e7e7      	b.n	800305c <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800308e:	f043 0310 	orr.w	r3, r3, #16
 8003092:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003094:	e7f8      	b.n	8003088 <HAL_ADC_Init+0xe4>
 8003096:	bf00      	nop
 8003098:	ffe1f7fd 	.word	0xffe1f7fd
 800309c:	ff1f0efe 	.word	0xff1f0efe

080030a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030a2:	4604      	mov	r4, r0
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d06e      	beq.n	8003186 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030a8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80030ac:	b90b      	cbnz	r3, 80030b2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030ae:	f7ff fb5d 	bl	800276c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030bc:	f7ff fdb0 	bl	8002c20 <HAL_GetTick>
 80030c0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	07d1      	lsls	r1, r2, #31
 80030c8:	d551      	bpl.n	800316e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f022 0202 	bic.w	r2, r2, #2
 80030d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030d2:	f7ff fda5 	bl	8002c20 <HAL_GetTick>
 80030d6:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	0792      	lsls	r2, r2, #30
 80030de:	d454      	bmi.n	800318a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030e0:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030e2:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030e4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	bf0c      	ite	eq
 80030ea:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030ee:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80030f2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80030f4:	7e62      	ldrb	r2, [r4, #25]
 80030f6:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	bf0c      	ite	eq
 80030fc:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003100:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003104:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003106:	7ea2      	ldrb	r2, [r4, #26]
 8003108:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	bf0c      	ite	eq
 800310e:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003112:	f022 0220 	bicne.w	r2, r2, #32
 8003116:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003118:	7ee2      	ldrb	r2, [r4, #27]
 800311a:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	bf0c      	ite	eq
 8003120:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003124:	f042 0210 	orrne.w	r2, r2, #16
 8003128:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800312a:	7f22      	ldrb	r2, [r4, #28]
 800312c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	bf0c      	ite	eq
 8003132:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003136:	f022 0208 	bicne.w	r2, r2, #8
 800313a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800313c:	7f62      	ldrb	r2, [r4, #29]
 800313e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	bf0c      	ite	eq
 8003144:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003148:	f022 0204 	bicne.w	r2, r2, #4
 800314c:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800314e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003152:	430a      	orrs	r2, r1
 8003154:	6921      	ldr	r1, [r4, #16]
 8003156:	430a      	orrs	r2, r1
 8003158:	6961      	ldr	r1, [r4, #20]
 800315a:	430a      	orrs	r2, r1
 800315c:	6861      	ldr	r1, [r4, #4]
 800315e:	3901      	subs	r1, #1
 8003160:	430a      	orrs	r2, r1
 8003162:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003164:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003166:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003168:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 800316c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800316e:	f7ff fd57 	bl	8002c20 <HAL_GetTick>
 8003172:	1b40      	subs	r0, r0, r5
 8003174:	280a      	cmp	r0, #10
 8003176:	d9a4      	bls.n	80030c2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800317a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003180:	2305      	movs	r3, #5
 8003182:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003186:	2001      	movs	r0, #1
 8003188:	e7f0      	b.n	800316c <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800318a:	f7ff fd49 	bl	8002c20 <HAL_GetTick>
 800318e:	1b40      	subs	r0, r0, r5
 8003190:	280a      	cmp	r0, #10
 8003192:	d9a1      	bls.n	80030d8 <HAL_CAN_Init+0x38>
 8003194:	e7f0      	b.n	8003178 <HAL_CAN_Init+0xd8>

08003196 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003196:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003198:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 800319c:	6803      	ldr	r3, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800319e:	3a01      	subs	r2, #1
 80031a0:	2a01      	cmp	r2, #1
 80031a2:	d862      	bhi.n	800326a <HAL_CAN_ConfigFilter+0xd4>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031a4:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031b2:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031b4:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031b8:	f002 041f 	and.w	r4, r2, #31
 80031bc:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031be:	ea25 0500 	bic.w	r5, r5, r0
 80031c2:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031c6:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031c8:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031ca:	bb95      	cbnz	r5, 8003232 <HAL_CAN_ConfigFilter+0x9c>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031cc:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031d0:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031d2:	4025      	ands	r5, r4
 80031d4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031d8:	888d      	ldrh	r5, [r1, #4]
 80031da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031de:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031e2:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031e6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031e8:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ee:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031f2:	698a      	ldr	r2, [r1, #24]
 80031f4:	bb7a      	cbnz	r2, 8003256 <HAL_CAN_ConfigFilter+0xc0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031fa:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003200:	690a      	ldr	r2, [r1, #16]
 8003202:	bb62      	cbnz	r2, 800325e <HAL_CAN_ConfigFilter+0xc8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003204:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003208:	4014      	ands	r4, r2
 800320a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800320e:	6a0a      	ldr	r2, [r1, #32]
 8003210:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003212:	bf04      	itt	eq
 8003214:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8003218:	4302      	orreq	r2, r0

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 800321a:	f04f 0000 	mov.w	r0, #0
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800321e:	bf08      	it	eq
 8003220:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003224:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003230:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003232:	2d01      	cmp	r5, #1
 8003234:	d1dd      	bne.n	80031f2 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003236:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800323a:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800323c:	4305      	orrs	r5, r0
 800323e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003242:	888d      	ldrh	r5, [r1, #4]
 8003244:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003248:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800324c:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003250:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003252:	898d      	ldrh	r5, [r1, #12]
 8003254:	e7c9      	b.n	80031ea <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003256:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800325a:	4302      	orrs	r2, r0
 800325c:	e7ce      	b.n	80031fc <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800325e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003262:	4302      	orrs	r2, r0
 8003264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003268:	e7d1      	b.n	800320e <HAL_CAN_ConfigFilter+0x78>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800326a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800326c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003270:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
 8003274:	e7dc      	b.n	8003230 <HAL_CAN_ConfigFilter+0x9a>

08003276 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003276:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003278:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800327c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800327e:	2b01      	cmp	r3, #1
 8003280:	b2dd      	uxtb	r5, r3
 8003282:	d120      	bne.n	80032c6 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003284:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003286:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003288:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800328c:	6813      	ldr	r3, [r2, #0]
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003294:	f7ff fcc4 	bl	8002c20 <HAL_GetTick>
 8003298:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f013 0301 	ands.w	r3, r3, #1
 80032a2:	d102      	bne.n	80032aa <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 80032a4:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032a6:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80032a8:	e00b      	b.n	80032c2 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032aa:	f7ff fcb9 	bl	8002c20 <HAL_GetTick>
 80032ae:	1b80      	subs	r0, r0, r6
 80032b0:	280a      	cmp	r0, #10
 80032b2:	d9f2      	bls.n	800329a <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ba:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80032bc:	2305      	movs	r3, #5
 80032be:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80032c2:	4628      	mov	r0, r5
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80032c8:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032ce:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80032d0:	e7f7      	b.n	80032c2 <HAL_CAN_Start+0x4c>

080032d2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80032d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d4:	4605      	mov	r5, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032d6:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032da:	682e      	ldr	r6, [r5, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032dc:	3801      	subs	r0, #1
 80032de:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032e0:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80032e2:	d83c      	bhi.n	800335e <HAL_CAN_AddTxMessage+0x8c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032e4:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80032e8:	f04f 0001 	mov.w	r0, #1
 80032ec:	d032      	beq.n	8003354 <HAL_CAN_AddTxMessage+0x82>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032ee:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032f2:	40a0      	lsls	r0, r4
 80032f4:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032f6:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 80032fa:	f104 0318 	add.w	r3, r4, #24
 80032fe:	bb10      	cbnz	r0, 8003346 <HAL_CAN_AddTxMessage+0x74>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003300:	6808      	ldr	r0, [r1, #0]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	ea47 5740 	orr.w	r7, r7, r0, lsl #21
 8003308:	50f7      	str	r7, [r6, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800330a:	0120      	lsls	r0, r4, #4
 800330c:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003310:	4406      	add	r6, r0

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);

      /* Return function status */
      return HAL_OK;
 8003312:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003314:	690d      	ldr	r5, [r1, #16]
 8003316:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800331a:	7d09      	ldrb	r1, [r1, #20]
 800331c:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800331e:	bf02      	ittt	eq
 8003320:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8003324:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8003328:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800332c:	6851      	ldr	r1, [r2, #4]
 800332e:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003338:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003344:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003346:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8003348:	4338      	orrs	r0, r7
 800334a:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	50f0      	str	r0, [r6, r3]
 8003352:	e7da      	b.n	800330a <HAL_CAN_AddTxMessage+0x38>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003354:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800335a:	626b      	str	r3, [r5, #36]	; 0x24
      return HAL_ERROR;
 800335c:	e7f2      	b.n	8003344 <HAL_CAN_AddTxMessage+0x72>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800335e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 8003360:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003366:	626b      	str	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 8003368:	e7ec      	b.n	8003344 <HAL_CAN_AddTxMessage+0x72>

0800336a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 800336a:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800336e:	3b01      	subs	r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d80c      	bhi.n	800338e <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003374:	6803      	ldr	r3, [r0, #0]
 8003376:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003378:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800337a:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800337c:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800337e:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 8003382:	bf48      	it	mi
 8003384:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	d502      	bpl.n	8003390 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 800338a:	3001      	adds	r0, #1
 800338c:	4770      	bx	lr
  uint32_t freelevel = 0U;
 800338e:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8003390:	4770      	bx	lr

08003392 <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003392:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003396:	3b01      	subs	r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d809      	bhi.n	80033b0 <HAL_CAN_IsTxMessagePending+0x1e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800339c:	6803      	ldr	r3, [r0, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	ea03 6381 	and.w	r3, r3, r1, lsl #26
 80033a4:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80033a8:	bf14      	ite	ne
 80033aa:	2001      	movne	r0, #1
 80033ac:	2000      	moveq	r0, #0
 80033ae:	4770      	bx	lr
  uint32_t status = 0U;
 80033b0:	2000      	movs	r0, #0
    }
  }

  /* Return status */
  return status;
}
 80033b2:	4770      	bx	lr

080033b4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	4604      	mov	r4, r0
 80033b8:	4608      	mov	r0, r1
  HAL_CAN_StateTypeDef state = hcan->State;
 80033ba:	f894 1020 	ldrb.w	r1, [r4, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033be:	3901      	subs	r1, #1
 80033c0:	2901      	cmp	r1, #1
 80033c2:	d871      	bhi.n	80034a8 <HAL_CAN_GetRxMessage+0xf4>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033c4:	6826      	ldr	r6, [r4, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033c6:	b940      	cbnz	r0, 80033da <HAL_CAN_GetRxMessage+0x26>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033c8:	68f1      	ldr	r1, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033ca:	0789      	lsls	r1, r1, #30
 80033cc:	d107      	bne.n	80033de <HAL_CAN_GetRxMessage+0x2a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033d6:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_ERROR;
 80033d8:	e05a      	b.n	8003490 <HAL_CAN_GetRxMessage+0xdc>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033da:	6931      	ldr	r1, [r6, #16]
 80033dc:	e7f5      	b.n	80033ca <HAL_CAN_GetRxMessage+0x16>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80033de:	eb06 1500 	add.w	r5, r6, r0, lsl #4
 80033e2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80033e6:	0101      	lsls	r1, r0, #4
 80033e8:	f007 0704 	and.w	r7, r7, #4
 80033ec:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80033ee:	2f00      	cmp	r7, #0
 80033f0:	d14f      	bne.n	8003492 <HAL_CAN_GetRxMessage+0xde>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80033f2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80033f6:	0d7f      	lsrs	r7, r7, #21
 80033f8:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80033fa:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80033fe:	440e      	add	r6, r1
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003400:	f007 0702 	and.w	r7, r7, #2
 8003404:	60d7      	str	r7, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003406:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 800340a:	073f      	lsls	r7, r7, #28
      pHeader->DLC = 8U;
 800340c:	bf4e      	itee	mi
 800340e:	2708      	movmi	r7, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003410:	f8d5 71b4 	ldrpl.w	r7, [r5, #436]	; 0x1b4
 8003414:	f007 070f 	andpl.w	r7, r7, #15
 8003418:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800341a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800341e:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003422:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003426:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003428:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800342a:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800342c:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8003430:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	440a      	add	r2, r1
 8003436:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800343a:	0a12      	lsrs	r2, r2, #8
 800343c:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800343e:	6822      	ldr	r2, [r4, #0]
 8003440:	440a      	add	r2, r1
 8003442:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003446:	0c12      	lsrs	r2, r2, #16
 8003448:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	440a      	add	r2, r1
 800344e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003452:	0e12      	lsrs	r2, r2, #24
 8003454:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	440a      	add	r2, r1
 800345a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800345e:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003460:	6822      	ldr	r2, [r4, #0]
 8003462:	440a      	add	r2, r1
 8003464:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003468:	0a12      	lsrs	r2, r2, #8
 800346a:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800346c:	6822      	ldr	r2, [r4, #0]
 800346e:	440a      	add	r2, r1
 8003470:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003474:	0c12      	lsrs	r2, r2, #16
 8003476:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	440a      	add	r2, r1
 800347c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003480:	0e12      	lsrs	r2, r2, #24
 8003482:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	b948      	cbnz	r0, 800349c <HAL_CAN_GetRxMessage+0xe8>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	f042 0220 	orr.w	r2, r2, #32
 800348e:	60da      	str	r2, [r3, #12]
  }
}
 8003490:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003492:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8003496:	08ff      	lsrs	r7, r7, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003498:	6057      	str	r7, [r2, #4]
 800349a:	e7ae      	b.n	80033fa <HAL_CAN_GetRxMessage+0x46>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800349c:	691a      	ldr	r2, [r3, #16]
    return HAL_OK;
 800349e:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80034a0:	f042 0220 	orr.w	r2, r2, #32
 80034a4:	611a      	str	r2, [r3, #16]
 80034a6:	e7f3      	b.n	8003490 <HAL_CAN_GetRxMessage+0xdc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ae:	e791      	b.n	80033d4 <HAL_CAN_GetRxMessage+0x20>

080034b0 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034b0:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034b4:	3b01      	subs	r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d807      	bhi.n	80034ca <HAL_CAN_GetRxFifoFillLevel+0x1a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80034ba:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0)
 80034bc:	b919      	cbnz	r1, 80034c6 <HAL_CAN_GetRxFifoFillLevel+0x16>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80034be:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80034c0:	f000 0003 	and.w	r0, r0, #3
 80034c4:	4770      	bx	lr
 80034c6:	6918      	ldr	r0, [r3, #16]
 80034c8:	e7fa      	b.n	80034c0 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 80034ca:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d0:	4907      	ldr	r1, [pc, #28]	; (80034f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034d2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034de:	0412      	lsls	r2, r2, #16
 80034e0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80034ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f4:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f6:	b530      	push	{r4, r5, lr}
 80034f8:	68dc      	ldr	r4, [r3, #12]
 80034fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003504:	2b04      	cmp	r3, #4
 8003506:	bf28      	it	cs
 8003508:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003510:	bf94      	ite	ls
 8003512:	2400      	movls	r4, #0
 8003514:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003516:	fa05 f303 	lsl.w	r3, r5, r3
 800351a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800351e:	40a5      	lsls	r5, r4
 8003520:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003526:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352c:	bfac      	ite	ge
 800352e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	4a07      	ldrlt	r2, [pc, #28]	; (8003550 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003534:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003538:	b2db      	uxtb	r3, r3
 800353a:	bfab      	itete	ge
 800353c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800354a:	bd30      	pop	{r4, r5, pc}
 800354c:	e000ed00 	.word	0xe000ed00
 8003550:	e000ed14 	.word	0xe000ed14

08003554 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003554:	2800      	cmp	r0, #0
 8003556:	db07      	blt.n	8003568 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003558:	2301      	movs	r3, #1
 800355a:	0941      	lsrs	r1, r0, #5
 800355c:	4a03      	ldr	r2, [pc, #12]	; (800356c <HAL_NVIC_EnableIRQ+0x18>)
 800355e:	f000 001f 	and.w	r0, r0, #31
 8003562:	4083      	lsls	r3, r0
 8003564:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e100 	.word	0xe000e100

08003570 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003570:	4603      	mov	r3, r0
{
 8003572:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8003574:	b340      	cbz	r0, 80035c8 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003576:	2114      	movs	r1, #20
 8003578:	6800      	ldr	r0, [r0, #0]
 800357a:	4a14      	ldr	r2, [pc, #80]	; (80035cc <HAL_DMA_Init+0x5c>)
 800357c:	4402      	add	r2, r0
 800357e:	fbb2 f2f1 	udiv	r2, r2, r1
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003586:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <HAL_DMA_Init+0x60>)
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003590:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8003594:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003596:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8003598:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	4322      	orrs	r2, r4
 800359c:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800359e:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035a6:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	4322      	orrs	r2, r4
 80035ac:	699c      	ldr	r4, [r3, #24]
 80035ae:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	69dc      	ldr	r4, [r3, #28]
 80035b2:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80035b4:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035b6:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b8:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035ba:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035bc:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035be:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80035c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 80035c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035c8:	2001      	movs	r0, #1
 80035ca:	e7fc      	b.n	80035c6 <HAL_DMA_Init+0x56>
 80035cc:	bffdfff8 	.word	0xbffdfff8
 80035d0:	40020000 	.word	0x40020000

080035d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d6:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035d8:	f890 0020 	ldrb.w	r0, [r0, #32]
 80035dc:	2801      	cmp	r0, #1
 80035de:	d036      	beq.n	800364e <HAL_DMA_Start_IT+0x7a>
 80035e0:	2001      	movs	r0, #1
 80035e2:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035e6:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 80035ea:	2400      	movs	r4, #0
 80035ec:	2801      	cmp	r0, #1
 80035ee:	b2c6      	uxtb	r6, r0
 80035f0:	f04f 0002 	mov.w	r0, #2
 80035f4:	d128      	bne.n	8003648 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f6:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035fa:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035fc:	682c      	ldr	r4, [r5, #0]
 80035fe:	6820      	ldr	r0, [r4, #0]
 8003600:	f020 0001 	bic.w	r0, r0, #1
 8003604:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003606:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 800360a:	fa06 f000 	lsl.w	r0, r6, r0
 800360e:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003610:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003612:	686b      	ldr	r3, [r5, #4]
 8003614:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8003616:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003618:	bf0b      	itete	eq
 800361a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800361c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800361e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003620:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003622:	b14b      	cbz	r3, 8003638 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800362c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6023      	str	r3, [r4, #0]
}
 8003636:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	f023 0304 	bic.w	r3, r3, #4
 800363e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	f043 030a 	orr.w	r3, r3, #10
 8003646:	e7f0      	b.n	800362a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8003648:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 800364c:	e7f3      	b.n	8003636 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 800364e:	2002      	movs	r0, #2
 8003650:	e7f1      	b.n	8003636 <HAL_DMA_Start_IT+0x62>
	...

08003654 <HAL_DMA_IRQHandler>:
{
 8003654:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003656:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003658:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800365a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800365c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800365e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003660:	4095      	lsls	r5, r2
 8003662:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8003664:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003666:	d032      	beq.n	80036ce <HAL_DMA_IRQHandler+0x7a>
 8003668:	074d      	lsls	r5, r1, #29
 800366a:	d530      	bpl.n	80036ce <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003670:	bf5e      	ittt	pl
 8003672:	681a      	ldrpl	r2, [r3, #0]
 8003674:	f022 0204 	bicpl.w	r2, r2, #4
 8003678:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800367a:	4a3e      	ldr	r2, [pc, #248]	; (8003774 <HAL_DMA_IRQHandler+0x120>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d019      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x60>
 8003680:	3214      	adds	r2, #20
 8003682:	4293      	cmp	r3, r2
 8003684:	d018      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x64>
 8003686:	3214      	adds	r2, #20
 8003688:	4293      	cmp	r3, r2
 800368a:	d017      	beq.n	80036bc <HAL_DMA_IRQHandler+0x68>
 800368c:	3214      	adds	r2, #20
 800368e:	4293      	cmp	r3, r2
 8003690:	d017      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x6e>
 8003692:	3214      	adds	r2, #20
 8003694:	4293      	cmp	r3, r2
 8003696:	d017      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x74>
 8003698:	3214      	adds	r2, #20
 800369a:	4293      	cmp	r3, r2
 800369c:	bf0c      	ite	eq
 800369e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80036a2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80036a6:	4a34      	ldr	r2, [pc, #208]	; (8003778 <HAL_DMA_IRQHandler+0x124>)
 80036a8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80036aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d05e      	beq.n	800376e <HAL_DMA_IRQHandler+0x11a>
}
 80036b0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80036b2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80036b4:	2304      	movs	r3, #4
 80036b6:	e7f6      	b.n	80036a6 <HAL_DMA_IRQHandler+0x52>
 80036b8:	2340      	movs	r3, #64	; 0x40
 80036ba:	e7f4      	b.n	80036a6 <HAL_DMA_IRQHandler+0x52>
 80036bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c0:	e7f1      	b.n	80036a6 <HAL_DMA_IRQHandler+0x52>
 80036c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036c6:	e7ee      	b.n	80036a6 <HAL_DMA_IRQHandler+0x52>
 80036c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036cc:	e7eb      	b.n	80036a6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036ce:	2502      	movs	r5, #2
 80036d0:	4095      	lsls	r5, r2
 80036d2:	4225      	tst	r5, r4
 80036d4:	d035      	beq.n	8003742 <HAL_DMA_IRQHandler+0xee>
 80036d6:	078d      	lsls	r5, r1, #30
 80036d8:	d533      	bpl.n	8003742 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	0694      	lsls	r4, r2, #26
 80036de:	d406      	bmi.n	80036ee <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f022 020a 	bic.w	r2, r2, #10
 80036e6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80036e8:	2201      	movs	r2, #1
 80036ea:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80036ee:	4a21      	ldr	r2, [pc, #132]	; (8003774 <HAL_DMA_IRQHandler+0x120>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d019      	beq.n	8003728 <HAL_DMA_IRQHandler+0xd4>
 80036f4:	3214      	adds	r2, #20
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_IRQHandler+0xd8>
 80036fa:	3214      	adds	r2, #20
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d017      	beq.n	8003730 <HAL_DMA_IRQHandler+0xdc>
 8003700:	3214      	adds	r2, #20
 8003702:	4293      	cmp	r3, r2
 8003704:	d017      	beq.n	8003736 <HAL_DMA_IRQHandler+0xe2>
 8003706:	3214      	adds	r2, #20
 8003708:	4293      	cmp	r3, r2
 800370a:	d017      	beq.n	800373c <HAL_DMA_IRQHandler+0xe8>
 800370c:	3214      	adds	r2, #20
 800370e:	4293      	cmp	r3, r2
 8003710:	bf0c      	ite	eq
 8003712:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003716:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_DMA_IRQHandler+0x124>)
 800371c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800371e:	2300      	movs	r3, #0
 8003720:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003724:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003726:	e7c1      	b.n	80036ac <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003728:	2302      	movs	r3, #2
 800372a:	e7f6      	b.n	800371a <HAL_DMA_IRQHandler+0xc6>
 800372c:	2320      	movs	r3, #32
 800372e:	e7f4      	b.n	800371a <HAL_DMA_IRQHandler+0xc6>
 8003730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003734:	e7f1      	b.n	800371a <HAL_DMA_IRQHandler+0xc6>
 8003736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800373a:	e7ee      	b.n	800371a <HAL_DMA_IRQHandler+0xc6>
 800373c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003740:	e7eb      	b.n	800371a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003742:	2508      	movs	r5, #8
 8003744:	4095      	lsls	r5, r2
 8003746:	4225      	tst	r5, r4
 8003748:	d011      	beq.n	800376e <HAL_DMA_IRQHandler+0x11a>
 800374a:	0709      	lsls	r1, r1, #28
 800374c:	d50f      	bpl.n	800376e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	f021 010e 	bic.w	r1, r1, #14
 8003754:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003756:	2301      	movs	r3, #1
 8003758:	fa03 f202 	lsl.w	r2, r3, r2
 800375c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800375e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003760:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003764:	2300      	movs	r3, #0
 8003766:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800376a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800376c:	e79e      	b.n	80036ac <HAL_DMA_IRQHandler+0x58>
}
 800376e:	bc70      	pop	{r4, r5, r6}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40020008 	.word	0x40020008
 8003778:	40020000 	.word	0x40020000

0800377c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800377c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003780:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003782:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003784:	4f64      	ldr	r7, [pc, #400]	; (8003918 <HAL_GPIO_Init+0x19c>)
 8003786:	4b65      	ldr	r3, [pc, #404]	; (800391c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8003788:	f8df c194 	ldr.w	ip, [pc, #404]	; 8003920 <HAL_GPIO_Init+0x1a4>
 800378c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8003924 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003790:	680d      	ldr	r5, [r1, #0]
 8003792:	fa35 f406 	lsrs.w	r4, r5, r6
 8003796:	d102      	bne.n	800379e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8003798:	b003      	add	sp, #12
 800379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800379e:	f04f 0801 	mov.w	r8, #1
 80037a2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80037aa:	ea38 0505 	bics.w	r5, r8, r5
 80037ae:	d17a      	bne.n	80038a6 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 80037b0:	684d      	ldr	r5, [r1, #4]
 80037b2:	2d03      	cmp	r5, #3
 80037b4:	d807      	bhi.n	80037c6 <HAL_GPIO_Init+0x4a>
 80037b6:	3d01      	subs	r5, #1
 80037b8:	2d02      	cmp	r5, #2
 80037ba:	f200 8087 	bhi.w	80038cc <HAL_GPIO_Init+0x150>
 80037be:	e8df f005 	tbb	[pc, r5]
 80037c2:	9a95      	.short	0x9a95
 80037c4:	a0          	.byte	0xa0
 80037c5:	00          	.byte	0x00
 80037c6:	2d12      	cmp	r5, #18
 80037c8:	f000 8098 	beq.w	80038fc <HAL_GPIO_Init+0x180>
 80037cc:	d86d      	bhi.n	80038aa <HAL_GPIO_Init+0x12e>
 80037ce:	2d11      	cmp	r5, #17
 80037d0:	f000 808e 	beq.w	80038f0 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037d4:	2cff      	cmp	r4, #255	; 0xff
 80037d6:	bf98      	it	ls
 80037d8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037da:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037de:	bf88      	it	hi
 80037e0:	f100 0a04 	addhi.w	sl, r0, #4
 80037e4:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037e8:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037ec:	bf88      	it	hi
 80037ee:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037f0:	fa09 fb05 	lsl.w	fp, r9, r5
 80037f4:	ea28 080b 	bic.w	r8, r8, fp
 80037f8:	fa02 f505 	lsl.w	r5, r2, r5
 80037fc:	ea48 0505 	orr.w	r5, r8, r5
 8003800:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003804:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003808:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800380c:	d04b      	beq.n	80038a6 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800380e:	69bd      	ldr	r5, [r7, #24]
 8003810:	f026 0803 	bic.w	r8, r6, #3
 8003814:	f045 0501 	orr.w	r5, r5, #1
 8003818:	61bd      	str	r5, [r7, #24]
 800381a:	69bd      	ldr	r5, [r7, #24]
 800381c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003820:	f005 0501 	and.w	r5, r5, #1
 8003824:	9501      	str	r5, [sp, #4]
 8003826:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800382a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800382e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003830:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003834:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003838:	fa09 f90b 	lsl.w	r9, r9, fp
 800383c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003840:	4d39      	ldr	r5, [pc, #228]	; (8003928 <HAL_GPIO_Init+0x1ac>)
 8003842:	42a8      	cmp	r0, r5
 8003844:	d061      	beq.n	800390a <HAL_GPIO_Init+0x18e>
 8003846:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800384a:	42a8      	cmp	r0, r5
 800384c:	d05f      	beq.n	800390e <HAL_GPIO_Init+0x192>
 800384e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003852:	42a8      	cmp	r0, r5
 8003854:	d05d      	beq.n	8003912 <HAL_GPIO_Init+0x196>
 8003856:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800385a:	42a8      	cmp	r0, r5
 800385c:	bf0c      	ite	eq
 800385e:	2503      	moveq	r5, #3
 8003860:	2504      	movne	r5, #4
 8003862:	fa05 f50b 	lsl.w	r5, r5, fp
 8003866:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800386a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800386e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003870:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003874:	bf14      	ite	ne
 8003876:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003878:	43a5      	biceq	r5, r4
 800387a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800387c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800387e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003882:	bf14      	ite	ne
 8003884:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003886:	43a5      	biceq	r5, r4
 8003888:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800388a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800388c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003890:	bf14      	ite	ne
 8003892:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003894:	43a5      	biceq	r5, r4
 8003896:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8003898:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800389a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800389e:	bf14      	ite	ne
 80038a0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038a2:	43a5      	biceq	r5, r4
 80038a4:	601d      	str	r5, [r3, #0]
	position++;
 80038a6:	3601      	adds	r6, #1
 80038a8:	e772      	b.n	8003790 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80038aa:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800392c <HAL_GPIO_Init+0x1b0>
 80038ae:	454d      	cmp	r5, r9
 80038b0:	d00c      	beq.n	80038cc <HAL_GPIO_Init+0x150>
 80038b2:	d817      	bhi.n	80038e4 <HAL_GPIO_Init+0x168>
 80038b4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80038b8:	454d      	cmp	r5, r9
 80038ba:	d007      	beq.n	80038cc <HAL_GPIO_Init+0x150>
 80038bc:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80038c0:	454d      	cmp	r5, r9
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x150>
 80038c4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80038c8:	454d      	cmp	r5, r9
 80038ca:	d183      	bne.n	80037d4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038cc:	688a      	ldr	r2, [r1, #8]
 80038ce:	b1d2      	cbz	r2, 8003906 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038d0:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80038d2:	bf08      	it	eq
 80038d4:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038d8:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80038dc:	bf18      	it	ne
 80038de:	f8c0 8014 	strne.w	r8, [r0, #20]
 80038e2:	e777      	b.n	80037d4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80038e4:	4565      	cmp	r5, ip
 80038e6:	d0f1      	beq.n	80038cc <HAL_GPIO_Init+0x150>
 80038e8:	4575      	cmp	r5, lr
 80038ea:	e7ee      	b.n	80038ca <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038ec:	68ca      	ldr	r2, [r1, #12]
          break;
 80038ee:	e771      	b.n	80037d4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038f0:	68ca      	ldr	r2, [r1, #12]
 80038f2:	3204      	adds	r2, #4
          break;
 80038f4:	e76e      	b.n	80037d4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038f6:	68ca      	ldr	r2, [r1, #12]
 80038f8:	3208      	adds	r2, #8
          break;
 80038fa:	e76b      	b.n	80037d4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038fc:	68ca      	ldr	r2, [r1, #12]
 80038fe:	320c      	adds	r2, #12
          break;
 8003900:	e768      	b.n	80037d4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003902:	2200      	movs	r2, #0
 8003904:	e766      	b.n	80037d4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003906:	2204      	movs	r2, #4
 8003908:	e764      	b.n	80037d4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800390a:	2500      	movs	r5, #0
 800390c:	e7a9      	b.n	8003862 <HAL_GPIO_Init+0xe6>
 800390e:	2501      	movs	r5, #1
 8003910:	e7a7      	b.n	8003862 <HAL_GPIO_Init+0xe6>
 8003912:	2502      	movs	r5, #2
 8003914:	e7a5      	b.n	8003862 <HAL_GPIO_Init+0xe6>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40010400 	.word	0x40010400
 8003920:	10310000 	.word	0x10310000
 8003924:	10320000 	.word	0x10320000
 8003928:	40010800 	.word	0x40010800
 800392c:	10220000 	.word	0x10220000

08003930 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003930:	b10a      	cbz	r2, 8003936 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003932:	6101      	str	r1, [r0, #16]
  }
}
 8003934:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003936:	0409      	lsls	r1, r1, #16
 8003938:	e7fb      	b.n	8003932 <HAL_GPIO_WritePin+0x2>
	...

0800393c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800393e:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003940:	6951      	ldr	r1, [r2, #20]
 8003942:	4201      	tst	r1, r0
 8003944:	d002      	beq.n	800394c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003946:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003948:	f7fe f984 	bl	8001c54 <HAL_GPIO_EXTI_Callback>
  }
}
 800394c:	bd08      	pop	{r3, pc}
 800394e:	bf00      	nop
 8003950:	40010400 	.word	0x40010400

08003954 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003954:	6801      	ldr	r1, [r0, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	694b      	ldr	r3, [r1, #20]
 800395a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800395e:	d010      	beq.n	8003982 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003960:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003964:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003966:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003968:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800396a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003972:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
 8003980:	4770      	bx	lr
  }
  return HAL_OK;
 8003982:	4618      	mov	r0, r3
}
 8003984:	4770      	bx	lr

08003986 <I2C_WaitOnFlagUntilTimeout>:
{
 8003986:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800398a:	4606      	mov	r6, r0
 800398c:	460f      	mov	r7, r1
 800398e:	4691      	mov	r9, r2
 8003990:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003992:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003996:	6833      	ldr	r3, [r6, #0]
 8003998:	f1ba 0f01 	cmp.w	sl, #1
 800399c:	bf0c      	ite	eq
 800399e:	695c      	ldreq	r4, [r3, #20]
 80039a0:	699c      	ldrne	r4, [r3, #24]
 80039a2:	ea27 0404 	bic.w	r4, r7, r4
 80039a6:	b2a4      	uxth	r4, r4
 80039a8:	fab4 f484 	clz	r4, r4
 80039ac:	0964      	lsrs	r4, r4, #5
 80039ae:	45a1      	cmp	r9, r4
 80039b0:	d001      	beq.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80039b2:	2000      	movs	r0, #0
 80039b4:	e025      	b.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80039b6:	1c6a      	adds	r2, r5, #1
 80039b8:	d0ee      	beq.n	8003998 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7ff f931 	bl	8002c20 <HAL_GetTick>
 80039be:	9b08      	ldr	r3, [sp, #32]
 80039c0:	1ac0      	subs	r0, r0, r3
 80039c2:	42a8      	cmp	r0, r5
 80039c4:	d801      	bhi.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x44>
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	d1e5      	bne.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039ca:	6833      	ldr	r3, [r6, #0]
 80039cc:	f1ba 0f01 	cmp.w	sl, #1
 80039d0:	bf0c      	ite	eq
 80039d2:	695b      	ldreq	r3, [r3, #20]
 80039d4:	699b      	ldrne	r3, [r3, #24]
 80039d6:	ea27 0303 	bic.w	r3, r7, r3
 80039da:	b29b      	uxth	r3, r3
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	4599      	cmp	r9, r3
 80039e4:	d1d7      	bne.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039e6:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80039e8:	2220      	movs	r2, #32
          return HAL_ERROR;
 80039ea:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039ec:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039ee:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039f2:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039f6:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80039f8:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	f042 0220 	orr.w	r2, r2, #32
 8003a00:	6432      	str	r2, [r6, #64]	; 0x40
}
 8003a02:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	460f      	mov	r7, r1
 8003a0e:	4616      	mov	r6, r2
 8003a10:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a12:	6825      	ldr	r5, [r4, #0]
 8003a14:	6968      	ldr	r0, [r5, #20]
 8003a16:	ea27 0000 	bic.w	r0, r7, r0
 8003a1a:	b280      	uxth	r0, r0
 8003a1c:	b1b8      	cbz	r0, 8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a1e:	696b      	ldr	r3, [r5, #20]
 8003a20:	055a      	lsls	r2, r3, #21
 8003a22:	d516      	bpl.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a26:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a2c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a2e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003a32:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a42:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 8003a46:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a48:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003a4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	1c73      	adds	r3, r6, #1
 8003a54:	d0de      	beq.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a56:	f7ff f8e3 	bl	8002c20 <HAL_GetTick>
 8003a5a:	eba0 0008 	sub.w	r0, r0, r8
 8003a5e:	42b0      	cmp	r0, r6
 8003a60:	d801      	bhi.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8003a62:	2e00      	cmp	r6, #0
 8003a64:	d1d5      	bne.n	8003a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	ea27 0202 	bic.w	r2, r7, r2
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	2a00      	cmp	r2, #0
 8003a72:	d0ce      	beq.n	8003a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a74:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a78:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a84:	f042 0220 	orr.w	r2, r2, #32
 8003a88:	e7dd      	b.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003a8a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003a8a:	b570      	push	{r4, r5, r6, lr}
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	460d      	mov	r5, r1
 8003a90:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	061b      	lsls	r3, r3, #24
 8003a98:	d501      	bpl.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003a9a:	2000      	movs	r0, #0
}
 8003a9c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f7ff ff58 	bl	8003954 <I2C_IsAcknowledgeFailed>
 8003aa4:	b9c8      	cbnz	r0, 8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003aa6:	1c6a      	adds	r2, r5, #1
 8003aa8:	d0f3      	beq.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7ff f8b9 	bl	8002c20 <HAL_GetTick>
 8003aae:	1b80      	subs	r0, r0, r6
 8003ab0:	42a8      	cmp	r0, r5
 8003ab2:	d801      	bhi.n	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003ab4:	2d00      	cmp	r5, #0
 8003ab6:	d1ec      	bne.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003ac0:	d1e7      	bne.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac4:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ac6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ace:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003ad0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad4:	f042 0220 	orr.w	r2, r2, #32
 8003ad8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003ada:	2001      	movs	r0, #1
 8003adc:	e7de      	b.n	8003a9c <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08003ae0 <I2C_RequestMemoryWrite>:
{
 8003ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ae4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae6:	6802      	ldr	r2, [r0, #0]
{
 8003ae8:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aea:	6813      	ldr	r3, [r2, #0]
{
 8003aec:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af2:	6013      	str	r3, [r2, #0]
{
 8003af4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003af8:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afa:	463b      	mov	r3, r7
 8003afc:	2200      	movs	r2, #0
 8003afe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b02:	f8cd 8000 	str.w	r8, [sp]
{
 8003b06:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b08:	f7ff ff3d 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	b138      	cbz	r0, 8003b20 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	05db      	lsls	r3, r3, #23
 8003b14:	d502      	bpl.n	8003b1c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b1a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003b1c:	2003      	movs	r0, #3
 8003b1e:	e00a      	b.n	8003b36 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b20:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003b24:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b26:	463a      	mov	r2, r7
 8003b28:	4643      	mov	r3, r8
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	4917      	ldr	r1, [pc, #92]	; (8003b8c <I2C_RequestMemoryWrite+0xac>)
 8003b2e:	f7ff ff6a 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b32:	b118      	cbz	r0, 8003b3c <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8003b34:	2001      	movs	r0, #1
}
 8003b36:	b005      	add	sp, #20
 8003b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	9003      	str	r0, [sp, #12]
 8003b40:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b42:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b44:	9203      	str	r2, [sp, #12]
 8003b46:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b48:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b50:	f7ff ff9b 	bl	8003a8a <I2C_WaitOnTXEFlagUntilTimeout>
 8003b54:	b140      	cbz	r0, 8003b68 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b58:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5a:	bf01      	itttt	eq
 8003b5c:	6822      	ldreq	r2, [r4, #0]
 8003b5e:	6813      	ldreq	r3, [r2, #0]
 8003b60:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003b64:	6013      	streq	r3, [r2, #0]
 8003b66:	e7e5      	b.n	8003b34 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b68:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b6e:	d102      	bne.n	8003b76 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b70:	b2ed      	uxtb	r5, r5
 8003b72:	611d      	str	r5, [r3, #16]
 8003b74:	e7df      	b.n	8003b36 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b76:	0a2a      	lsrs	r2, r5, #8
 8003b78:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	4639      	mov	r1, r7
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f7ff ff83 	bl	8003a8a <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d1e6      	bne.n	8003b56 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	e7f1      	b.n	8003b70 <I2C_RequestMemoryWrite+0x90>
 8003b8c:	00010002 	.word	0x00010002

08003b90 <I2C_RequestMemoryRead>:
{
 8003b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	469a      	mov	sl, r3
 8003b96:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	6803      	ldr	r3, [r0, #0]
{
 8003b9c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	681a      	ldr	r2, [r3, #0]
{
 8003ba0:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ba6:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba8:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003baa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb2:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8cd 8000 	str.w	r8, [sp]
{
 8003bbc:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	f7ff fee2 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	b148      	cbz	r0, 8003bda <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc6:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc8:	05db      	lsls	r3, r3, #23
 8003bca:	d502      	bpl.n	8003bd2 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003bd2:	2003      	movs	r0, #3
}
 8003bd4:	b004      	add	sp, #16
 8003bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bda:	fa5f f986 	uxtb.w	r9, r6
 8003bde:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003be2:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be4:	463a      	mov	r2, r7
 8003be6:	4643      	mov	r3, r8
 8003be8:	4620      	mov	r0, r4
 8003bea:	4929      	ldr	r1, [pc, #164]	; (8003c90 <I2C_RequestMemoryRead+0x100>)
 8003bec:	f7ff ff0b 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf0:	b108      	cbz	r0, 8003bf6 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	e7ee      	b.n	8003bd4 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	9003      	str	r0, [sp, #12]
 8003bfa:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfc:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	9203      	str	r2, [sp, #12]
 8003c00:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c02:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c04:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c06:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c08:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	f7ff ff3e 	bl	8003a8a <I2C_WaitOnTXEFlagUntilTimeout>
 8003c0e:	b140      	cbz	r0, 8003c22 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c12:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	bf01      	itttt	eq
 8003c16:	6822      	ldreq	r2, [r4, #0]
 8003c18:	6813      	ldreq	r3, [r2, #0]
 8003c1a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003c1e:	6013      	streq	r3, [r2, #0]
 8003c20:	e7e7      	b.n	8003bf2 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c22:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c26:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c28:	d11a      	bne.n	8003c60 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c2a:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	4639      	mov	r1, r7
 8003c30:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c32:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c34:	f7ff ff29 	bl	8003a8a <I2C_WaitOnTXEFlagUntilTimeout>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d1e8      	bne.n	8003c10 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3e:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c40:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c42:	680b      	ldr	r3, [r1, #0]
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c50:	f8cd 8000 	str.w	r8, [sp]
 8003c54:	f7ff fe97 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	b160      	cbz	r0, 8003c76 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c5c:	6813      	ldr	r3, [r2, #0]
 8003c5e:	e7b3      	b.n	8003bc8 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c60:	0a2a      	lsrs	r2, r5, #8
 8003c62:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c64:	4639      	mov	r1, r7
 8003c66:	4642      	mov	r2, r8
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff ff0e 	bl	8003a8a <I2C_WaitOnTXEFlagUntilTimeout>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d1ce      	bne.n	8003c10 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	e7d9      	b.n	8003c2a <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c76:	f049 0301 	orr.w	r3, r9, #1
 8003c7a:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4643      	mov	r3, r8
 8003c80:	463a      	mov	r2, r7
 8003c82:	4903      	ldr	r1, [pc, #12]	; (8003c90 <I2C_RequestMemoryRead+0x100>)
 8003c84:	f7ff febf 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003c88:	3800      	subs	r0, #0
 8003c8a:	bf18      	it	ne
 8003c8c:	2001      	movne	r0, #1
 8003c8e:	e7a1      	b.n	8003bd4 <I2C_RequestMemoryRead+0x44>
 8003c90:	00010002 	.word	0x00010002

08003c94 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	4604      	mov	r4, r0
 8003c98:	460d      	mov	r5, r1
 8003c9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	075b      	lsls	r3, r3, #29
 8003ca2:	d501      	bpl.n	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003ca4:	2000      	movs	r0, #0
}
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff fe53 	bl	8003954 <I2C_IsAcknowledgeFailed>
 8003cae:	b9c8      	cbnz	r0, 8003ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003cb0:	1c6a      	adds	r2, r5, #1
 8003cb2:	d0f3      	beq.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb4:	f7fe ffb4 	bl	8002c20 <HAL_GetTick>
 8003cb8:	1b80      	subs	r0, r0, r6
 8003cba:	42a8      	cmp	r0, r5
 8003cbc:	d801      	bhi.n	8003cc2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	d1ec      	bne.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f013 0304 	ands.w	r3, r3, #4
 8003cca:	d1e7      	bne.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cce:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003cda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cde:	f042 0220 	orr.w	r2, r2, #32
 8003ce2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e7de      	b.n	8003ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08003ce8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4604      	mov	r4, r0
 8003cec:	460d      	mov	r5, r1
 8003cee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cf0:	6821      	ldr	r1, [r4, #0]
 8003cf2:	694b      	ldr	r3, [r1, #20]
 8003cf4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003cf8:	d001      	beq.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e010      	b.n	8003d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cfe:	694a      	ldr	r2, [r1, #20]
 8003d00:	06d2      	lsls	r2, r2, #27
 8003d02:	d50e      	bpl.n	8003d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d04:	f06f 0210 	mvn.w	r2, #16
 8003d08:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d0a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d16:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003d18:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fe ff7d 	bl	8002c20 <HAL_GetTick>
 8003d26:	1b80      	subs	r0, r0, r6
 8003d28:	42a8      	cmp	r0, r5
 8003d2a:	d801      	bhi.n	8003d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	d1df      	bne.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003d38:	d1da      	bne.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d3a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d48:	f042 0220 	orr.w	r2, r2, #32
 8003d4c:	e7e4      	b.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08003d50 <HAL_I2C_Init>:
{
 8003d50:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003d52:	4604      	mov	r4, r0
 8003d54:	b908      	cbnz	r0, 8003d5a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
}
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d62:	b91b      	cbnz	r3, 8003d6c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003d64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003d68:	f7fe fd44 	bl	80027f4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	2324      	movs	r3, #36	; 0x24
 8003d6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d8a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f000 fcb4 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d90:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <HAL_I2C_Init+0x140>)
 8003d92:	6865      	ldr	r5, [r4, #4]
 8003d94:	429d      	cmp	r5, r3
 8003d96:	bf94      	ite	ls
 8003d98:	4b3e      	ldrls	r3, [pc, #248]	; (8003e94 <HAL_I2C_Init+0x144>)
 8003d9a:	4b3f      	ldrhi	r3, [pc, #252]	; (8003e98 <HAL_I2C_Init+0x148>)
 8003d9c:	4298      	cmp	r0, r3
 8003d9e:	bf8c      	ite	hi
 8003da0:	2300      	movhi	r3, #0
 8003da2:	2301      	movls	r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1d6      	bne.n	8003d56 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003da8:	4e39      	ldr	r6, [pc, #228]	; (8003e90 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003daa:	4b3c      	ldr	r3, [pc, #240]	; (8003e9c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dac:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003db2:	bf88      	it	hi
 8003db4:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003db8:	6822      	ldr	r2, [r4, #0]
 8003dba:	6851      	ldr	r1, [r2, #4]
 8003dbc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003dc0:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dc4:	bf82      	ittt	hi
 8003dc6:	4373      	mulhi	r3, r6
 8003dc8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003dcc:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dd0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dd2:	6a11      	ldr	r1, [r2, #32]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dde:	69d1      	ldr	r1, [r2, #28]
 8003de0:	1e43      	subs	r3, r0, #1
 8003de2:	482b      	ldr	r0, [pc, #172]	; (8003e90 <HAL_I2C_Init+0x140>)
 8003de4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003de8:	4285      	cmp	r5, r0
 8003dea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003dee:	d832      	bhi.n	8003e56 <HAL_I2C_Init+0x106>
 8003df0:	006d      	lsls	r5, r5, #1
 8003df2:	fbb3 f3f5 	udiv	r3, r3, r5
 8003df6:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	4203      	tst	r3, r0
 8003dfe:	d042      	beq.n	8003e86 <HAL_I2C_Init+0x136>
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	4319      	orrs	r1, r3
 8003e06:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e08:	6811      	ldr	r1, [r2, #0]
 8003e0a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003e0e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003e12:	4303      	orrs	r3, r0
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e18:	6891      	ldr	r1, [r2, #8]
 8003e1a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003e1e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003e22:	4303      	orrs	r3, r0
 8003e24:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e2c:	68d1      	ldr	r1, [r2, #12]
 8003e2e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003e32:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003e36:	4303      	orrs	r3, r0
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003e3c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e48:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e4e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003e54:	e780      	b.n	8003d58 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e56:	68a0      	ldr	r0, [r4, #8]
 8003e58:	b950      	cbnz	r0, 8003e70 <HAL_I2C_Init+0x120>
 8003e5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e5e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003e62:	3301      	adds	r3, #1
 8003e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e68:	b17b      	cbz	r3, 8003e8a <HAL_I2C_Init+0x13a>
 8003e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6e:	e7c9      	b.n	8003e04 <HAL_I2C_Init+0xb4>
 8003e70:	2019      	movs	r0, #25
 8003e72:	4368      	muls	r0, r5
 8003e74:	fbb3 f3f0 	udiv	r3, r3, r0
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	b123      	cbz	r3, 8003e8a <HAL_I2C_Init+0x13a>
 8003e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e84:	e7be      	b.n	8003e04 <HAL_I2C_Init+0xb4>
 8003e86:	2304      	movs	r3, #4
 8003e88:	e7bc      	b.n	8003e04 <HAL_I2C_Init+0xb4>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e7ba      	b.n	8003e04 <HAL_I2C_Init+0xb4>
 8003e8e:	bf00      	nop
 8003e90:	000186a0 	.word	0x000186a0
 8003e94:	001e847f 	.word	0x001e847f
 8003e98:	003d08ff 	.word	0x003d08ff
 8003e9c:	000f4240 	.word	0x000f4240

08003ea0 <HAL_I2C_Mem_Write>:
{
 8003ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	4699      	mov	r9, r3
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	4690      	mov	r8, r2
 8003eac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003eae:	f7fe feb7 	bl	8002c20 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003eb6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d003      	beq.n	8003ec4 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8003ebc:	2002      	movs	r0, #2
}
 8003ebe:	b003      	add	sp, #12
 8003ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ec4:	9000      	str	r0, [sp, #0]
 8003ec6:	2319      	movs	r3, #25
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4620      	mov	r0, r4
 8003ecc:	493a      	ldr	r1, [pc, #232]	; (8003fb8 <HAL_I2C_Mem_Write+0x118>)
 8003ece:	f7ff fd5a 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d1f2      	bne.n	8003ebc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8003ed6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d0ee      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x1c>
 8003ede:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee0:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003ee2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee6:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ee8:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eea:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003eec:	bf58      	it	pl
 8003eee:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ef0:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8003ef2:	bf5c      	itt	pl
 8003ef4:	f043 0301 	orrpl.w	r3, r3, #1
 8003ef8:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003efa:	6803      	ldr	r3, [r0, #0]
 8003efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f00:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f02:	2321      	movs	r3, #33	; 0x21
 8003f04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f14:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8003f16:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f18:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f1c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8003f20:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f24:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f26:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <HAL_I2C_Mem_Write+0x11c>)
 8003f28:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	f7ff fdd8 	bl	8003ae0 <I2C_RequestMemoryWrite>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d02a      	beq.n	8003f8a <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8003f34:	2001      	movs	r0, #1
 8003f36:	e7c2      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f38:	f7ff fda7 	bl	8003a8a <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3c:	b140      	cbz	r0, 8003f50 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f40:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	bf01      	itttt	eq
 8003f44:	6822      	ldreq	r2, [r4, #0]
 8003f46:	6813      	ldreq	r3, [r2, #0]
 8003f48:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003f4c:	6013      	streq	r3, [r2, #0]
 8003f4e:	e7f1      	b.n	8003f34 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f52:	6827      	ldr	r7, [r4, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003f5a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003f5c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003f5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003f60:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003f62:	3a01      	subs	r2, #1
 8003f64:	b292      	uxth	r2, r2
 8003f66:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f68:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003f6a:	1e48      	subs	r0, r1, #1
 8003f6c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003f70:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f72:	d50a      	bpl.n	8003f8a <HAL_I2C_Mem_Write+0xea>
 8003f74:	b148      	cbz	r0, 8003f8a <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f76:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8003f78:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003f7c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003f7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003f80:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003f86:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003f88:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8c:	462a      	mov	r2, r5
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1d0      	bne.n	8003f38 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f96:	f7ff fe7d 	bl	8003c94 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d1cf      	bne.n	8003f3e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8003faa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8003fb6:	e782      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e>
 8003fb8:	00100002 	.word	0x00100002
 8003fbc:	ffff0000 	.word	0xffff0000

08003fc0 <HAL_I2C_Mem_Read>:
{
 8003fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fc4:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8003fc6:	2300      	movs	r3, #0
{
 8003fc8:	4604      	mov	r4, r0
 8003fca:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8003fcc:	9303      	str	r3, [sp, #12]
{
 8003fce:	460d      	mov	r5, r1
 8003fd0:	4690      	mov	r8, r2
 8003fd2:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8003fd4:	f7fe fe24 	bl	8002c20 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d004      	beq.n	8003fec <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8003fe2:	2502      	movs	r5, #2
}
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	b009      	add	sp, #36	; 0x24
 8003fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fec:	9000      	str	r0, [sp, #0]
 8003fee:	2319      	movs	r3, #25
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	498d      	ldr	r1, [pc, #564]	; (800422c <HAL_I2C_Mem_Read+0x26c>)
 8003ff6:	f7ff fcc6 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d1f1      	bne.n	8003fe2 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8003ffe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d0ed      	beq.n	8003fe2 <HAL_I2C_Mem_Read+0x22>
 8004006:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004008:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800400a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800400e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004010:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004012:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8004014:	bf58      	it	pl
 8004016:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004018:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 800401a:	bf5c      	itt	pl
 800401c:	f043 0301 	orrpl.w	r3, r3, #1
 8004020:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004022:	6803      	ldr	r3, [r0, #0]
 8004024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004028:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800402a:	2322      	movs	r3, #34	; 0x22
 800402c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004030:	2340      	movs	r3, #64	; 0x40
 8004032:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004036:	2300      	movs	r3, #0
 8004038:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800403a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800403c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800403e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004040:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004044:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8004048:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800404a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800404c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404e:	4b78      	ldr	r3, [pc, #480]	; (8004230 <HAL_I2C_Mem_Read+0x270>)
 8004050:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004052:	464b      	mov	r3, r9
 8004054:	f7ff fd9c 	bl	8003b90 <I2C_RequestMemoryRead>
 8004058:	4605      	mov	r5, r0
 800405a:	b108      	cbz	r0, 8004060 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 800405c:	2501      	movs	r5, #1
 800405e:	e7c1      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8004060:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8004064:	b9c2      	cbnz	r2, 8004098 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004066:	9004      	str	r0, [sp, #16]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	9204      	str	r2, [sp, #16]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	9204      	str	r2, [sp, #16]
 8004070:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800407a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8004234 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800407e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8004238 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8004082:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d137      	bne.n	80040f8 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8004088:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800408a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800408e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004092:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8004096:	e7a5      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8004098:	2a01      	cmp	r2, #1
 800409a:	d111      	bne.n	80040c0 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	9005      	str	r0, [sp, #20]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	9205      	str	r2, [sp, #20]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	9205      	str	r2, [sp, #20]
 80040b2:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040bc:	b662      	cpsie	i
}
 80040be:	e7dc      	b.n	800407a <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80040c0:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c2:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80040c4:	d10e      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040cc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	9006      	str	r0, [sp, #24]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	9206      	str	r2, [sp, #24]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	9206      	str	r2, [sp, #24]
 80040da:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e2:	e7ea      	b.n	80040ba <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ea:	9007      	str	r0, [sp, #28]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	9207      	str	r2, [sp, #28]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	9307      	str	r3, [sp, #28]
 80040f4:	9b07      	ldr	r3, [sp, #28]
 80040f6:	e7c0      	b.n	800407a <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d878      	bhi.n	80041ee <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d115      	bne.n	800412c <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004100:	4632      	mov	r2, r6
 8004102:	4639      	mov	r1, r7
 8004104:	4620      	mov	r0, r4
 8004106:	f7ff fdef 	bl	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800410a:	2800      	cmp	r0, #0
 800410c:	d1a6      	bne.n	800405c <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004114:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004118:	3301      	adds	r3, #1
 800411a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800411c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004122:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004124:	3b01      	subs	r3, #1
 8004126:	b29b      	uxth	r3, r3
 8004128:	8563      	strh	r3, [r4, #42]	; 0x2a
 800412a:	e7aa      	b.n	8004082 <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 800412c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	463b      	mov	r3, r7
 8004134:	4641      	mov	r1, r8
 8004136:	4620      	mov	r0, r4
 8004138:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 800413a:	d118      	bne.n	800416e <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800413c:	f7ff fc23 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8004140:	2800      	cmp	r0, #0
 8004142:	d18b      	bne.n	800405c <HAL_I2C_Mem_Read+0x9c>
 8004144:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004154:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004158:	3301      	adds	r3, #1
 800415a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800415c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800415e:	3b01      	subs	r3, #1
 8004160:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004162:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004164:	3b01      	subs	r3, #1
 8004166:	b29b      	uxth	r3, r3
 8004168:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800416a:	b662      	cpsie	i
 800416c:	e7cf      	b.n	800410e <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800416e:	f7ff fc0a 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8004172:	2800      	cmp	r0, #0
 8004174:	f47f af72 	bne.w	800405c <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	6813      	ldr	r3, [r2, #0]
 800417c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004180:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004182:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004184:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800418e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004190:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004192:	1c53      	adds	r3, r2, #1
 8004194:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004196:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800419c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041a4:	f8d9 3000 	ldr.w	r3, [r9]
 80041a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ac:	2123      	movs	r1, #35	; 0x23
 80041ae:	434b      	muls	r3, r1
 80041b0:	9303      	str	r3, [sp, #12]
            count--;
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	b96b      	cbnz	r3, 80041d8 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041ca:	f042 0220 	orr.w	r2, r2, #32
 80041ce:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80041d0:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80041d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80041d6:	e741      	b.n	800405c <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	6959      	ldr	r1, [r3, #20]
 80041dc:	0748      	lsls	r0, r1, #29
 80041de:	d5e8      	bpl.n	80041b2 <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80041e6:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	7053      	strb	r3, [r2, #1]
 80041ec:	e7b3      	b.n	8004156 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ee:	4632      	mov	r2, r6
 80041f0:	4639      	mov	r1, r7
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7ff fd78 	bl	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	f47f af2f 	bne.w	800405c <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004204:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004206:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004208:	1c53      	adds	r3, r2, #1
 800420a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800420c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800420e:	3b01      	subs	r3, #1
 8004210:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004212:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004214:	3b01      	subs	r3, #1
 8004216:	b29b      	uxth	r3, r3
 8004218:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	6959      	ldr	r1, [r3, #20]
 800421e:	0749      	lsls	r1, r1, #29
 8004220:	f57f af2f 	bpl.w	8004082 <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	7053      	strb	r3, [r2, #1]
 8004228:	e775      	b.n	8004116 <HAL_I2C_Mem_Read+0x156>
 800422a:	bf00      	nop
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000
 8004234:	00010004 	.word	0x00010004
 8004238:	2000003c 	.word	0x2000003c

0800423c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800423c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	4605      	mov	r5, r0
 8004242:	b338      	cbz	r0, 8004294 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004244:	6803      	ldr	r3, [r0, #0]
 8004246:	07db      	lsls	r3, r3, #31
 8004248:	d410      	bmi.n	800426c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	682b      	ldr	r3, [r5, #0]
 800424c:	079f      	lsls	r7, r3, #30
 800424e:	d45e      	bmi.n	800430e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	0719      	lsls	r1, r3, #28
 8004254:	f100 8095 	bmi.w	8004382 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	075a      	lsls	r2, r3, #29
 800425c:	f100 80c1 	bmi.w	80043e2 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004260:	69e8      	ldr	r0, [r5, #28]
 8004262:	2800      	cmp	r0, #0
 8004264:	f040 812c 	bne.w	80044c0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8004268:	2000      	movs	r0, #0
 800426a:	e029      	b.n	80042c0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800426c:	4c90      	ldr	r4, [pc, #576]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b04      	cmp	r3, #4
 8004276:	d007      	beq.n	8004288 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004278:	6863      	ldr	r3, [r4, #4]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b08      	cmp	r3, #8
 8004280:	d10a      	bne.n	8004298 <HAL_RCC_OscConfig+0x5c>
 8004282:	6863      	ldr	r3, [r4, #4]
 8004284:	03de      	lsls	r6, r3, #15
 8004286:	d507      	bpl.n	8004298 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	039c      	lsls	r4, r3, #14
 800428c:	d5dd      	bpl.n	800424a <HAL_RCC_OscConfig+0xe>
 800428e:	686b      	ldr	r3, [r5, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1da      	bne.n	800424a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8004294:	2001      	movs	r0, #1
 8004296:	e013      	b.n	80042c0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004298:	686b      	ldr	r3, [r5, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d112      	bne.n	80042c6 <HAL_RCC_OscConfig+0x8a>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042a8:	f7fe fcba 	bl	8002c20 <HAL_GetTick>
 80042ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	0398      	lsls	r0, r3, #14
 80042b2:	d4ca      	bmi.n	800424a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fe fcb4 	bl	8002c20 <HAL_GetTick>
 80042b8:	1b80      	subs	r0, r0, r6
 80042ba:	2864      	cmp	r0, #100	; 0x64
 80042bc:	d9f7      	bls.n	80042ae <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80042be:	2003      	movs	r0, #3
}
 80042c0:	b002      	add	sp, #8
 80042c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c6:	b99b      	cbnz	r3, 80042f0 <HAL_RCC_OscConfig+0xb4>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042d8:	f7fe fca2 	bl	8002c20 <HAL_GetTick>
 80042dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	0399      	lsls	r1, r3, #14
 80042e2:	d5b2      	bpl.n	800424a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe fc9c 	bl	8002c20 <HAL_GetTick>
 80042e8:	1b80      	subs	r0, r0, r6
 80042ea:	2864      	cmp	r0, #100	; 0x64
 80042ec:	d9f7      	bls.n	80042de <HAL_RCC_OscConfig+0xa2>
 80042ee:	e7e6      	b.n	80042be <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	d103      	bne.n	8004300 <HAL_RCC_OscConfig+0xc4>
 80042f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	e7cf      	b.n	80042a0 <HAL_RCC_OscConfig+0x64>
 8004300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430c:	e7cb      	b.n	80042a6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800430e:	4c68      	ldr	r4, [pc, #416]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	f013 0f0c 	tst.w	r3, #12
 8004316:	d007      	beq.n	8004328 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b08      	cmp	r3, #8
 8004320:	d110      	bne.n	8004344 <HAL_RCC_OscConfig+0x108>
 8004322:	6863      	ldr	r3, [r4, #4]
 8004324:	03da      	lsls	r2, r3, #15
 8004326:	d40d      	bmi.n	8004344 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	079b      	lsls	r3, r3, #30
 800432c:	d502      	bpl.n	8004334 <HAL_RCC_OscConfig+0xf8>
 800432e:	692b      	ldr	r3, [r5, #16]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d1af      	bne.n	8004294 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	696a      	ldr	r2, [r5, #20]
 8004338:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800433c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	e785      	b.n	8004250 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004344:	692a      	ldr	r2, [r5, #16]
 8004346:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <HAL_RCC_OscConfig+0x278>)
 8004348:	b16a      	cbz	r2, 8004366 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800434e:	f7fe fc67 	bl	8002c20 <HAL_GetTick>
 8004352:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	079f      	lsls	r7, r3, #30
 8004358:	d4ec      	bmi.n	8004334 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435a:	f7fe fc61 	bl	8002c20 <HAL_GetTick>
 800435e:	1b80      	subs	r0, r0, r6
 8004360:	2802      	cmp	r0, #2
 8004362:	d9f7      	bls.n	8004354 <HAL_RCC_OscConfig+0x118>
 8004364:	e7ab      	b.n	80042be <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8004366:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004368:	f7fe fc5a 	bl	8002c20 <HAL_GetTick>
 800436c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	0798      	lsls	r0, r3, #30
 8004372:	f57f af6d 	bpl.w	8004250 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004376:	f7fe fc53 	bl	8002c20 <HAL_GetTick>
 800437a:	1b80      	subs	r0, r0, r6
 800437c:	2802      	cmp	r0, #2
 800437e:	d9f6      	bls.n	800436e <HAL_RCC_OscConfig+0x132>
 8004380:	e79d      	b.n	80042be <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004382:	69aa      	ldr	r2, [r5, #24]
 8004384:	4e4a      	ldr	r6, [pc, #296]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004386:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <HAL_RCC_OscConfig+0x278>)
 8004388:	b1e2      	cbz	r2, 80043c4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800438a:	2201      	movs	r2, #1
 800438c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004390:	f7fe fc46 	bl	8002c20 <HAL_GetTick>
 8004394:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004398:	079b      	lsls	r3, r3, #30
 800439a:	d50d      	bpl.n	80043b8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800439c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80043a0:	4b45      	ldr	r3, [pc, #276]	; (80044b8 <HAL_RCC_OscConfig+0x27c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80043a8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80043aa:	bf00      	nop
  }
  while (Delay --);
 80043ac:	9b01      	ldr	r3, [sp, #4]
 80043ae:	1e5a      	subs	r2, r3, #1
 80043b0:	9201      	str	r2, [sp, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f9      	bne.n	80043aa <HAL_RCC_OscConfig+0x16e>
 80043b6:	e74f      	b.n	8004258 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b8:	f7fe fc32 	bl	8002c20 <HAL_GetTick>
 80043bc:	1b00      	subs	r0, r0, r4
 80043be:	2802      	cmp	r0, #2
 80043c0:	d9e9      	bls.n	8004396 <HAL_RCC_OscConfig+0x15a>
 80043c2:	e77c      	b.n	80042be <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80043c4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80043c8:	f7fe fc2a 	bl	8002c20 <HAL_GetTick>
 80043cc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80043d0:	079f      	lsls	r7, r3, #30
 80043d2:	f57f af41 	bpl.w	8004258 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d6:	f7fe fc23 	bl	8002c20 <HAL_GetTick>
 80043da:	1b00      	subs	r0, r0, r4
 80043dc:	2802      	cmp	r0, #2
 80043de:	d9f6      	bls.n	80043ce <HAL_RCC_OscConfig+0x192>
 80043e0:	e76d      	b.n	80042be <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4c33      	ldr	r4, [pc, #204]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 80043e4:	69e3      	ldr	r3, [r4, #28]
 80043e6:	00d8      	lsls	r0, r3, #3
 80043e8:	d424      	bmi.n	8004434 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80043ea:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	69e3      	ldr	r3, [r4, #28]
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	61e3      	str	r3, [r4, #28]
 80043f4:	69e3      	ldr	r3, [r4, #28]
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fe:	4e2f      	ldr	r6, [pc, #188]	; (80044bc <HAL_RCC_OscConfig+0x280>)
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	05d9      	lsls	r1, r3, #23
 8004404:	d518      	bpl.n	8004438 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004406:	68eb      	ldr	r3, [r5, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d126      	bne.n	800445a <HAL_RCC_OscConfig+0x21e>
 800440c:	6a23      	ldr	r3, [r4, #32]
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004414:	f7fe fc04 	bl	8002c20 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800441c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441e:	6a23      	ldr	r3, [r4, #32]
 8004420:	079b      	lsls	r3, r3, #30
 8004422:	d53f      	bpl.n	80044a4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8004424:	2f00      	cmp	r7, #0
 8004426:	f43f af1b 	beq.w	8004260 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800442a:	69e3      	ldr	r3, [r4, #28]
 800442c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004430:	61e3      	str	r3, [r4, #28]
 8004432:	e715      	b.n	8004260 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004434:	2700      	movs	r7, #0
 8004436:	e7e2      	b.n	80043fe <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004438:	6833      	ldr	r3, [r6, #0]
 800443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004440:	f7fe fbee 	bl	8002c20 <HAL_GetTick>
 8004444:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	05da      	lsls	r2, r3, #23
 800444a:	d4dc      	bmi.n	8004406 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444c:	f7fe fbe8 	bl	8002c20 <HAL_GetTick>
 8004450:	eba0 0008 	sub.w	r0, r0, r8
 8004454:	2864      	cmp	r0, #100	; 0x64
 8004456:	d9f6      	bls.n	8004446 <HAL_RCC_OscConfig+0x20a>
 8004458:	e731      	b.n	80042be <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445a:	b9ab      	cbnz	r3, 8004488 <HAL_RCC_OscConfig+0x24c>
 800445c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	6223      	str	r3, [r4, #32]
 8004468:	6a23      	ldr	r3, [r4, #32]
 800446a:	f023 0304 	bic.w	r3, r3, #4
 800446e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004470:	f7fe fbd6 	bl	8002c20 <HAL_GetTick>
 8004474:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	6a23      	ldr	r3, [r4, #32]
 8004478:	0798      	lsls	r0, r3, #30
 800447a:	d5d3      	bpl.n	8004424 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447c:	f7fe fbd0 	bl	8002c20 <HAL_GetTick>
 8004480:	1b80      	subs	r0, r0, r6
 8004482:	4540      	cmp	r0, r8
 8004484:	d9f7      	bls.n	8004476 <HAL_RCC_OscConfig+0x23a>
 8004486:	e71a      	b.n	80042be <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004488:	2b05      	cmp	r3, #5
 800448a:	6a23      	ldr	r3, [r4, #32]
 800448c:	d103      	bne.n	8004496 <HAL_RCC_OscConfig+0x25a>
 800448e:	f043 0304 	orr.w	r3, r3, #4
 8004492:	6223      	str	r3, [r4, #32]
 8004494:	e7ba      	b.n	800440c <HAL_RCC_OscConfig+0x1d0>
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	6223      	str	r3, [r4, #32]
 800449c:	6a23      	ldr	r3, [r4, #32]
 800449e:	f023 0304 	bic.w	r3, r3, #4
 80044a2:	e7b6      	b.n	8004412 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	f7fe fbbc 	bl	8002c20 <HAL_GetTick>
 80044a8:	1b80      	subs	r0, r0, r6
 80044aa:	4540      	cmp	r0, r8
 80044ac:	d9b7      	bls.n	800441e <HAL_RCC_OscConfig+0x1e2>
 80044ae:	e706      	b.n	80042be <HAL_RCC_OscConfig+0x82>
 80044b0:	40021000 	.word	0x40021000
 80044b4:	42420000 	.word	0x42420000
 80044b8:	2000003c 	.word	0x2000003c
 80044bc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c0:	4c2a      	ldr	r4, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x330>)
 80044c2:	6863      	ldr	r3, [r4, #4]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d03e      	beq.n	800454a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044cc:	2200      	movs	r2, #0
 80044ce:	4b28      	ldr	r3, [pc, #160]	; (8004570 <HAL_RCC_OscConfig+0x334>)
 80044d0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80044d2:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d4:	d12c      	bne.n	8004530 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80044d6:	f7fe fba3 	bl	8002c20 <HAL_GetTick>
 80044da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	0199      	lsls	r1, r3, #6
 80044e0:	d420      	bmi.n	8004524 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044e2:	6a2b      	ldr	r3, [r5, #32]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d105      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	68a9      	ldr	r1, [r5, #8]
 80044ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80044f2:	430a      	orrs	r2, r1
 80044f4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80044f8:	6862      	ldr	r2, [r4, #4]
 80044fa:	430b      	orrs	r3, r1
 80044fc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004500:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004502:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004504:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004506:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_RCC_OscConfig+0x334>)
 8004508:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800450a:	f7fe fb89 	bl	8002c20 <HAL_GetTick>
 800450e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	f53f aea8 	bmi.w	8004268 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004518:	f7fe fb82 	bl	8002c20 <HAL_GetTick>
 800451c:	1b40      	subs	r0, r0, r5
 800451e:	2802      	cmp	r0, #2
 8004520:	d9f6      	bls.n	8004510 <HAL_RCC_OscConfig+0x2d4>
 8004522:	e6cc      	b.n	80042be <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004524:	f7fe fb7c 	bl	8002c20 <HAL_GetTick>
 8004528:	1b80      	subs	r0, r0, r6
 800452a:	2802      	cmp	r0, #2
 800452c:	d9d6      	bls.n	80044dc <HAL_RCC_OscConfig+0x2a0>
 800452e:	e6c6      	b.n	80042be <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004530:	f7fe fb76 	bl	8002c20 <HAL_GetTick>
 8004534:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	019b      	lsls	r3, r3, #6
 800453a:	f57f ae95 	bpl.w	8004268 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7fe fb6f 	bl	8002c20 <HAL_GetTick>
 8004542:	1b40      	subs	r0, r0, r5
 8004544:	2802      	cmp	r0, #2
 8004546:	d9f6      	bls.n	8004536 <HAL_RCC_OscConfig+0x2fa>
 8004548:	e6b9      	b.n	80042be <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800454a:	2801      	cmp	r0, #1
 800454c:	f43f aeb8 	beq.w	80042c0 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8004550:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	6a2a      	ldr	r2, [r5, #32]
 8004554:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004558:	4291      	cmp	r1, r2
 800455a:	f47f ae9b 	bne.w	8004294 <HAL_RCC_OscConfig+0x58>
 800455e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004560:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004564:	4293      	cmp	r3, r2
 8004566:	f43f ae7f 	beq.w	8004268 <HAL_RCC_OscConfig+0x2c>
 800456a:	e693      	b.n	8004294 <HAL_RCC_OscConfig+0x58>
 800456c:	40021000 	.word	0x40021000
 8004570:	42420000 	.word	0x42420000

08004574 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_RCC_GetSysClockFreq+0x38>)
 8004576:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004578:	f003 010c 	and.w	r1, r3, #12
 800457c:	2908      	cmp	r1, #8
 800457e:	d112      	bne.n	80045a6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004580:	480b      	ldr	r0, [pc, #44]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004582:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004586:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004588:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800458a:	d509      	bpl.n	80045a0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800458c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004590:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004594:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x44>)
 8004598:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800459a:	fbb0 f0f3 	udiv	r0, r0, r3
 800459e:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_GetSysClockFreq+0x48>)
 80045a2:	4358      	muls	r0, r3
 80045a4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80045a6:	4803      	ldr	r0, [pc, #12]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	080096a8 	.word	0x080096a8
 80045b4:	007a1200 	.word	0x007a1200
 80045b8:	080096b8 	.word	0x080096b8
 80045bc:	003d0900 	.word	0x003d0900

080045c0 <HAL_RCC_ClockConfig>:
{
 80045c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80045c6:	4604      	mov	r4, r0
 80045c8:	b910      	cbnz	r0, 80045d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80045ca:	2001      	movs	r0, #1
}
 80045cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4a44      	ldr	r2, [pc, #272]	; (80046e4 <HAL_RCC_ClockConfig+0x124>)
 80045d2:	6813      	ldr	r3, [r2, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	428b      	cmp	r3, r1
 80045da:	d328      	bcc.n	800462e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	6821      	ldr	r1, [r4, #0]
 80045de:	078e      	lsls	r6, r1, #30
 80045e0:	d430      	bmi.n	8004644 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e2:	07ca      	lsls	r2, r1, #31
 80045e4:	d443      	bmi.n	800466e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e6:	4a3f      	ldr	r2, [pc, #252]	; (80046e4 <HAL_RCC_ClockConfig+0x124>)
 80045e8:	6813      	ldr	r3, [r2, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	42ab      	cmp	r3, r5
 80045f0:	d865      	bhi.n	80046be <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	4d3c      	ldr	r5, [pc, #240]	; (80046e8 <HAL_RCC_ClockConfig+0x128>)
 80045f6:	f012 0f04 	tst.w	r2, #4
 80045fa:	d16c      	bne.n	80046d6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fc:	0713      	lsls	r3, r2, #28
 80045fe:	d506      	bpl.n	800460e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004600:	686b      	ldr	r3, [r5, #4]
 8004602:	6922      	ldr	r2, [r4, #16]
 8004604:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004608:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800460c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800460e:	f7ff ffb1 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8004612:	686b      	ldr	r3, [r5, #4]
 8004614:	4a35      	ldr	r2, [pc, #212]	; (80046ec <HAL_RCC_ClockConfig+0x12c>)
 8004616:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800461a:	5cd3      	ldrb	r3, [r2, r3]
 800461c:	40d8      	lsrs	r0, r3
 800461e:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <HAL_RCC_ClockConfig+0x130>)
 8004620:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004622:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <HAL_RCC_ClockConfig+0x134>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f7fe fa2b 	bl	8002a80 <HAL_InitTick>
  return HAL_OK;
 800462a:	2000      	movs	r0, #0
 800462c:	e7ce      	b.n	80045cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	f023 0307 	bic.w	r3, r3, #7
 8004634:	430b      	orrs	r3, r1
 8004636:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	428b      	cmp	r3, r1
 8004640:	d1c3      	bne.n	80045ca <HAL_RCC_ClockConfig+0xa>
 8004642:	e7cb      	b.n	80045dc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <HAL_RCC_ClockConfig+0x128>)
 8004646:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800464a:	bf1e      	ittt	ne
 800464c:	685a      	ldrne	r2, [r3, #4]
 800464e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004652:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004656:	bf42      	ittt	mi
 8004658:	685a      	ldrmi	r2, [r3, #4]
 800465a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800465e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	68a0      	ldr	r0, [r4, #8]
 8004664:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004668:	4302      	orrs	r2, r0
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	e7b9      	b.n	80045e2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466e:	6862      	ldr	r2, [r4, #4]
 8004670:	4e1d      	ldr	r6, [pc, #116]	; (80046e8 <HAL_RCC_ClockConfig+0x128>)
 8004672:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004674:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	d11a      	bne.n	80046ae <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004678:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	d0a5      	beq.n	80045ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004684:	f023 0303 	bic.w	r3, r3, #3
 8004688:	4313      	orrs	r3, r2
 800468a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800468c:	f7fe fac8 	bl	8002c20 <HAL_GetTick>
 8004690:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	6873      	ldr	r3, [r6, #4]
 8004694:	6862      	ldr	r2, [r4, #4]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800469e:	d0a2      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a0:	f7fe fabe 	bl	8002c20 <HAL_GetTick>
 80046a4:	1bc0      	subs	r0, r0, r7
 80046a6:	4540      	cmp	r0, r8
 80046a8:	d9f3      	bls.n	8004692 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80046aa:	2003      	movs	r0, #3
 80046ac:	e78e      	b.n	80045cc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ae:	2a02      	cmp	r2, #2
 80046b0:	d102      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80046b6:	e7e1      	b.n	800467c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b8:	f013 0f02 	tst.w	r3, #2
 80046bc:	e7de      	b.n	800467c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	432b      	orrs	r3, r5
 80046c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c8:	6813      	ldr	r3, [r2, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	42ab      	cmp	r3, r5
 80046d0:	f47f af7b 	bne.w	80045ca <HAL_RCC_ClockConfig+0xa>
 80046d4:	e78d      	b.n	80045f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d6:	686b      	ldr	r3, [r5, #4]
 80046d8:	68e1      	ldr	r1, [r4, #12]
 80046da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046de:	430b      	orrs	r3, r1
 80046e0:	606b      	str	r3, [r5, #4]
 80046e2:	e78b      	b.n	80045fc <HAL_RCC_ClockConfig+0x3c>
 80046e4:	40022000 	.word	0x40022000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	08009690 	.word	0x08009690
 80046f0:	2000003c 	.word	0x2000003c
 80046f4:	20000044 	.word	0x20000044

080046f8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <HAL_RCC_GetPCLK1Freq+0x14>)
 80046fa:	4a05      	ldr	r2, [pc, #20]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x18>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004702:	5cd3      	ldrb	r3, [r2, r3]
 8004704:	4a03      	ldr	r2, [pc, #12]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004706:	6810      	ldr	r0, [r2, #0]
}
 8004708:	40d8      	lsrs	r0, r3
 800470a:	4770      	bx	lr
 800470c:	40021000 	.word	0x40021000
 8004710:	080096a0 	.word	0x080096a0
 8004714:	2000003c 	.word	0x2000003c

08004718 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004718:	4b04      	ldr	r3, [pc, #16]	; (800472c <HAL_RCC_GetPCLK2Freq+0x14>)
 800471a:	4a05      	ldr	r2, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x18>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	4a03      	ldr	r2, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004726:	6810      	ldr	r0, [r2, #0]
}
 8004728:	40d8      	lsrs	r0, r3
 800472a:	4770      	bx	lr
 800472c:	40021000 	.word	0x40021000
 8004730:	080096a0 	.word	0x080096a0
 8004734:	2000003c 	.word	0x2000003c

08004738 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004738:	230f      	movs	r3, #15
 800473a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_GetClockConfig+0x34>)
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	f002 0203 	and.w	r2, r2, #3
 8004744:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800474c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004754:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	08db      	lsrs	r3, r3, #3
 800475a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800475e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_RCC_GetClockConfig+0x38>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	600b      	str	r3, [r1, #0]
}
 800476a:	4770      	bx	lr
 800476c:	40021000 	.word	0x40021000
 8004770:	40022000 	.word	0x40022000

08004774 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004774:	6803      	ldr	r3, [r0, #0]
{
 8004776:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800477a:	07d9      	lsls	r1, r3, #31
{
 800477c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800477e:	d521      	bpl.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004780:	4c36      	ldr	r4, [pc, #216]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004782:	69e3      	ldr	r3, [r4, #28]
 8004784:	00da      	lsls	r2, r3, #3
 8004786:	d433      	bmi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004788:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	69e3      	ldr	r3, [r4, #28]
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004790:	61e3      	str	r3, [r4, #28]
 8004792:	69e3      	ldr	r3, [r4, #28]
 8004794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	4f30      	ldr	r7, [pc, #192]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	05db      	lsls	r3, r3, #23
 80047a2:	d527      	bpl.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047a4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047a6:	686a      	ldr	r2, [r5, #4]
 80047a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80047ac:	d136      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ae:	6a23      	ldr	r3, [r4, #32]
 80047b0:	686a      	ldr	r2, [r5, #4]
 80047b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b6:	4313      	orrs	r3, r2
 80047b8:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047ba:	b11e      	cbz	r6, 80047c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047bc:	69e3      	ldr	r3, [r4, #28]
 80047be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c2:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047c4:	6828      	ldr	r0, [r5, #0]
 80047c6:	0783      	lsls	r3, r0, #30
 80047c8:	d506      	bpl.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ca:	4924      	ldr	r1, [pc, #144]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80047cc:	68ab      	ldr	r3, [r5, #8]
 80047ce:	684a      	ldr	r2, [r1, #4]
 80047d0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80047d4:	431a      	orrs	r2, r3
 80047d6:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047d8:	f010 0010 	ands.w	r0, r0, #16
 80047dc:	d01b      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047de:	4a1f      	ldr	r2, [pc, #124]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80047e0:	68e9      	ldr	r1, [r5, #12]
 80047e2:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047e4:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047e6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80047ea:	430b      	orrs	r3, r1
 80047ec:	6053      	str	r3, [r2, #4]
 80047ee:	e012      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 80047f0:	2600      	movs	r6, #0
 80047f2:	e7d3      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fa:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80047fc:	f7fe fa10 	bl	8002c20 <HAL_GetTick>
 8004800:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	05d8      	lsls	r0, r3, #23
 8004806:	d4cd      	bmi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fe fa0a 	bl	8002c20 <HAL_GetTick>
 800480c:	eba0 0008 	sub.w	r0, r0, r8
 8004810:	2864      	cmp	r0, #100	; 0x64
 8004812:	d9f6      	bls.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8004814:	2003      	movs	r0, #3
}
 8004816:	b002      	add	sp, #8
 8004818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800481c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004820:	429a      	cmp	r2, r3
 8004822:	d0c4      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004824:	2001      	movs	r0, #1
 8004826:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004828:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800482a:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800482e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004830:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004834:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8004838:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800483a:	07d9      	lsls	r1, r3, #31
 800483c:	d5b7      	bpl.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800483e:	f7fe f9ef 	bl	8002c20 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004846:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004848:	6a23      	ldr	r3, [r4, #32]
 800484a:	079a      	lsls	r2, r3, #30
 800484c:	d4af      	bmi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fe f9e7 	bl	8002c20 <HAL_GetTick>
 8004852:	1bc0      	subs	r0, r0, r7
 8004854:	4540      	cmp	r0, r8
 8004856:	d9f7      	bls.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004858:	e7dc      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	40007000 	.word	0x40007000
 8004864:	42420000 	.word	0x42420000

08004868 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800486c:	461c      	mov	r4, r3
 800486e:	4616      	mov	r6, r2
 8004870:	460f      	mov	r7, r1
 8004872:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004874:	f7fe f9d4 	bl	8002c20 <HAL_GetTick>
 8004878:	4434      	add	r4, r6
 800487a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800487c:	f7fe f9d0 	bl	8002c20 <HAL_GetTick>
 8004880:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004882:	4b23      	ldr	r3, [pc, #140]	; (8004910 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800488a:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800488c:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800488e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004890:	6893      	ldr	r3, [r2, #8]
 8004892:	ea37 0303 	bics.w	r3, r7, r3
 8004896:	d001      	beq.n	800489c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8004898:	2000      	movs	r0, #0
 800489a:	e02e      	b.n	80048fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 800489c:	1c73      	adds	r3, r6, #1
 800489e:	d0f7      	beq.n	8004890 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048a0:	f7fe f9be 	bl	8002c20 <HAL_GetTick>
 80048a4:	eba0 0008 	sub.w	r0, r0, r8
 80048a8:	42a0      	cmp	r0, r4
 80048aa:	d329      	bcc.n	8004900 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048b4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b6:	686a      	ldr	r2, [r5, #4]
 80048b8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80048bc:	d10a      	bne.n	80048d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80048be:	68aa      	ldr	r2, [r5, #8]
 80048c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80048c4:	d002      	beq.n	80048cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048c6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80048ca:	d103      	bne.n	80048d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80048d6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80048da:	d107      	bne.n	80048ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ea:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80048f2:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80048f4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80048f6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80048fa:	b002      	add	sp, #8
 80048fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8004900:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004902:	2b00      	cmp	r3, #0
      count--;
 8004904:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004906:	bf08      	it	eq
 8004908:	2400      	moveq	r4, #0
      count--;
 800490a:	3b01      	subs	r3, #1
 800490c:	e7be      	b.n	800488c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800490e:	bf00      	nop
 8004910:	2000003c 	.word	0x2000003c

08004914 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004918:	6842      	ldr	r2, [r0, #4]
{
 800491a:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004920:	d116      	bne.n	8004950 <SPI_EndRxTransaction+0x3c>
 8004922:	6882      	ldr	r2, [r0, #8]
 8004924:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004928:	d002      	beq.n	8004930 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800492a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800492e:	d10f      	bne.n	8004950 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004930:	6825      	ldr	r5, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004932:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8004936:	6828      	ldr	r0, [r5, #0]
 8004938:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800493c:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800493e:	d107      	bne.n	8004950 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004940:	460a      	mov	r2, r1
 8004942:	2101      	movs	r1, #1
 8004944:	4620      	mov	r0, r4
 8004946:	f7ff ff8f 	bl	8004868 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800494a:	b920      	cbnz	r0, 8004956 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800494c:	2000      	movs	r0, #0
}
 800494e:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004950:	460a      	mov	r2, r1
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	e7f6      	b.n	8004944 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004956:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004958:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495a:	f043 0320 	orr.w	r3, r3, #32
 800495e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004960:	e7f5      	b.n	800494e <SPI_EndRxTransaction+0x3a>

08004962 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004962:	b510      	push	{r4, lr}
 8004964:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004966:	460a      	mov	r2, r1
 8004968:	2180      	movs	r1, #128	; 0x80
{
 800496a:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800496c:	f7ff ff7c 	bl	8004868 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004970:	b120      	cbz	r0, 800497c <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8004972:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004974:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004976:	f043 0320 	orr.w	r3, r3, #32
 800497a:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800497c:	bd10      	pop	{r4, pc}

0800497e <HAL_SPI_Init>:
{
 800497e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004980:	4604      	mov	r4, r0
 8004982:	2800      	cmp	r0, #0
 8004984:	d051      	beq.n	8004a2a <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004986:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	d14a      	bne.n	8004a22 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800498c:	6842      	ldr	r2, [r0, #4]
 800498e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004992:	d000      	beq.n	8004996 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004994:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800499a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800499e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049a2:	b923      	cbnz	r3, 80049ae <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80049a4:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80049a6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80049aa:	f7fd ff55 	bl	8002858 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80049ae:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80049b0:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80049b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80049b6:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80049ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049be:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049c0:	6863      	ldr	r3, [r4, #4]
 80049c2:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80049c6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80049ca:	4303      	orrs	r3, r0
 80049cc:	68e0      	ldr	r0, [r4, #12]
 80049ce:	69a1      	ldr	r1, [r4, #24]
 80049d0:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80049d4:	4303      	orrs	r3, r0
 80049d6:	6920      	ldr	r0, [r4, #16]
 80049d8:	f000 0002 	and.w	r0, r0, #2
 80049dc:	4303      	orrs	r3, r0
 80049de:	6960      	ldr	r0, [r4, #20]
 80049e0:	f000 0001 	and.w	r0, r0, #1
 80049e4:	4303      	orrs	r3, r0
 80049e6:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80049ea:	4303      	orrs	r3, r0
 80049ec:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049ee:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f0:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80049f4:	4303      	orrs	r3, r0
 80049f6:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049f8:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049fc:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004a00:	4303      	orrs	r3, r0
 8004a02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004a04:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004a08:	4303      	orrs	r3, r0
 8004a0a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a0c:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a0e:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a10:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a16:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004a18:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a1a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a1c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004a20:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a22:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a24:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a28:	e7b5      	b.n	8004996 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	e7f8      	b.n	8004a20 <HAL_SPI_Init+0xa2>

08004a2e <HAL_SPI_Transmit>:
{
 8004a2e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a32:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004a34:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8004a38:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004a3a:	2b01      	cmp	r3, #1
{
 8004a3c:	460d      	mov	r5, r1
 8004a3e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004a40:	f000 80a6 	beq.w	8004b90 <HAL_SPI_Transmit+0x162>
 8004a44:	2301      	movs	r3, #1
 8004a46:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004a4a:	f7fe f8e9 	bl	8002c20 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a4e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004a52:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	fa5f f983 	uxtb.w	r9, r3
 8004a5a:	f040 8096 	bne.w	8004b8a <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	d067      	beq.n	8004b32 <HAL_SPI_Transmit+0x104>
 8004a62:	f1b8 0f00 	cmp.w	r8, #0
 8004a66:	d064      	beq.n	8004b32 <HAL_SPI_Transmit+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004a72:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004a76:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a7a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a7c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a80:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004a82:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a88:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a8a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a8e:	d107      	bne.n	8004aa0 <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 8004a90:	6833      	ldr	r3, [r6, #0]
 8004a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a96:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8004a98:	6833      	ldr	r3, [r6, #0]
 8004a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a9e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aa0:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa2:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aa4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004aa6:	bf5e      	ittt	pl
 8004aa8:	6833      	ldrpl	r3, [r6, #0]
 8004aaa:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004aae:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ab0:	68e3      	ldr	r3, [r4, #12]
 8004ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab6:	d143      	bne.n	8004b40 <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab8:	b112      	cbz	r2, 8004ac0 <HAL_SPI_Transmit+0x92>
 8004aba:	f1b8 0f01 	cmp.w	r8, #1
 8004abe:	d107      	bne.n	8004ad0 <HAL_SPI_Transmit+0xa2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ac4:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac6:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ac8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004ad0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	b9b3      	cbnz	r3, 8004b04 <HAL_SPI_Transmit+0xd6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad6:	4652      	mov	r2, sl
 8004ad8:	4639      	mov	r1, r7
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7ff ff41 	bl	8004962 <SPI_EndRxTxTransaction>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d14f      	bne.n	8004b84 <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae4:	68a3      	ldr	r3, [r4, #8]
 8004ae6:	b933      	cbnz	r3, 8004af6 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	9201      	str	r2, [sp, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004af8:	b9db      	cbnz	r3, 8004b32 <HAL_SPI_Transmit+0x104>
    hspi->State = HAL_SPI_STATE_READY;
 8004afa:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004afc:	4699      	mov	r9, r3
    hspi->State = HAL_SPI_STATE_READY;
 8004afe:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8004b02:	e016      	b.n	8004b32 <HAL_SPI_Transmit+0x104>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	6893      	ldr	r3, [r2, #8]
 8004b08:	0798      	lsls	r0, r3, #30
 8004b0a:	d505      	bpl.n	8004b18 <HAL_SPI_Transmit+0xea>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b0e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004b12:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b14:	6323      	str	r3, [r4, #48]	; 0x30
 8004b16:	e7d7      	b.n	8004ac8 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b18:	f7fe f882 	bl	8002c20 <HAL_GetTick>
 8004b1c:	eba0 000a 	sub.w	r0, r0, sl
 8004b20:	42b8      	cmp	r0, r7
 8004b22:	d3d5      	bcc.n	8004ad0 <HAL_SPI_Transmit+0xa2>
 8004b24:	1c79      	adds	r1, r7, #1
 8004b26:	d0d3      	beq.n	8004ad0 <HAL_SPI_Transmit+0xa2>
          hspi->State = HAL_SPI_STATE_READY;
 8004b28:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8004b2a:	f04f 0903 	mov.w	r9, #3
          hspi->State = HAL_SPI_STATE_READY;
 8004b2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b32:	2300      	movs	r3, #0
 8004b34:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004b38:	4648      	mov	r0, r9
 8004b3a:	b002      	add	sp, #8
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b40:	b112      	cbz	r2, 8004b48 <HAL_SPI_Transmit+0x11a>
 8004b42:	f1b8 0f01 	cmp.w	r8, #1
 8004b46:	d108      	bne.n	8004b5a <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b48:	782b      	ldrb	r3, [r5, #0]
 8004b4a:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b4e:	3301      	adds	r3, #1
 8004b50:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004b5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0b9      	beq.n	8004ad6 <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	0792      	lsls	r2, r2, #30
 8004b68:	d503      	bpl.n	8004b72 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	731a      	strb	r2, [r3, #12]
 8004b70:	e7ec      	b.n	8004b4c <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b72:	f7fe f855 	bl	8002c20 <HAL_GetTick>
 8004b76:	eba0 000a 	sub.w	r0, r0, sl
 8004b7a:	42b8      	cmp	r0, r7
 8004b7c:	d3ed      	bcc.n	8004b5a <HAL_SPI_Transmit+0x12c>
 8004b7e:	1c7b      	adds	r3, r7, #1
 8004b80:	d0eb      	beq.n	8004b5a <HAL_SPI_Transmit+0x12c>
 8004b82:	e7d1      	b.n	8004b28 <HAL_SPI_Transmit+0xfa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b84:	2320      	movs	r3, #32
 8004b86:	6563      	str	r3, [r4, #84]	; 0x54
 8004b88:	e7ac      	b.n	8004ae4 <HAL_SPI_Transmit+0xb6>
    errorcode = HAL_BUSY;
 8004b8a:	f04f 0902 	mov.w	r9, #2
 8004b8e:	e7d0      	b.n	8004b32 <HAL_SPI_Transmit+0x104>
  __HAL_LOCK(hspi);
 8004b90:	f04f 0902 	mov.w	r9, #2
 8004b94:	e7d0      	b.n	8004b38 <HAL_SPI_Transmit+0x10a>

08004b96 <HAL_SPI_TransmitReceive>:
{
 8004b96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b9a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004b9c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8004ba0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004ba2:	2b01      	cmp	r3, #1
{
 8004ba4:	460d      	mov	r5, r1
 8004ba6:	4691      	mov	r9, r2
 8004ba8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004bac:	f000 80e6 	beq.w	8004d7c <HAL_SPI_TransmitReceive+0x1e6>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004bb6:	f7fe f833 	bl	8002c20 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004bba:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004bbe:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc0:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8004bc2:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8004bc4:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc6:	d00a      	beq.n	8004bde <HAL_SPI_TransmitReceive+0x48>
 8004bc8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004bcc:	f040 80d4 	bne.w	8004d78 <HAL_SPI_TransmitReceive+0x1e2>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bd0:	68a3      	ldr	r3, [r4, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 80d0 	bne.w	8004d78 <HAL_SPI_TransmitReceive+0x1e2>
 8004bd8:	2904      	cmp	r1, #4
 8004bda:	f040 80cd 	bne.w	8004d78 <HAL_SPI_TransmitReceive+0x1e2>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bde:	b90d      	cbnz	r5, 8004be4 <HAL_SPI_TransmitReceive+0x4e>
    errorcode = HAL_ERROR;
 8004be0:	2001      	movs	r0, #1
    goto error;
 8004be2:	e06f      	b.n	8004cc4 <HAL_SPI_TransmitReceive+0x12e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004be4:	f1b9 0f00 	cmp.w	r9, #0
 8004be8:	d0fa      	beq.n	8004be0 <HAL_SPI_TransmitReceive+0x4a>
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d0f8      	beq.n	8004be0 <HAL_SPI_TransmitReceive+0x4a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bee:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bf2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bf6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bf8:	bf1c      	itt	ne
 8004bfa:	2305      	movne	r3, #5
 8004bfc:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004c04:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c08:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8004c0a:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004c0c:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0e:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8004c10:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c12:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8004c14:	bf58      	it	pl
 8004c16:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c18:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8004c1a:	bf58      	it	pl
 8004c1c:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8004c20:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8004c22:	bf58      	it	pl
 8004c24:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c26:	68e1      	ldr	r1, [r4, #12]
 8004c28:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004c2c:	d150      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c2e:	b10a      	cbz	r2, 8004c34 <HAL_SPI_TransmitReceive+0x9e>
 8004c30:	2e01      	cmp	r6, #1
 8004c32:	d107      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c34:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004c38:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004c3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3c:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004c44:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	b963      	cbnz	r3, 8004c66 <HAL_SPI_TransmitReceive+0xd0>
 8004c4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	b94b      	cbnz	r3, 8004c66 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c52:	463a      	mov	r2, r7
 8004c54:	4641      	mov	r1, r8
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7ff fe83 	bl	8004962 <SPI_EndRxTxTransaction>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d07a      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c60:	2320      	movs	r3, #32
 8004c62:	6563      	str	r3, [r4, #84]	; 0x54
 8004c64:	e7bc      	b.n	8004be0 <HAL_SPI_TransmitReceive+0x4a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c66:	6821      	ldr	r1, [r4, #0]
 8004c68:	688b      	ldr	r3, [r1, #8]
 8004c6a:	079a      	lsls	r2, r3, #30
 8004c6c:	d50d      	bpl.n	8004c8a <HAL_SPI_TransmitReceive+0xf4>
 8004c6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	b153      	cbz	r3, 8004c8a <HAL_SPI_TransmitReceive+0xf4>
 8004c74:	b14d      	cbz	r5, 8004c8a <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8004c76:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c7a:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004c7e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c80:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c8a:	688a      	ldr	r2, [r1, #8]
 8004c8c:	f012 0201 	ands.w	r2, r2, #1
 8004c90:	d00c      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x116>
 8004c92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	b14b      	cbz	r3, 8004cac <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8004c98:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c9a:	68c9      	ldr	r1, [r1, #12]
 8004c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c9e:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ca2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004ca4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cac:	f7fd ffb8 	bl	8002c20 <HAL_GetTick>
 8004cb0:	1bc0      	subs	r0, r0, r7
 8004cb2:	4540      	cmp	r0, r8
 8004cb4:	d3c7      	bcc.n	8004c46 <HAL_SPI_TransmitReceive+0xb0>
 8004cb6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004cba:	d0c4      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8004cbc:	2301      	movs	r3, #1
        errorcode = HAL_TIMEOUT;
 8004cbe:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8004cc0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004cca:	b003      	add	sp, #12
 8004ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd0:	b10a      	cbz	r2, 8004cd6 <HAL_SPI_TransmitReceive+0x140>
 8004cd2:	2e01      	cmp	r6, #1
 8004cd4:	d108      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd6:	782a      	ldrb	r2, [r5, #0]
 8004cd8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cdc:	3301      	adds	r3, #1
 8004cde:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ce0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004ce8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	b91b      	cbnz	r3, 8004cf8 <HAL_SPI_TransmitReceive+0x162>
 8004cf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ac      	beq.n	8004c52 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	6893      	ldr	r3, [r2, #8]
 8004cfc:	079b      	lsls	r3, r3, #30
 8004cfe:	d50e      	bpl.n	8004d1e <HAL_SPI_TransmitReceive+0x188>
 8004d00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	b15b      	cbz	r3, 8004d1e <HAL_SPI_TransmitReceive+0x188>
 8004d06:	b155      	cbz	r5, 8004d1e <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 8004d08:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8004d10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d12:	3301      	adds	r3, #1
 8004d14:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d16:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	6891      	ldr	r1, [r2, #8]
 8004d22:	f011 0101 	ands.w	r1, r1, #1
 8004d26:	d00d      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x1ae>
 8004d28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	b153      	cbz	r3, 8004d44 <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 8004d2e:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d38:	3301      	adds	r3, #1
 8004d3a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004d3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d44:	f7fd ff6c 	bl	8002c20 <HAL_GetTick>
 8004d48:	1bc0      	subs	r0, r0, r7
 8004d4a:	4540      	cmp	r0, r8
 8004d4c:	d3cd      	bcc.n	8004cea <HAL_SPI_TransmitReceive+0x154>
 8004d4e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004d52:	d0ca      	beq.n	8004cea <HAL_SPI_TransmitReceive+0x154>
 8004d54:	e7b2      	b.n	8004cbc <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	b933      	cbnz	r3, 8004d68 <HAL_SPI_TransmitReceive+0x1d2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	9001      	str	r0, [sp, #4]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	9201      	str	r2, [sp, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f47f af38 	bne.w	8004be0 <HAL_SPI_TransmitReceive+0x4a>
    hspi->State = HAL_SPI_STATE_READY;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8004d76:	e7a5      	b.n	8004cc4 <HAL_SPI_TransmitReceive+0x12e>
    errorcode = HAL_BUSY;
 8004d78:	2002      	movs	r0, #2
 8004d7a:	e7a3      	b.n	8004cc4 <HAL_SPI_TransmitReceive+0x12e>
  __HAL_LOCK(hspi);
 8004d7c:	2002      	movs	r0, #2
 8004d7e:	e7a4      	b.n	8004cca <HAL_SPI_TransmitReceive+0x134>

08004d80 <HAL_SPI_Receive>:
{
 8004d80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d84:	461e      	mov	r6, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d86:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
{
 8004d8a:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d8c:	2b01      	cmp	r3, #1
{
 8004d8e:	468a      	mov	sl, r1
 8004d90:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d92:	b2dd      	uxtb	r5, r3
 8004d94:	f040 8095 	bne.w	8004ec2 <HAL_SPI_Receive+0x142>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d98:	6843      	ldr	r3, [r0, #4]
 8004d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d9e:	d10e      	bne.n	8004dbe <HAL_SPI_Receive+0x3e>
 8004da0:	6883      	ldr	r3, [r0, #8]
 8004da2:	b963      	cbnz	r3, 8004dbe <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004da4:	2304      	movs	r3, #4
 8004da6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004daa:	4613      	mov	r3, r2
 8004dac:	9600      	str	r6, [sp, #0]
 8004dae:	460a      	mov	r2, r1
 8004db0:	f7ff fef1 	bl	8004b96 <HAL_SPI_TransmitReceive>
 8004db4:	4605      	mov	r5, r0
}
 8004db6:	4628      	mov	r0, r5
 8004db8:	b002      	add	sp, #8
 8004dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8004dbe:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d07f      	beq.n	8004ec6 <HAL_SPI_Receive+0x146>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004dcc:	f7fd ff28 	bl	8002c20 <HAL_GetTick>
 8004dd0:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8004dd2:	f1ba 0f00 	cmp.w	sl, #0
 8004dd6:	d064      	beq.n	8004ea2 <HAL_SPI_Receive+0x122>
 8004dd8:	f1b8 0f00 	cmp.w	r8, #0
 8004ddc:	d061      	beq.n	8004ea2 <HAL_SPI_Receive+0x122>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dde:	2700      	movs	r7, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004de0:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de2:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004de4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dec:	6567      	str	r7, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004dee:	e9c4 7710 	strd	r7, r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004df2:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
    __HAL_SPI_DISABLE(hspi);
 8004df6:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004df8:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dfc:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e00:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e02:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e04:	86e7      	strh	r7, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e06:	d107      	bne.n	8004e18 <HAL_SPI_Receive+0x98>
    __HAL_SPI_DISABLE(hspi);
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e16:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004e1c:	bf5e      	ittt	pl
 8004e1e:	681a      	ldrpl	r2, [r3, #0]
 8004e20:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004e24:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	b1f3      	cbz	r3, 8004e68 <HAL_SPI_Receive+0xe8>
    while (hspi->RxXferCount > 0U)
 8004e2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	b1fb      	cbz	r3, 8004e70 <HAL_SPI_Receive+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	07d2      	lsls	r2, r2, #31
 8004e36:	d538      	bpl.n	8004eaa <HAL_SPI_Receive+0x12a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e3c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e40:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004e4a:	e7ee      	b.n	8004e2a <HAL_SPI_Receive+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	07d0      	lsls	r0, r2, #31
 8004e52:	d51a      	bpl.n	8004e8a <HAL_SPI_Receive+0x10a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e54:	7b1b      	ldrb	r3, [r3, #12]
 8004e56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e58:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004e68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ed      	bne.n	8004e4c <HAL_SPI_Receive+0xcc>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e70:	464a      	mov	r2, r9
 8004e72:	4631      	mov	r1, r6
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7ff fd4d 	bl	8004914 <SPI_EndRxTransaction>
 8004e7a:	b9f8      	cbnz	r0, 8004ebc <HAL_SPI_Receive+0x13c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e7e:	b983      	cbnz	r3, 8004ea2 <HAL_SPI_Receive+0x122>
    hspi->State = HAL_SPI_STATE_READY;
 8004e80:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e82:	461d      	mov	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 8004e84:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8004e88:	e00b      	b.n	8004ea2 <HAL_SPI_Receive+0x122>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8a:	f7fd fec9 	bl	8002c20 <HAL_GetTick>
 8004e8e:	eba0 0009 	sub.w	r0, r0, r9
 8004e92:	42b0      	cmp	r0, r6
 8004e94:	d3e8      	bcc.n	8004e68 <HAL_SPI_Receive+0xe8>
 8004e96:	1c71      	adds	r1, r6, #1
 8004e98:	d0e6      	beq.n	8004e68 <HAL_SPI_Receive+0xe8>
          hspi->State = HAL_SPI_STATE_READY;
 8004e9a:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8004e9c:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 8004e9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8004ea8:	e785      	b.n	8004db6 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eaa:	f7fd feb9 	bl	8002c20 <HAL_GetTick>
 8004eae:	eba0 0009 	sub.w	r0, r0, r9
 8004eb2:	42b0      	cmp	r0, r6
 8004eb4:	d3b9      	bcc.n	8004e2a <HAL_SPI_Receive+0xaa>
 8004eb6:	1c73      	adds	r3, r6, #1
 8004eb8:	d0b7      	beq.n	8004e2a <HAL_SPI_Receive+0xaa>
 8004eba:	e7ee      	b.n	8004e9a <HAL_SPI_Receive+0x11a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	6563      	str	r3, [r4, #84]	; 0x54
 8004ec0:	e7dc      	b.n	8004e7c <HAL_SPI_Receive+0xfc>
    errorcode = HAL_BUSY;
 8004ec2:	2502      	movs	r5, #2
 8004ec4:	e7ed      	b.n	8004ea2 <HAL_SPI_Receive+0x122>
  __HAL_LOCK(hspi);
 8004ec6:	2502      	movs	r5, #2
 8004ec8:	e775      	b.n	8004db6 <HAL_SPI_Receive+0x36>
	...

08004ecc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ecc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	6a02      	ldr	r2, [r0, #32]
{
 8004ed0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004edc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ede:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004ee2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ee4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004ee6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004eea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eec:	4d0a      	ldr	r5, [pc, #40]	; (8004f18 <TIM_OC1_SetConfig+0x4c>)
 8004eee:	42a8      	cmp	r0, r5
 8004ef0:	d10b      	bne.n	8004f0a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ef2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ef4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004ef8:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004efa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004efe:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004f02:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f04:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f08:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f0c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f0e:	684a      	ldr	r2, [r1, #4]
 8004f10:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f12:	6203      	str	r3, [r0, #32]
}
 8004f14:	bd70      	pop	{r4, r5, r6, pc}
 8004f16:	bf00      	nop
 8004f18:	40012c00 	.word	0x40012c00

08004f1c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f1e:	6a02      	ldr	r2, [r0, #32]
{
 8004f20:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f26:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f2e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004f32:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f34:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004f36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3e:	4d0b      	ldr	r5, [pc, #44]	; (8004f6c <TIM_OC3_SetConfig+0x50>)
 8004f40:	42a8      	cmp	r0, r5
 8004f42:	d10d      	bne.n	8004f60 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f44:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f4e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f52:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004f56:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f5c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f62:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f64:	684a      	ldr	r2, [r1, #4]
 8004f66:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	6203      	str	r3, [r0, #32]
}
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	40012c00 	.word	0x40012c00

08004f70 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f70:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f72:	6a02      	ldr	r2, [r0, #32]
{
 8004f74:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f7a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f82:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f8a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f90:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f94:	4d06      	ldr	r5, [pc, #24]	; (8004fb0 <TIM_OC4_SetConfig+0x40>)
 8004f96:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f98:	bf02      	ittt	eq
 8004f9a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f9c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fa0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fa8:	684a      	ldr	r2, [r1, #4]
 8004faa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fac:	6203      	str	r3, [r0, #32]
}
 8004fae:	bd30      	pop	{r4, r5, pc}
 8004fb0:	40012c00 	.word	0x40012c00

08004fb4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d120      	bne.n	8004ffe <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fc2:	6803      	ldr	r3, [r0, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fcc:	4a0d      	ldr	r2, [pc, #52]	; (8005004 <HAL_TIM_Base_Start_IT+0x50>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x34>
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d007      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x34>
 8004fd8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x34>
 8004fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fee:	2a06      	cmp	r2, #6
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ffa:	2000      	movs	r0, #0
}
 8004ffc:	4770      	bx	lr
    return HAL_ERROR;
 8004ffe:	2001      	movs	r0, #1
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40012c00 	.word	0x40012c00

08005008 <HAL_TIM_OC_DelayElapsedCallback>:
 8005008:	4770      	bx	lr

0800500a <HAL_TIM_IC_CaptureCallback>:
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_PWM_PulseFinishedCallback>:
 800500c:	4770      	bx	lr

0800500e <HAL_TIM_TriggerCallback>:
 800500e:	4770      	bx	lr

08005010 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005010:	6803      	ldr	r3, [r0, #0]
{
 8005012:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005014:	691a      	ldr	r2, [r3, #16]
{
 8005016:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005018:	0791      	lsls	r1, r2, #30
 800501a:	d50e      	bpl.n	800503a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	0792      	lsls	r2, r2, #30
 8005020:	d50b      	bpl.n	800503a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005022:	f06f 0202 	mvn.w	r2, #2
 8005026:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005028:	2201      	movs	r2, #1
 800502a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	079b      	lsls	r3, r3, #30
 8005030:	d077      	beq.n	8005122 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8005032:	f7ff ffea 	bl	800500a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	2300      	movs	r3, #0
 8005038:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	0750      	lsls	r0, r2, #29
 8005040:	d510      	bpl.n	8005064 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	0751      	lsls	r1, r2, #29
 8005046:	d50d      	bpl.n	8005064 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005048:	f06f 0204 	mvn.w	r2, #4
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504e:	2202      	movs	r2, #2
 8005050:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005052:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8005054:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005056:	f413 7f40 	tst.w	r3, #768	; 0x300
 800505a:	d068      	beq.n	800512e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800505c:	f7ff ffd5 	bl	800500a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005060:	2300      	movs	r3, #0
 8005062:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	0712      	lsls	r2, r2, #28
 800506a:	d50f      	bpl.n	800508c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	0710      	lsls	r0, r2, #28
 8005070:	d50c      	bpl.n	800508c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005072:	f06f 0208 	mvn.w	r2, #8
 8005076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005078:	2204      	movs	r2, #4
 800507a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800507c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800507e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005080:	0799      	lsls	r1, r3, #30
 8005082:	d05a      	beq.n	800513a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005084:	f7ff ffc1 	bl	800500a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005088:	2300      	movs	r3, #0
 800508a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	06d2      	lsls	r2, r2, #27
 8005092:	d510      	bpl.n	80050b6 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	06d0      	lsls	r0, r2, #27
 8005098:	d50d      	bpl.n	80050b6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800509a:	f06f 0210 	mvn.w	r2, #16
 800509e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a0:	2208      	movs	r2, #8
 80050a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a4:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80050ac:	d04b      	beq.n	8005146 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	f7ff ffac 	bl	800500a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	2300      	movs	r3, #0
 80050b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	07d1      	lsls	r1, r2, #31
 80050bc:	d508      	bpl.n	80050d0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	07d2      	lsls	r2, r2, #31
 80050c2:	d505      	bpl.n	80050d0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80050cc:	f7fd f82e 	bl	800212c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	0610      	lsls	r0, r2, #24
 80050d6:	d508      	bpl.n	80050ea <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	0611      	lsls	r1, r2, #24
 80050dc:	d505      	bpl.n	80050ea <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050de:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80050e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80050e6:	f000 fa7c 	bl	80055e2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	0652      	lsls	r2, r2, #25
 80050f0:	d508      	bpl.n	8005104 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	0650      	lsls	r0, r2, #25
 80050f6:	d505      	bpl.n	8005104 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80050fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005100:	f7ff ff85 	bl	800500e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	0691      	lsls	r1, r2, #26
 800510a:	d522      	bpl.n	8005152 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	0692      	lsls	r2, r2, #26
 8005110:	d51f      	bpl.n	8005152 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005112:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005116:	4620      	mov	r0, r4
}
 8005118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800511c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800511e:	f000 ba5f 	b.w	80055e0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	f7ff ff71 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005126:	4620      	mov	r0, r4
 8005128:	f7ff ff70 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
 800512c:	e783      	b.n	8005036 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	f7ff ff6b 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005132:	4620      	mov	r0, r4
 8005134:	f7ff ff6a 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
 8005138:	e792      	b.n	8005060 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	f7ff ff65 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513e:	4620      	mov	r0, r4
 8005140:	f7ff ff64 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
 8005144:	e7a0      	b.n	8005088 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	f7ff ff5f 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514a:	4620      	mov	r0, r4
 800514c:	f7ff ff5e 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
 8005150:	e7af      	b.n	80050b2 <HAL_TIM_IRQHandler+0xa2>
}
 8005152:	bd10      	pop	{r4, pc}

08005154 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005154:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8005156:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005158:	4290      	cmp	r0, r2
 800515a:	d00a      	beq.n	8005172 <TIM_Base_SetConfig+0x1e>
 800515c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005160:	d007      	beq.n	8005172 <TIM_Base_SetConfig+0x1e>
 8005162:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005166:	4290      	cmp	r0, r2
 8005168:	d003      	beq.n	8005172 <TIM_Base_SetConfig+0x1e>
 800516a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800516e:	4290      	cmp	r0, r2
 8005170:	d115      	bne.n	800519e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8005172:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005178:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517a:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <TIM_Base_SetConfig+0x6c>)
 800517c:	4290      	cmp	r0, r2
 800517e:	d00a      	beq.n	8005196 <TIM_Base_SetConfig+0x42>
 8005180:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005184:	d007      	beq.n	8005196 <TIM_Base_SetConfig+0x42>
 8005186:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800518a:	4290      	cmp	r0, r2
 800518c:	d003      	beq.n	8005196 <TIM_Base_SetConfig+0x42>
 800518e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005192:	4290      	cmp	r0, r2
 8005194:	d103      	bne.n	800519e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005196:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800519c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800519e:	694a      	ldr	r2, [r1, #20]
 80051a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80051a6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a8:	688b      	ldr	r3, [r1, #8]
 80051aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80051ac:	680b      	ldr	r3, [r1, #0]
 80051ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <TIM_Base_SetConfig+0x6c>)
 80051b2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80051b4:	bf04      	itt	eq
 80051b6:	690b      	ldreq	r3, [r1, #16]
 80051b8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80051ba:	2301      	movs	r3, #1
 80051bc:	6143      	str	r3, [r0, #20]
}
 80051be:	4770      	bx	lr
 80051c0:	40012c00 	.word	0x40012c00

080051c4 <HAL_TIM_Base_Init>:
{
 80051c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80051c6:	4604      	mov	r4, r0
 80051c8:	b330      	cbz	r0, 8005218 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051d2:	b91b      	cbnz	r3, 80051dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80051d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80051d8:	f7fd fb7a 	bl	80028d0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051de:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e4:	1d21      	adds	r1, r4, #4
 80051e6:	f7ff ffb5 	bl	8005154 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ea:	2301      	movs	r3, #1
  return HAL_OK;
 80051ec:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80051f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80051fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80051fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005202:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800520e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005212:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005216:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005218:	2001      	movs	r0, #1
 800521a:	e7fc      	b.n	8005216 <HAL_TIM_Base_Init+0x52>

0800521c <HAL_TIM_PWM_Init>:
{
 800521c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800521e:	4604      	mov	r4, r0
 8005220:	b330      	cbz	r0, 8005270 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005226:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800522a:	b91b      	cbnz	r3, 8005234 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800522c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005230:	f7fd fb6c 	bl	800290c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005236:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523c:	1d21      	adds	r1, r4, #4
 800523e:	f7ff ff89 	bl	8005154 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005242:	2301      	movs	r3, #1
  return HAL_OK;
 8005244:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005246:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800524e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005252:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005256:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800525e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005262:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800526a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800526e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005270:	2001      	movs	r0, #1
 8005272:	e7fc      	b.n	800526e <HAL_TIM_PWM_Init+0x52>

08005274 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8005274:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005276:	6a02      	ldr	r2, [r0, #32]
{
 8005278:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527a:	f022 0210 	bic.w	r2, r2, #16
 800527e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005280:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005282:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005286:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800528e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005290:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005294:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005298:	4d0b      	ldr	r5, [pc, #44]	; (80052c8 <TIM_OC2_SetConfig+0x54>)
 800529a:	42a8      	cmp	r0, r5
 800529c:	d10d      	bne.n	80052ba <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800529e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80052a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052ac:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80052b0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80052b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052b6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80052ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80052bc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80052be:	684a      	ldr	r2, [r1, #4]
 80052c0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80052c2:	6203      	str	r3, [r0, #32]
}
 80052c4:	bd70      	pop	{r4, r5, r6, pc}
 80052c6:	bf00      	nop
 80052c8:	40012c00 	.word	0x40012c00

080052cc <HAL_TIM_PWM_ConfigChannel>:
{
 80052cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80052ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80052d2:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d050      	beq.n	800537a <HAL_TIM_PWM_ConfigChannel+0xae>
 80052d8:	2301      	movs	r3, #1
  switch (Channel)
 80052da:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80052dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80052e0:	d03b      	beq.n	800535a <HAL_TIM_PWM_ConfigChannel+0x8e>
 80052e2:	d807      	bhi.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x28>
 80052e4:	b1c2      	cbz	r2, 8005318 <HAL_TIM_PWM_ConfigChannel+0x4c>
 80052e6:	2a04      	cmp	r2, #4
 80052e8:	d027      	beq.n	800533a <HAL_TIM_PWM_ConfigChannel+0x6e>
 80052ea:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80052ec:	2300      	movs	r3, #0
 80052ee:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80052f4:	2a0c      	cmp	r2, #12
 80052f6:	d1f8      	bne.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052f8:	6800      	ldr	r0, [r0, #0]
 80052fa:	f7ff fe39 	bl	8004f70 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052fe:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005300:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005306:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005308:	69c3      	ldr	r3, [r0, #28]
 800530a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800530e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005310:	69c3      	ldr	r3, [r0, #28]
 8005312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005316:	e02e      	b.n	8005376 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005318:	6800      	ldr	r0, [r0, #0]
 800531a:	f7ff fdd7 	bl	8004ecc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800531e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005320:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005322:	f043 0308 	orr.w	r3, r3, #8
 8005326:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005328:	6983      	ldr	r3, [r0, #24]
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005330:	6983      	ldr	r3, [r0, #24]
 8005332:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005334:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2000      	movs	r0, #0
      break;
 8005338:	e7d8      	b.n	80052ec <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800533a:	6800      	ldr	r0, [r0, #0]
 800533c:	f7ff ff9a 	bl	8005274 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005340:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005342:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005348:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800534a:	6983      	ldr	r3, [r0, #24]
 800534c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005350:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005352:	6983      	ldr	r3, [r0, #24]
 8005354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005358:	e7ec      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	f7ff fdde 	bl	8004f1c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005360:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005362:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005364:	f043 0308 	orr.w	r3, r3, #8
 8005368:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800536a:	69c3      	ldr	r3, [r0, #28]
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005372:	69c3      	ldr	r3, [r0, #28]
 8005374:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005376:	61c3      	str	r3, [r0, #28]
 8005378:	e7dd      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 800537a:	2002      	movs	r0, #2
 800537c:	e7b9      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x26>

0800537e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800537e:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005380:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005382:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005384:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005388:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800538c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538e:	6082      	str	r2, [r0, #8]
}
 8005390:	bd10      	pop	{r4, pc}

08005392 <HAL_TIM_ConfigClockSource>:
{
 8005392:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005394:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005398:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800539a:	2b01      	cmp	r3, #1
 800539c:	f04f 0002 	mov.w	r0, #2
 80053a0:	f000 808e 	beq.w	80054c0 <HAL_TIM_ConfigClockSource+0x12e>
 80053a4:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80053a6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80053aa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80053ac:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80053ba:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80053bc:	680b      	ldr	r3, [r1, #0]
 80053be:	2b60      	cmp	r3, #96	; 0x60
 80053c0:	d04f      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0xd0>
 80053c2:	d832      	bhi.n	800542a <HAL_TIM_ConfigClockSource+0x98>
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d064      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x100>
 80053c8:	d816      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x66>
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d00d      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x58>
 80053ce:	d80a      	bhi.n	80053e6 <HAL_TIM_ConfigClockSource+0x54>
 80053d0:	f033 0110 	bics.w	r1, r3, #16
 80053d4:	d009      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80053dc:	2300      	movs	r3, #0
 80053de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80053e2:	4610      	mov	r0, r2
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80053e6:	2b30      	cmp	r3, #48	; 0x30
 80053e8:	d1f5      	bne.n	80053d6 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80053ea:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f043 0307 	orr.w	r3, r3, #7
 80053f6:	e028      	b.n	800544a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80053f8:	2b50      	cmp	r3, #80	; 0x50
 80053fa:	d1ec      	bne.n	80053d6 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 80053fc:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80053fe:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005400:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005402:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005404:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800540e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005410:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005416:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800541a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800541c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800541e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005424:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005428:	e00f      	b.n	800544a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	d00d      	beq.n	800544c <HAL_TIM_ConfigClockSource+0xba>
 8005430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005434:	d00c      	beq.n	8005450 <HAL_TIM_ConfigClockSource+0xbe>
 8005436:	2b70      	cmp	r3, #112	; 0x70
 8005438:	d1cd      	bne.n	80053d6 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	68cb      	ldr	r3, [r1, #12]
 800543c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005440:	f7ff ff9d 	bl	800537e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005444:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005446:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 800544a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800544c:	2200      	movs	r2, #0
 800544e:	e7c2      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005450:	68cb      	ldr	r3, [r1, #12]
 8005452:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005456:	f7ff ff92 	bl	800537e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800545a:	6883      	ldr	r3, [r0, #8]
 800545c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005460:	e7f3      	b.n	800544a <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8005462:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005464:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005466:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005468:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 800546c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546e:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005470:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005476:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800547a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005482:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005484:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005486:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800548c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005490:	e7db      	b.n	800544a <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8005492:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005494:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005496:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005498:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549e:	f023 0301 	bic.w	r3, r3, #1
 80054a2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80054a6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80054b0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80054b2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80054b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ba:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80054be:	e7c4      	b.n	800544a <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80054c0:	4602      	mov	r2, r0
 80054c2:	e78e      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x50>

080054c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054c6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054c8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054ca:	f001 011f 	and.w	r1, r1, #31
 80054ce:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80054d0:	ea23 0304 	bic.w	r3, r3, r4
 80054d4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054d6:	6a03      	ldr	r3, [r0, #32]
 80054d8:	408a      	lsls	r2, r1
 80054da:	431a      	orrs	r2, r3
 80054dc:	6202      	str	r2, [r0, #32]
}
 80054de:	bd10      	pop	{r4, pc}

080054e0 <HAL_TIM_OC_Start>:
{
 80054e0:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054e2:	b929      	cbnz	r1, 80054f0 <HAL_TIM_OC_Start+0x10>
 80054e4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d021      	beq.n	8005530 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 80054ec:	2001      	movs	r0, #1
}
 80054ee:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054f0:	2904      	cmp	r1, #4
 80054f2:	d107      	bne.n	8005504 <HAL_TIM_OC_Start+0x24>
 80054f4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d1f7      	bne.n	80054ec <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fc:	2302      	movs	r3, #2
 80054fe:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005502:	e018      	b.n	8005536 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005504:	2908      	cmp	r1, #8
 8005506:	d107      	bne.n	8005518 <HAL_TIM_OC_Start+0x38>
 8005508:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800550c:	2b01      	cmp	r3, #1
 800550e:	d1ed      	bne.n	80054ec <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005510:	2302      	movs	r3, #2
 8005512:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005516:	e00e      	b.n	8005536 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005518:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800551c:	2b01      	cmp	r3, #1
 800551e:	d1e5      	bne.n	80054ec <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005520:	2904      	cmp	r1, #4
 8005522:	d0eb      	beq.n	80054fc <HAL_TIM_OC_Start+0x1c>
 8005524:	2908      	cmp	r1, #8
 8005526:	d0f3      	beq.n	8005510 <HAL_TIM_OC_Start+0x30>
 8005528:	2302      	movs	r3, #2
 800552a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800552e:	e002      	b.n	8005536 <HAL_TIM_OC_Start+0x56>
 8005530:	2302      	movs	r3, #2
 8005532:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005536:	6800      	ldr	r0, [r0, #0]
 8005538:	2201      	movs	r2, #1
 800553a:	f7ff ffc3 	bl	80054c4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800553e:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <HAL_TIM_OC_Start+0x98>)
 8005540:	4298      	cmp	r0, r3
 8005542:	d10a      	bne.n	800555a <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 8005544:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554c:	6883      	ldr	r3, [r0, #8]
 800554e:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005552:	2b06      	cmp	r3, #6
 8005554:	d10b      	bne.n	800556e <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 8005556:	2000      	movs	r0, #0
 8005558:	e7c9      	b.n	80054ee <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800555e:	d0f5      	beq.n	800554c <HAL_TIM_OC_Start+0x6c>
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_TIM_OC_Start+0x9c>)
 8005562:	4298      	cmp	r0, r3
 8005564:	d0f2      	beq.n	800554c <HAL_TIM_OC_Start+0x6c>
 8005566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556a:	4298      	cmp	r0, r3
 800556c:	d0ee      	beq.n	800554c <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 800556e:	6803      	ldr	r3, [r0, #0]
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6003      	str	r3, [r0, #0]
 8005576:	e7ee      	b.n	8005556 <HAL_TIM_OC_Start+0x76>
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40000400 	.word	0x40000400

08005580 <HAL_TIM_PWM_Start>:
 8005580:	f7ff bfae 	b.w	80054e0 <HAL_TIM_OC_Start>

08005584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005584:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005586:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800558a:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800558c:	2b01      	cmp	r3, #1
 800558e:	f04f 0002 	mov.w	r0, #2
 8005592:	d022      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005594:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005596:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800559a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800559c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800559e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80055a4:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a8:	4c0c      	ldr	r4, [pc, #48]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	d00a      	beq.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80055ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b2:	d007      	beq.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80055b4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	d003      	beq.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80055bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	d104      	bne.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ca:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055cc:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80055d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80055d2:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80055d6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80055da:	bd30      	pop	{r4, r5, pc}
 80055dc:	40012c00 	.word	0x40012c00

080055e0 <HAL_TIMEx_CommutCallback>:
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIMEx_BreakCallback>:
 80055e2:	4770      	bx	lr

080055e4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	f102 030c 	add.w	r3, r2, #12
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	320c      	adds	r2, #12
 80055f4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80055f8:	6802      	ldr	r2, [r0, #0]
 80055fa:	2900      	cmp	r1, #0
 80055fc:	d1f2      	bne.n	80055e4 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	f102 0314 	add.w	r3, r2, #20
 8005602:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	f102 0c14 	add.w	ip, r2, #20
 800560e:	e84c 3100 	strex	r1, r3, [ip]
 8005612:	2900      	cmp	r1, #0
 8005614:	d1f3      	bne.n	80055fe <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005616:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10b      	bne.n	8005634 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	f102 030c 	add.w	r3, r2, #12
 8005620:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005624:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	f102 0c0c 	add.w	ip, r2, #12
 800562c:	e84c 3100 	strex	r1, r3, [ip]
 8005630:	2900      	cmp	r1, #0
 8005632:	d1f3      	bne.n	800561c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005634:	2320      	movs	r3, #32
 8005636:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563a:	2300      	movs	r3, #0
 800563c:	6303      	str	r3, [r0, #48]	; 0x30
}
 800563e:	4770      	bx	lr

08005640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005640:	b510      	push	{r4, lr}
 8005642:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005644:	6803      	ldr	r3, [r0, #0]
 8005646:	68c1      	ldr	r1, [r0, #12]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800564e:	430a      	orrs	r2, r1
 8005650:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005652:	6882      	ldr	r2, [r0, #8]
 8005654:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005656:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005658:	4302      	orrs	r2, r0
 800565a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800565c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8005660:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005664:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005666:	430a      	orrs	r2, r1
 8005668:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	69a1      	ldr	r1, [r4, #24]
 800566e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005672:	430a      	orrs	r2, r1
 8005674:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005676:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <UART_SetConfig+0x70>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d115      	bne.n	80056a8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7ff f84c 	bl	8004718 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005680:	2319      	movs	r3, #25
 8005682:	4343      	muls	r3, r0
 8005684:	6862      	ldr	r2, [r4, #4]
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	0092      	lsls	r2, r2, #2
 800568a:	fbb3 f3f2 	udiv	r3, r3, r2
 800568e:	2264      	movs	r2, #100	; 0x64
 8005690:	fbb3 f1f2 	udiv	r1, r3, r2
 8005694:	fb02 3311 	mls	r3, r2, r1, r3
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	3332      	adds	r3, #50	; 0x32
 800569c:	fbb3 f3f2 	udiv	r3, r3, r2
 80056a0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80056a4:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80056a6:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80056a8:	f7ff f826 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 80056ac:	e7e8      	b.n	8005680 <UART_SetConfig+0x40>
 80056ae:	bf00      	nop
 80056b0:	40013800 	.word	0x40013800

080056b4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	4604      	mov	r4, r0
 80056b8:	460e      	mov	r6, r1
 80056ba:	4617      	mov	r7, r2
 80056bc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	6813      	ldr	r3, [r2, #0]
 80056c2:	ea36 0303 	bics.w	r3, r6, r3
 80056c6:	d101      	bne.n	80056cc <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80056c8:	2000      	movs	r0, #0
 80056ca:	e028      	b.n	800571e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80056cc:	1c6b      	adds	r3, r5, #1
 80056ce:	d0f7      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056d0:	b125      	cbz	r5, 80056dc <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80056d2:	f7fd faa5 	bl	8002c20 <HAL_GetTick>
 80056d6:	1bc0      	subs	r0, r0, r7
 80056d8:	4285      	cmp	r5, r0
 80056da:	d2f0      	bcs.n	80056be <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	f102 030c 	add.w	r3, r2, #12
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	320c      	adds	r2, #12
 80056ec:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80056f0:	6821      	ldr	r1, [r4, #0]
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d1f2      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	f101 0314 	add.w	r3, r1, #20
 80056fa:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	f101 0014 	add.w	r0, r1, #20
 8005706:	e840 3200 	strex	r2, r3, [r0]
 800570a:	2a00      	cmp	r2, #0
 800570c:	d1f3      	bne.n	80056f6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800570e:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8005710:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8005712:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8005716:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800571a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800571e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005720 <HAL_UART_Init>:
{
 8005720:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005722:	4604      	mov	r4, r0
 8005724:	b348      	cbz	r0, 800577a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005726:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800572a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800572e:	b91b      	cbnz	r3, 8005738 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005730:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8005734:	f7fd f924 	bl	8002980 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005738:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800573a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800573c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8005740:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005742:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005748:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800574a:	f7ff ff79 	bl	8005640 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800574e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005760:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005768:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800576a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800576e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005772:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005776:	6360      	str	r0, [r4, #52]	; 0x34
}
 8005778:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800577a:	2001      	movs	r0, #1
 800577c:	e7fc      	b.n	8005778 <HAL_UART_Init+0x58>

0800577e <HAL_UART_Transmit>:
{
 800577e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005782:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005784:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8005788:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800578a:	2b20      	cmp	r3, #32
{
 800578c:	460e      	mov	r6, r1
 800578e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005790:	d13c      	bne.n	800580c <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8005792:	2900      	cmp	r1, #0
 8005794:	d03c      	beq.n	8005810 <HAL_UART_Transmit+0x92>
 8005796:	2a00      	cmp	r2, #0
 8005798:	d03a      	beq.n	8005810 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800579a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579c:	2500      	movs	r5, #0
 800579e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80057a4:	f7fd fa3c 	bl	8002c20 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80057aa:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80057b0:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80057b2:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b4:	d103      	bne.n	80057be <HAL_UART_Transmit+0x40>
 80057b6:	6923      	ldr	r3, [r4, #16]
 80057b8:	b90b      	cbnz	r3, 80057be <HAL_UART_Transmit+0x40>
 80057ba:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80057bc:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80057be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	b953      	cbnz	r3, 80057da <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057c4:	464b      	mov	r3, r9
 80057c6:	4642      	mov	r2, r8
 80057c8:	2140      	movs	r1, #64	; 0x40
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7ff ff72 	bl	80056b4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80057d0:	b950      	cbnz	r0, 80057e8 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80057d2:	2320      	movs	r3, #32
 80057d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80057d8:	e007      	b.n	80057ea <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	464b      	mov	r3, r9
 80057dc:	4642      	mov	r2, r8
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	4620      	mov	r0, r4
 80057e2:	f7ff ff67 	bl	80056b4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80057e6:	b110      	cbz	r0, 80057ee <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 80057e8:	2003      	movs	r0, #3
}
 80057ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ee:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80057f0:	b94e      	cbnz	r6, 8005806 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80057f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057fa:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80057fc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80057fe:	3901      	subs	r1, #1
 8005800:	b289      	uxth	r1, r1
 8005802:	84e1      	strh	r1, [r4, #38]	; 0x26
 8005804:	e7db      	b.n	80057be <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005806:	f816 3b01 	ldrb.w	r3, [r6], #1
 800580a:	e7f6      	b.n	80057fa <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 800580c:	2002      	movs	r0, #2
 800580e:	e7ec      	b.n	80057ea <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8005810:	2001      	movs	r0, #1
 8005812:	e7ea      	b.n	80057ea <HAL_UART_Transmit+0x6c>

08005814 <HAL_UART_RxCpltCallback>:
 8005814:	4770      	bx	lr

08005816 <HAL_UART_RxHalfCpltCallback>:
 8005816:	4770      	bx	lr

08005818 <HAL_UART_ErrorCallback>:
 8005818:	4770      	bx	lr

0800581a <UART_DMAError>:
{
 800581a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800581c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800581e:	6803      	ldr	r3, [r0, #0]
 8005820:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005822:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005826:	2921      	cmp	r1, #33	; 0x21
 8005828:	d112      	bne.n	8005850 <UART_DMAError+0x36>
 800582a:	0612      	lsls	r2, r2, #24
 800582c:	d510      	bpl.n	8005850 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 800582e:	2200      	movs	r2, #0
 8005830:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	f103 020c 	add.w	r2, r3, #12
 8005836:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800583a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	f103 0c0c 	add.w	ip, r3, #12
 8005842:	e84c 2100 	strex	r1, r2, [ip]
 8005846:	2900      	cmp	r1, #0
 8005848:	d1f3      	bne.n	8005832 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 800584a:	2220      	movs	r2, #32
 800584c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005850:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005852:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8005856:	2a22      	cmp	r2, #34	; 0x22
 8005858:	d105      	bne.n	8005866 <UART_DMAError+0x4c>
 800585a:	065b      	lsls	r3, r3, #25
 800585c:	d503      	bpl.n	8005866 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 800585e:	2300      	movs	r3, #0
 8005860:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005862:	f7ff febf 	bl	80055e4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005866:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005868:	f043 0310 	orr.w	r3, r3, #16
 800586c:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 800586e:	f7ff ffd3 	bl	8005818 <HAL_UART_ErrorCallback>
}
 8005872:	bd08      	pop	{r3, pc}

08005874 <HAL_UARTEx_RxEventCallback>:
}
 8005874:	4770      	bx	lr

08005876 <UART_DMARxHalfCplt>:
{
 8005876:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005878:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800587a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800587c:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005880:	2b01      	cmp	r3, #1
 8005882:	d104      	bne.n	800588e <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005884:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005886:	0849      	lsrs	r1, r1, #1
 8005888:	f7ff fff4 	bl	8005874 <HAL_UARTEx_RxEventCallback>
}
 800588c:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800588e:	f7ff ffc2 	bl	8005816 <HAL_UART_RxHalfCpltCallback>
}
 8005892:	e7fb      	b.n	800588c <UART_DMARxHalfCplt+0x16>

08005894 <UART_DMAReceiveCplt>:
{
 8005894:	b508      	push	{r3, lr}
 8005896:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005898:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800589a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f013 0320 	ands.w	r3, r3, #32
 80058a2:	d137      	bne.n	8005914 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 80058a4:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	f102 030c 	add.w	r3, r2, #12
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	320c      	adds	r2, #12
 80058b6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80058ba:	6803      	ldr	r3, [r0, #0]
 80058bc:	2900      	cmp	r1, #0
 80058be:	d1f2      	bne.n	80058a6 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	f103 0214 	add.w	r2, r3, #20
 80058c4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	f103 0c14 	add.w	ip, r3, #20
 80058d0:	e84c 2100 	strex	r1, r2, [ip]
 80058d4:	2900      	cmp	r1, #0
 80058d6:	d1f3      	bne.n	80058c0 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	f103 0214 	add.w	r2, r3, #20
 80058dc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	f103 0c14 	add.w	ip, r3, #20
 80058e8:	e84c 2100 	strex	r1, r2, [ip]
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d1f3      	bne.n	80058d8 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80058f0:	2220      	movs	r2, #32
 80058f2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80058f8:	2a01      	cmp	r2, #1
 80058fa:	d10b      	bne.n	8005914 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	f103 020c 	add.w	r2, r3, #12
 8005900:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005904:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	f103 0c0c 	add.w	ip, r3, #12
 800590c:	e84c 2100 	strex	r1, r2, [ip]
 8005910:	2900      	cmp	r1, #0
 8005912:	d1f3      	bne.n	80058fc <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005914:	2300      	movs	r3, #0
 8005916:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800591a:	2b01      	cmp	r3, #1
 800591c:	d103      	bne.n	8005926 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005920:	f7ff ffa8 	bl	8005874 <HAL_UARTEx_RxEventCallback>
}
 8005924:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8005926:	f7ff ff75 	bl	8005814 <HAL_UART_RxCpltCallback>
}
 800592a:	e7fb      	b.n	8005924 <UART_DMAReceiveCplt+0x90>

0800592c <UART_Start_Receive_DMA>:
{
 800592c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800592e:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8005930:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005932:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005934:	2222      	movs	r2, #34	; 0x22
{
 8005936:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8005938:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593a:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800593c:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005940:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8005942:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005944:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005946:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <UART_Start_Receive_DMA+0x90>)
 800594a:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 800594e:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005952:	460a      	mov	r2, r1
 8005954:	1d31      	adds	r1, r6, #4
 8005956:	f7fd fe3d 	bl	80035d4 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	9501      	str	r5, [sp, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	9201      	str	r2, [sp, #4]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	9201      	str	r2, [sp, #4]
 8005966:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005968:	6922      	ldr	r2, [r4, #16]
 800596a:	b15a      	cbz	r2, 8005984 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	f103 020c 	add.w	r2, r3, #12
 8005970:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	f103 000c 	add.w	r0, r3, #12
 800597c:	e840 2100 	strex	r1, r2, [r0]
 8005980:	2900      	cmp	r1, #0
 8005982:	d1f3      	bne.n	800596c <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	f103 0214 	add.w	r2, r3, #20
 8005988:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	f103 0014 	add.w	r0, r3, #20
 8005994:	e840 2100 	strex	r1, r2, [r0]
 8005998:	2900      	cmp	r1, #0
 800599a:	d1f3      	bne.n	8005984 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	f103 0214 	add.w	r2, r3, #20
 80059a0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	f103 0114 	add.w	r1, r3, #20
 80059ac:	e841 2000 	strex	r0, r2, [r1]
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d1f3      	bne.n	800599c <UART_Start_Receive_DMA+0x70>
}
 80059b4:	b002      	add	sp, #8
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	08005895 	.word	0x08005895
 80059bc:	08005877 	.word	0x08005877
 80059c0:	0800581b 	.word	0x0800581b

080059c4 <HAL_UART_Receive_DMA>:
{
 80059c4:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 80059c6:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 80059ca:	2e20      	cmp	r6, #32
 80059cc:	d106      	bne.n	80059dc <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 80059ce:	b141      	cbz	r1, 80059e2 <HAL_UART_Receive_DMA+0x1e>
 80059d0:	b13a      	cbz	r2, 80059e2 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d2:	2400      	movs	r4, #0
 80059d4:	6304      	str	r4, [r0, #48]	; 0x30
}
 80059d6:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80059d8:	f7ff bfa8 	b.w	800592c <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80059dc:	2002      	movs	r0, #2
}
 80059de:	bc70      	pop	{r4, r5, r6}
 80059e0:	4770      	bx	lr
      return HAL_ERROR;
 80059e2:	2001      	movs	r0, #1
 80059e4:	e7fb      	b.n	80059de <HAL_UART_Receive_DMA+0x1a>
	...

080059e8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ec:	b113      	cbz	r3, 80059f4 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80059ee:	f06f 0005 	mvn.w	r0, #5
 80059f2:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f8      	bne.n	80059ee <osKernelInitialize+0x6>
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <osKernelInitialize+0x34>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	2802      	cmp	r0, #2
 8005a02:	d106      	bne.n	8005a12 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a04:	f3ef 8311 	mrs	r3, BASEPRI
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f0      	bne.n	80059ee <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8005a10:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d1fa      	bne.n	8005a0c <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8005a16:	2201      	movs	r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a1a:	4770      	bx	lr
 8005a1c:	20000958 	.word	0x20000958

08005a20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a20:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a22:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a26:	b113      	cbz	r3, 8005a2e <osKernelStart+0xe>
    stat = osErrorISR;
 8005a28:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8005a2c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2e:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8005a32:	2c00      	cmp	r4, #0
 8005a34:	d1f8      	bne.n	8005a28 <osKernelStart+0x8>
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <osKernelStart+0x3c>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	2a02      	cmp	r2, #2
 8005a3c:	d106      	bne.n	8005a4c <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f0      	bne.n	8005a28 <osKernelStart+0x8>
      stat = osError;
 8005a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 8005a4a:	e7ef      	b.n	8005a2c <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8005a4c:	2a01      	cmp	r2, #1
 8005a4e:	d1fa      	bne.n	8005a46 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8005a50:	2202      	movs	r2, #2
 8005a52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005a54:	f000 fda8 	bl	80065a8 <vTaskStartScheduler>
      stat = osOK;
 8005a58:	4620      	mov	r0, r4
 8005a5a:	e7e7      	b.n	8005a2c <osKernelStart+0xc>
 8005a5c:	20000958 	.word	0x20000958

08005a60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a62:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a64:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a66:	b087      	sub	sp, #28
 8005a68:	460b      	mov	r3, r1
  hTask = NULL;
 8005a6a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a6c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005a70:	bb52      	cbnz	r2, 8005ac8 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a72:	f3ef 8210 	mrs	r2, PRIMASK
 8005a76:	bb3a      	cbnz	r2, 8005ac8 <osThreadNew+0x68>
 8005a78:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <osThreadNew+0xb4>)
 8005a7a:	6812      	ldr	r2, [r2, #0]
 8005a7c:	2a02      	cmp	r2, #2
 8005a7e:	d102      	bne.n	8005a86 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a80:	f3ef 8211 	mrs	r2, BASEPRI
 8005a84:	bb02      	cbnz	r2, 8005ac8 <osThreadNew+0x68>
 8005a86:	b1f8      	cbz	r0, 8005ac8 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005a8e:	2c00      	cmp	r4, #0
 8005a90:	d030      	beq.n	8005af4 <osThreadNew+0x94>
      if (attr->name != NULL) {
 8005a92:	6821      	ldr	r1, [r4, #0]
 8005a94:	b909      	cbnz	r1, 8005a9a <osThreadNew+0x3a>
    name  = &empty;
 8005a96:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005a9a:	69a5      	ldr	r5, [r4, #24]
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	bf08      	it	eq
 8005aa0:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005aa2:	1e6a      	subs	r2, r5, #1
 8005aa4:	2a37      	cmp	r2, #55	; 0x37
 8005aa6:	46ac      	mov	ip, r5
 8005aa8:	d82a      	bhi.n	8005b00 <osThreadNew+0xa0>
 8005aaa:	6862      	ldr	r2, [r4, #4]
 8005aac:	07d2      	lsls	r2, r2, #31
 8005aae:	d427      	bmi.n	8005b00 <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005ab0:	6966      	ldr	r6, [r4, #20]
 8005ab2:	b166      	cbz	r6, 8005ace <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ab4:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ab6:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8005aba:	b157      	cbz	r7, 8005ad2 <osThreadNew+0x72>
 8005abc:	f1be 0fa7 	cmp.w	lr, #167	; 0xa7
 8005ac0:	d902      	bls.n	8005ac8 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ac2:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ac4:	b104      	cbz	r4, 8005ac8 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ac6:	b9ee      	cbnz	r6, 8005b04 <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ac8:	9805      	ldr	r0, [sp, #20]
}
 8005aca:	b007      	add	sp, #28
 8005acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8005ace:	2250      	movs	r2, #80	; 0x50
 8005ad0:	e7f1      	b.n	8005ab6 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ad2:	f1be 0f00 	cmp.w	lr, #0
 8005ad6:	d1f7      	bne.n	8005ac8 <osThreadNew+0x68>
      if (mem == 0) {
 8005ad8:	6924      	ldr	r4, [r4, #16]
 8005ada:	2c00      	cmp	r4, #0
 8005adc:	d1f4      	bne.n	8005ac8 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ade:	ac05      	add	r4, sp, #20
 8005ae0:	e9cd c400 	strd	ip, r4, [sp]
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	f000 fd32 	bl	800654e <xTaskCreate>
 8005aea:	2801      	cmp	r0, #1
          hTask = NULL;
 8005aec:	bf1c      	itt	ne
 8005aee:	2300      	movne	r3, #0
 8005af0:	9305      	strne	r3, [sp, #20]
 8005af2:	e7e9      	b.n	8005ac8 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 8005af4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8005af8:	2250      	movs	r2, #80	; 0x50
    name  = &empty;
 8005afa:	f10d 0113 	add.w	r1, sp, #19
 8005afe:	e7ee      	b.n	8005ade <osThreadNew+0x7e>
        return (NULL);
 8005b00:	2000      	movs	r0, #0
 8005b02:	e7e2      	b.n	8005aca <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b04:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005b08:	9500      	str	r5, [sp, #0]
 8005b0a:	f000 fce9 	bl	80064e0 <xTaskCreateStatic>
 8005b0e:	9005      	str	r0, [sp, #20]
 8005b10:	e7da      	b.n	8005ac8 <osThreadNew+0x68>
 8005b12:	bf00      	nop
 8005b14:	20000958 	.word	0x20000958

08005b18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b18:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b1a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b1e:	b113      	cbz	r3, 8005b26 <osDelay+0xe>
    stat = osErrorISR;
 8005b20:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005b24:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b26:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f8      	bne.n	8005b20 <osDelay+0x8>
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <osDelay+0x34>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d103      	bne.n	8005b3e <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b36:	f3ef 8311 	mrs	r3, BASEPRI
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <osDelay+0x8>
    if (ticks != 0U) {
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d0f0      	beq.n	8005b24 <osDelay+0xc>
      vTaskDelay(ticks);
 8005b42:	f000 fe93 	bl	800686c <vTaskDelay>
    stat = osOK;
 8005b46:	2000      	movs	r0, #0
 8005b48:	e7ec      	b.n	8005b24 <osDelay+0xc>
 8005b4a:	bf00      	nop
 8005b4c:	20000958 	.word	0x20000958

08005b50 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b50:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <vApplicationGetIdleTaskMemory+0x10>)
 8005b52:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <vApplicationGetIdleTaskMemory+0x14>)
 8005b56:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b58:	2350      	movs	r3, #80	; 0x50
 8005b5a:	6013      	str	r3, [r2, #0]
}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	200008b0 	.word	0x200008b0
 8005b64:	20000770 	.word	0x20000770

08005b68 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <vApplicationGetTimerTaskMemory+0x10>)
 8005b6a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b6c:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <vApplicationGetTimerTaskMemory+0x14>)
 8005b6e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b70:	23a0      	movs	r3, #160	; 0xa0
 8005b72:	6013      	str	r3, [r2, #0]
}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000bdc 	.word	0x20000bdc
 8005b7c:	2000095c 	.word	0x2000095c

08005b80 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b84:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b88:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b8c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b8e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b94:	4770      	bx	lr

08005b96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b9a:	4770      	bx	lr

08005b9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b9c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b9e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005ba0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ba2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ba8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005baa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bac:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005bae:	3301      	adds	r3, #1
 8005bb0:	6003      	str	r3, [r0, #0]
}
 8005bb2:	4770      	bx	lr

08005bb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bb4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bb6:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bb8:	1c63      	adds	r3, r4, #1
 8005bba:	d10a      	bne.n	8005bd2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bbc:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bc2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bc4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bc6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005bc8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bca:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005bcc:	3301      	adds	r3, #1
 8005bce:	6003      	str	r3, [r0, #0]
}
 8005bd0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bd2:	f100 0208 	add.w	r2, r0, #8
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	6852      	ldr	r2, [r2, #4]
 8005bda:	6815      	ldr	r5, [r2, #0]
 8005bdc:	42a5      	cmp	r5, r4
 8005bde:	d9fa      	bls.n	8005bd6 <vListInsert+0x22>
 8005be0:	e7ed      	b.n	8005bbe <vListInsert+0xa>

08005be2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005be2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005be4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8005be8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bea:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bec:	6859      	ldr	r1, [r3, #4]
 8005bee:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bf0:	bf08      	it	eq
 8005bf2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	3a01      	subs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bfe:	6818      	ldr	r0, [r3, #0]
}
 8005c00:	4770      	bx	lr

08005c02 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c02:	b510      	push	{r4, lr}
 8005c04:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c06:	f001 f9e5 	bl	8006fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c0a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005c0c:	f001 fa02 	bl	8007014 <vPortExitCritical>

	return xReturn;
}
 8005c10:	fab4 f084 	clz	r0, r4
 8005c14:	0940      	lsrs	r0, r0, #5
 8005c16:	bd10      	pop	{r4, pc}

08005c18 <prvCopyDataToQueue>:
{
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c1c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005c1e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c20:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c22:	b952      	cbnz	r2, 8005c3a <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c24:	6807      	ldr	r7, [r0, #0]
 8005c26:	bb47      	cbnz	r7, 8005c7a <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c28:	6840      	ldr	r0, [r0, #4]
 8005c2a:	f000 ff5d 	bl	8006ae8 <xTaskPriorityDisinherit>
 8005c2e:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 8005c30:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c32:	3601      	adds	r6, #1
}
 8005c34:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c36:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005c3a:	b965      	cbnz	r5, 8005c56 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c3c:	6880      	ldr	r0, [r0, #8]
 8005c3e:	f001 fd01 	bl	8007644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c42:	68a3      	ldr	r3, [r4, #8]
 8005c44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c46:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c48:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c4a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d3f0      	bcc.n	8005c32 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	60a3      	str	r3, [r4, #8]
 8005c54:	e7ed      	b.n	8005c32 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c56:	68c0      	ldr	r0, [r0, #12]
 8005c58:	f001 fcf4 	bl	8007644 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	4251      	negs	r1, r2
 8005c62:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c64:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c66:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c68:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c6a:	bf3e      	ittt	cc
 8005c6c:	6863      	ldrcc	r3, [r4, #4]
 8005c6e:	185b      	addcc	r3, r3, r1
 8005c70:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005c72:	2d02      	cmp	r5, #2
 8005c74:	d101      	bne.n	8005c7a <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c76:	b116      	cbz	r6, 8005c7e <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8005c78:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005c7a:	2500      	movs	r5, #0
 8005c7c:	e7d9      	b.n	8005c32 <prvCopyDataToQueue+0x1a>
 8005c7e:	4635      	mov	r5, r6
 8005c80:	e7d7      	b.n	8005c32 <prvCopyDataToQueue+0x1a>

08005c82 <prvCopyDataFromQueue>:
{
 8005c82:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005c86:	4608      	mov	r0, r1
 8005c88:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c8a:	b162      	cbz	r2, 8005ca6 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c8c:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c8e:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c90:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c92:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c94:	bf28      	it	cs
 8005c96:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c98:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c9a:	bf28      	it	cs
 8005c9c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c9e:	68d9      	ldr	r1, [r3, #12]
}
 8005ca0:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005ca2:	f001 bccf 	b.w	8007644 <memcpy>
}
 8005ca6:	bc10      	pop	{r4}
 8005ca8:	4770      	bx	lr

08005caa <prvUnlockQueue>:
{
 8005caa:	b570      	push	{r4, r5, r6, lr}
 8005cac:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005cae:	f001 f991 	bl	8006fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005cb2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb6:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005cba:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cbc:	2d00      	cmp	r5, #0
 8005cbe:	dc14      	bgt.n	8005cea <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8005cc0:	23ff      	movs	r3, #255	; 0xff
 8005cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005cc6:	f001 f9a5 	bl	8007014 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005cca:	f001 f983 	bl	8006fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005cce:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd2:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8005cd6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	dc12      	bgt.n	8005d02 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005cdc:	23ff      	movs	r3, #255	; 0xff
 8005cde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8005ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005ce6:	f001 b995 	b.w	8007014 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0e7      	beq.n	8005cc0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f000 fe5b 	bl	80069ac <xTaskRemoveFromEventList>
 8005cf6:	b108      	cbz	r0, 8005cfc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8005cf8:	f000 fee0 	bl	8006abc <vTaskMissedYield>
			--cTxLock;
 8005cfc:	3d01      	subs	r5, #1
 8005cfe:	b26d      	sxtb	r5, r5
 8005d00:	e7dc      	b.n	8005cbc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0e9      	beq.n	8005cdc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 fe4f 	bl	80069ac <xTaskRemoveFromEventList>
 8005d0e:	b108      	cbz	r0, 8005d14 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8005d10:	f000 fed4 	bl	8006abc <vTaskMissedYield>
				--cRxLock;
 8005d14:	3d01      	subs	r5, #1
 8005d16:	b26d      	sxtb	r5, r5
 8005d18:	e7de      	b.n	8005cd8 <prvUnlockQueue+0x2e>

08005d1a <xQueueGenericReset>:
{
 8005d1a:	b538      	push	{r3, r4, r5, lr}
 8005d1c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005d1e:	4604      	mov	r4, r0
 8005d20:	b940      	cbnz	r0, 8005d34 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	e7fe      	b.n	8005d32 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8005d34:	f001 f94e 	bl	8006fd4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d38:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8005d3c:	434b      	muls	r3, r1
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d42:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d44:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d46:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d48:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d4a:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 8005d4c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d4e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d50:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005d5a:	b9a5      	cbnz	r5, 8005d86 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	b173      	cbz	r3, 8005d7e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d60:	f104 0010 	add.w	r0, r4, #16
 8005d64:	f000 fe22 	bl	80069ac <xTaskRemoveFromEventList>
 8005d68:	b148      	cbz	r0, 8005d7e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8005d6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005d7e:	f001 f949 	bl	8007014 <vPortExitCritical>
}
 8005d82:	2001      	movs	r0, #1
 8005d84:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d86:	f104 0010 	add.w	r0, r4, #16
 8005d8a:	f7ff fef9 	bl	8005b80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005d92:	f7ff fef5 	bl	8005b80 <vListInitialise>
 8005d96:	e7f2      	b.n	8005d7e <xQueueGenericReset+0x64>

08005d98 <xQueueGenericCreateStatic>:
	{
 8005d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d9a:	460d      	mov	r5, r1
 8005d9c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d9e:	b940      	cbnz	r0, 8005db2 <xQueueGenericCreateStatic+0x1a>
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	e7fe      	b.n	8005db0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8005db2:	b943      	cbnz	r3, 8005dc6 <xQueueGenericCreateStatic+0x2e>
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dc6:	b14a      	cbz	r2, 8005ddc <xQueueGenericCreateStatic+0x44>
 8005dc8:	b991      	cbnz	r1, 8005df0 <xQueueGenericCreateStatic+0x58>
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	e7fe      	b.n	8005dda <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ddc:	b141      	cbz	r1, 8005df0 <xQueueGenericCreateStatic+0x58>
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	e7fe      	b.n	8005dee <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005df0:	2350      	movs	r3, #80	; 0x50
 8005df2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005df4:	9b01      	ldr	r3, [sp, #4]
 8005df6:	2b50      	cmp	r3, #80	; 0x50
 8005df8:	d008      	beq.n	8005e0c <xQueueGenericCreateStatic+0x74>
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	e7fe      	b.n	8005e0a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e0c:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	bf08      	it	eq
 8005e12:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8005e14:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e18:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	f7ff ff7b 	bl	8005d1a <xQueueGenericReset>
	}
 8005e24:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8005e26:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005e2a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005e2e:	b003      	add	sp, #12
 8005e30:	bd30      	pop	{r4, r5, pc}

08005e32 <xQueueGenericSend>:
{
 8005e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e36:	b085      	sub	sp, #20
 8005e38:	4688      	mov	r8, r1
 8005e3a:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005e3c:	4604      	mov	r4, r0
{
 8005e3e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005e40:	b940      	cbnz	r0, 8005e54 <xQueueGenericSend+0x22>
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	e7fe      	b.n	8005e52 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e54:	b951      	cbnz	r1, 8005e6c <xQueueGenericSend+0x3a>
 8005e56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e58:	b143      	cbz	r3, 8005e6c <xQueueGenericSend+0x3a>
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	e7fe      	b.n	8005e6a <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e6c:	2f02      	cmp	r7, #2
 8005e6e:	d10b      	bne.n	8005e88 <xQueueGenericSend+0x56>
 8005e70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d008      	beq.n	8005e88 <xQueueGenericSend+0x56>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	e7fe      	b.n	8005e86 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e88:	f000 fe1e 	bl	8006ac8 <xTaskGetSchedulerState>
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	b950      	cbnz	r0, 8005ea6 <xQueueGenericSend+0x74>
 8005e90:	9b01      	ldr	r3, [sp, #4]
 8005e92:	b14b      	cbz	r3, 8005ea8 <xQueueGenericSend+0x76>
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	e7fe      	b.n	8005ea4 <xQueueGenericSend+0x72>
 8005ea6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	e037      	b.n	8005f1e <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eae:	9d01      	ldr	r5, [sp, #4]
 8005eb0:	b91d      	cbnz	r5, 8005eba <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8005eb2:	f001 f8af 	bl	8007014 <vPortExitCritical>
			return errQUEUE_FULL;
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e052      	b.n	8005f60 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8005eba:	b916      	cbnz	r6, 8005ec2 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ebc:	a802      	add	r0, sp, #8
 8005ebe:	f000 fdb5 	bl	8006a2c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005ec2:	f001 f8a7 	bl	8007014 <vPortExitCritical>
		vTaskSuspendAll();
 8005ec6:	f000 fbbf 	bl	8006648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eca:	f001 f883 	bl	8006fd4 <vPortEnterCritical>
 8005ece:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005ed2:	2bff      	cmp	r3, #255	; 0xff
 8005ed4:	bf08      	it	eq
 8005ed6:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8005eda:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005ede:	2bff      	cmp	r3, #255	; 0xff
 8005ee0:	bf08      	it	eq
 8005ee2:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8005ee6:	f001 f895 	bl	8007014 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eea:	a901      	add	r1, sp, #4
 8005eec:	a802      	add	r0, sp, #8
 8005eee:	f000 fda9 	bl	8006a44 <xTaskCheckForTimeOut>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d14a      	bne.n	8005f8c <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ef6:	f001 f86d 	bl	8006fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005efa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005efc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d131      	bne.n	8005f66 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005f02:	f001 f887 	bl	8007014 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f06:	9901      	ldr	r1, [sp, #4]
 8005f08:	f104 0010 	add.w	r0, r4, #16
 8005f0c:	f000 fd14 	bl	8006938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff feca 	bl	8005caa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f16:	f000 fc35 	bl	8006784 <xTaskResumeAll>
 8005f1a:	b360      	cbz	r0, 8005f76 <xQueueGenericSend+0x144>
 8005f1c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005f1e:	f001 f859 	bl	8006fd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d301      	bcc.n	8005f2e <xQueueGenericSend+0xfc>
 8005f2a:	2f02      	cmp	r7, #2
 8005f2c:	d1bf      	bne.n	8005eae <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f2e:	463a      	mov	r2, r7
 8005f30:	4641      	mov	r1, r8
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7ff fe70 	bl	8005c18 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f3a:	b11b      	cbz	r3, 8005f44 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005f40:	f000 fd34 	bl	80069ac <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8005f44:	b148      	cbz	r0, 8005f5a <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8005f46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005f5a:	f001 f85b 	bl	8007014 <vPortExitCritical>
				return pdPASS;
 8005f5e:	2001      	movs	r0, #1
}
 8005f60:	b005      	add	sp, #20
 8005f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8005f66:	f001 f855 	bl	8007014 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7ff fe9d 	bl	8005caa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f70:	f000 fc08 	bl	8006784 <xTaskResumeAll>
 8005f74:	e7d2      	b.n	8005f1c <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8005f76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	e7c7      	b.n	8005f1c <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff fe8c 	bl	8005caa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f92:	f000 fbf7 	bl	8006784 <xTaskResumeAll>
 8005f96:	e78e      	b.n	8005eb6 <xQueueGenericSend+0x84>

08005f98 <xQueueGenericSendFromISR>:
{
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4689      	mov	r9, r1
 8005f9e:	4690      	mov	r8, r2
 8005fa0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	b940      	cbnz	r0, 8005fb8 <xQueueGenericSendFromISR+0x20>
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	e7fe      	b.n	8005fb6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb8:	b951      	cbnz	r1, 8005fd0 <xQueueGenericSendFromISR+0x38>
 8005fba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005fbc:	b143      	cbz	r3, 8005fd0 <xQueueGenericSendFromISR+0x38>
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	e7fe      	b.n	8005fce <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fd0:	2f02      	cmp	r7, #2
 8005fd2:	d10b      	bne.n	8005fec <xQueueGenericSendFromISR+0x54>
 8005fd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d008      	beq.n	8005fec <xQueueGenericSendFromISR+0x54>
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	e7fe      	b.n	8005fea <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fec:	f001 f8ce 	bl	800718c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ff0:	f3ef 8611 	mrs	r6, BASEPRI
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006004:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006006:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006008:	429a      	cmp	r2, r3
 800600a:	d301      	bcc.n	8006010 <xQueueGenericSendFromISR+0x78>
 800600c:	2f02      	cmp	r7, #2
 800600e:	d122      	bne.n	8006056 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006010:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006014:	463a      	mov	r2, r7
 8006016:	4649      	mov	r1, r9
 8006018:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800601a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800601c:	f7ff fdfc 	bl	8005c18 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006020:	1c6b      	adds	r3, r5, #1
 8006022:	d113      	bne.n	800604c <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006026:	b90b      	cbnz	r3, 800602c <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8006028:	2001      	movs	r0, #1
 800602a:	e00b      	b.n	8006044 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800602c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006030:	f000 fcbc 	bl	80069ac <xTaskRemoveFromEventList>
 8006034:	2800      	cmp	r0, #0
 8006036:	d0f7      	beq.n	8006028 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8006038:	f1b8 0f00 	cmp.w	r8, #0
 800603c:	d0f4      	beq.n	8006028 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800603e:	2001      	movs	r0, #1
 8006040:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006044:	f386 8811 	msr	BASEPRI, r6
}
 8006048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800604c:	3501      	adds	r5, #1
 800604e:	b26d      	sxtb	r5, r5
 8006050:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006054:	e7e8      	b.n	8006028 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8006056:	2000      	movs	r0, #0
 8006058:	e7f4      	b.n	8006044 <xQueueGenericSendFromISR+0xac>

0800605a <xQueueReceive>:
{
 800605a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800605e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8006060:	4604      	mov	r4, r0
{
 8006062:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006064:	b940      	cbnz	r0, 8006078 <xQueueReceive+0x1e>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	e7fe      	b.n	8006076 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006078:	b951      	cbnz	r1, 8006090 <xQueueReceive+0x36>
 800607a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800607c:	b143      	cbz	r3, 8006090 <xQueueReceive+0x36>
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	e7fe      	b.n	800608e <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006090:	f000 fd1a 	bl	8006ac8 <xTaskGetSchedulerState>
 8006094:	4606      	mov	r6, r0
 8006096:	b950      	cbnz	r0, 80060ae <xQueueReceive+0x54>
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	b14b      	cbz	r3, 80060b0 <xQueueReceive+0x56>
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	e7fe      	b.n	80060ac <xQueueReceive+0x52>
 80060ae:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80060b0:	f04f 0800 	mov.w	r8, #0
 80060b4:	e03d      	b.n	8006132 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80060b6:	9d01      	ldr	r5, [sp, #4]
 80060b8:	b91d      	cbnz	r5, 80060c2 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 80060ba:	f000 ffab 	bl	8007014 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80060be:	2000      	movs	r0, #0
 80060c0:	e056      	b.n	8006170 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 80060c2:	b916      	cbnz	r6, 80060ca <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060c4:	a802      	add	r0, sp, #8
 80060c6:	f000 fcb1 	bl	8006a2c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80060ca:	f000 ffa3 	bl	8007014 <vPortExitCritical>
		vTaskSuspendAll();
 80060ce:	f000 fabb 	bl	8006648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060d2:	f000 ff7f 	bl	8006fd4 <vPortEnterCritical>
 80060d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80060da:	2bff      	cmp	r3, #255	; 0xff
 80060dc:	bf08      	it	eq
 80060de:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80060e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80060e6:	2bff      	cmp	r3, #255	; 0xff
 80060e8:	bf08      	it	eq
 80060ea:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80060ee:	f000 ff91 	bl	8007014 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060f2:	a901      	add	r1, sp, #4
 80060f4:	a802      	add	r0, sp, #8
 80060f6:	f000 fca5 	bl	8006a44 <xTaskCheckForTimeOut>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d141      	bne.n	8006182 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fd7f 	bl	8005c02 <prvIsQueueEmpty>
 8006104:	b3b8      	cbz	r0, 8006176 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006106:	9901      	ldr	r1, [sp, #4]
 8006108:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800610c:	f000 fc14 	bl	8006938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006110:	4620      	mov	r0, r4
 8006112:	f7ff fdca 	bl	8005caa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006116:	f000 fb35 	bl	8006784 <xTaskResumeAll>
 800611a:	b948      	cbnz	r0, 8006130 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800611c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006124:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006132:	f000 ff4f 	bl	8006fd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006136:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006138:	2d00      	cmp	r5, #0
 800613a:	d0bc      	beq.n	80060b6 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800613c:	4639      	mov	r1, r7
 800613e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006140:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006142:	f7ff fd9e 	bl	8005c82 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006146:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006148:	6923      	ldr	r3, [r4, #16]
 800614a:	b173      	cbz	r3, 800616a <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800614c:	f104 0010 	add.w	r0, r4, #16
 8006150:	f000 fc2c 	bl	80069ac <xTaskRemoveFromEventList>
 8006154:	b148      	cbz	r0, 800616a <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8006156:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800615a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800616a:	f000 ff53 	bl	8007014 <vPortExitCritical>
				return pdPASS;
 800616e:	2001      	movs	r0, #1
}
 8006170:	b004      	add	sp, #16
 8006172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8006176:	4620      	mov	r0, r4
 8006178:	f7ff fd97 	bl	8005caa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800617c:	f000 fb02 	bl	8006784 <xTaskResumeAll>
 8006180:	e7d6      	b.n	8006130 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8006182:	4620      	mov	r0, r4
 8006184:	f7ff fd91 	bl	8005caa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006188:	f000 fafc 	bl	8006784 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800618c:	4620      	mov	r0, r4
 800618e:	f7ff fd38 	bl	8005c02 <prvIsQueueEmpty>
 8006192:	2800      	cmp	r0, #0
 8006194:	d0cc      	beq.n	8006130 <xQueueReceive+0xd6>
 8006196:	e792      	b.n	80060be <xQueueReceive+0x64>

08006198 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006198:	2300      	movs	r3, #0
	{
 800619a:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800619c:	4a06      	ldr	r2, [pc, #24]	; (80061b8 <vQueueAddToRegistry+0x20>)
 800619e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80061a2:	b92c      	cbnz	r4, 80061b0 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061a8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80061ac:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061ae:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061b0:	3301      	adds	r3, #1
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d1f3      	bne.n	800619e <vQueueAddToRegistry+0x6>
 80061b6:	e7fa      	b.n	80061ae <vQueueAddToRegistry+0x16>
 80061b8:	20000c84 	.word	0x20000c84

080061bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	4604      	mov	r4, r0
 80061c0:	460d      	mov	r5, r1
 80061c2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061c4:	f000 ff06 	bl	8006fd4 <vPortEnterCritical>
 80061c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80061cc:	2bff      	cmp	r3, #255	; 0xff
 80061ce:	bf04      	itt	eq
 80061d0:	2300      	moveq	r3, #0
 80061d2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80061d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80061da:	2bff      	cmp	r3, #255	; 0xff
 80061dc:	bf04      	itt	eq
 80061de:	2300      	moveq	r3, #0
 80061e0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80061e4:	f000 ff16 	bl	8007014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061ea:	b92b      	cbnz	r3, 80061f8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061ec:	4632      	mov	r2, r6
 80061ee:	4629      	mov	r1, r5
 80061f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80061f4:	f000 fbba 	bl	800696c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061f8:	4620      	mov	r0, r4
	}
 80061fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80061fe:	f7ff bd54 	b.w	8005caa <prvUnlockQueue>
	...

08006204 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006208:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800620a:	f000 fee3 	bl	8006fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800620e:	4b30      	ldr	r3, [pc, #192]	; (80062d0 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8006210:	4e30      	ldr	r6, [pc, #192]	; (80062d4 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4f30      	ldr	r7, [pc, #192]	; (80062d8 <prvAddNewTaskToReadyList+0xd4>)
 8006216:	3201      	adds	r2, #1
 8006218:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800621a:	6835      	ldr	r5, [r6, #0]
 800621c:	2d00      	cmp	r5, #0
 800621e:	d14b      	bne.n	80062b8 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006220:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d11f      	bne.n	8006268 <prvAddNewTaskToReadyList+0x64>
 8006228:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800622a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800622c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800622e:	f7ff fca7 	bl	8005b80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006232:	2d38      	cmp	r5, #56	; 0x38
 8006234:	f108 0814 	add.w	r8, r8, #20
 8006238:	d1f7      	bne.n	800622a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800623a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80062dc <prvAddNewTaskToReadyList+0xd8>
	vListInitialise( &xDelayedTaskList2 );
 800623e:	4d28      	ldr	r5, [pc, #160]	; (80062e0 <prvAddNewTaskToReadyList+0xdc>)
	vListInitialise( &xDelayedTaskList1 );
 8006240:	4640      	mov	r0, r8
 8006242:	f7ff fc9d 	bl	8005b80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006246:	4628      	mov	r0, r5
 8006248:	f7ff fc9a 	bl	8005b80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800624c:	4825      	ldr	r0, [pc, #148]	; (80062e4 <prvAddNewTaskToReadyList+0xe0>)
 800624e:	f7ff fc97 	bl	8005b80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006252:	4825      	ldr	r0, [pc, #148]	; (80062e8 <prvAddNewTaskToReadyList+0xe4>)
 8006254:	f7ff fc94 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006258:	4824      	ldr	r0, [pc, #144]	; (80062ec <prvAddNewTaskToReadyList+0xe8>)
 800625a:	f7ff fc91 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800625e:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <prvAddNewTaskToReadyList+0xec>)
 8006260:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006264:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <prvAddNewTaskToReadyList+0xf0>)
 8006266:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006268:	2014      	movs	r0, #20
		uxTaskNumber++;
 800626a:	4a23      	ldr	r2, [pc, #140]	; (80062f8 <prvAddNewTaskToReadyList+0xf4>)
 800626c:	6813      	ldr	r3, [r2, #0]
 800626e:	3301      	adds	r3, #1
 8006270:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006272:	4a22      	ldr	r2, [pc, #136]	; (80062fc <prvAddNewTaskToReadyList+0xf8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006274:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006276:	6811      	ldr	r1, [r2, #0]
 8006278:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800627a:	428b      	cmp	r3, r1
 800627c:	fb00 7003 	mla	r0, r0, r3, r7
 8006280:	f104 0104 	add.w	r1, r4, #4
 8006284:	bf88      	it	hi
 8006286:	6013      	strhi	r3, [r2, #0]
 8006288:	f7ff fc88 	bl	8005b9c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800628c:	f000 fec2 	bl	8007014 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006290:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <prvAddNewTaskToReadyList+0xfc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	b173      	cbz	r3, 80062b4 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006296:	6833      	ldr	r3, [r6, #0]
 8006298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800629c:	429a      	cmp	r2, r3
 800629e:	d209      	bcs.n	80062b4 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80062a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	f3bf 8f6f 	isb	sy
}
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <prvAddNewTaskToReadyList+0xfc>)
 80062ba:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 80062be:	2a00      	cmp	r2, #0
 80062c0:	d1d2      	bne.n	8006268 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062c2:	6832      	ldr	r2, [r6, #0]
 80062c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062c6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80062c8:	bf98      	it	ls
 80062ca:	6034      	strls	r4, [r6, #0]
 80062cc:	e7cc      	b.n	8006268 <prvAddNewTaskToReadyList+0x64>
 80062ce:	bf00      	nop
 80062d0:	20001130 	.word	0x20001130
 80062d4:	20000cc4 	.word	0x20000cc4
 80062d8:	20000cd0 	.word	0x20000cd0
 80062dc:	20001148 	.word	0x20001148
 80062e0:	2000115c 	.word	0x2000115c
 80062e4:	20001178 	.word	0x20001178
 80062e8:	200011a4 	.word	0x200011a4
 80062ec:	20001190 	.word	0x20001190
 80062f0:	20000cc8 	.word	0x20000cc8
 80062f4:	20000ccc 	.word	0x20000ccc
 80062f8:	20001140 	.word	0x20001140
 80062fc:	20001144 	.word	0x20001144
 8006300:	2000118c 	.word	0x2000118c

08006304 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	4606      	mov	r6, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006308:	4b14      	ldr	r3, [pc, #80]	; (800635c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800630a:	4d15      	ldr	r5, [pc, #84]	; (8006360 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800630c:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800630e:	6828      	ldr	r0, [r5, #0]
{
 8006310:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006312:	3004      	adds	r0, #4
 8006314:	f7ff fc65 	bl	8005be2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006318:	1c73      	adds	r3, r6, #1
 800631a:	d107      	bne.n	800632c <prvAddCurrentTaskToDelayedList+0x28>
 800631c:	b137      	cbz	r7, 800632c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800631e:	6829      	ldr	r1, [r5, #0]
 8006320:	4810      	ldr	r0, [pc, #64]	; (8006364 <prvAddCurrentTaskToDelayedList+0x60>)
 8006322:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006328:	f7ff bc38 	b.w	8005b9c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	19a4      	adds	r4, r4, r6
 8006330:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006332:	d307      	bcc.n	8006344 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvAddCurrentTaskToDelayedList+0x64>)
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	6829      	ldr	r1, [r5, #0]
}
 800633a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800633e:	3104      	adds	r1, #4
 8006340:	f7ff bc38 	b.w	8005bb4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <prvAddCurrentTaskToDelayedList+0x68>)
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	6829      	ldr	r1, [r5, #0]
 800634a:	3104      	adds	r1, #4
 800634c:	f7ff fc32 	bl	8005bb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006356:	bf88      	it	hi
 8006358:	601c      	strhi	r4, [r3, #0]
}
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800635c:	200011b8 	.word	0x200011b8
 8006360:	20000cc4 	.word	0x20000cc4
 8006364:	20001190 	.word	0x20001190
 8006368:	20000ccc 	.word	0x20000ccc
 800636c:	20000cc8 	.word	0x20000cc8
 8006370:	20001170 	.word	0x20001170

08006374 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006374:	4a06      	ldr	r2, [pc, #24]	; (8006390 <prvResetNextTaskUnblockTime+0x1c>)
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	6819      	ldr	r1, [r3, #0]
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <prvResetNextTaskUnblockTime+0x20>)
 800637c:	b919      	cbnz	r1, 8006386 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800637e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006382:	601a      	str	r2, [r3, #0]
}
 8006384:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800638a:	68d2      	ldr	r2, [r2, #12]
 800638c:	6852      	ldr	r2, [r2, #4]
 800638e:	e7f8      	b.n	8006382 <prvResetNextTaskUnblockTime+0xe>
 8006390:	20000cc8 	.word	0x20000cc8
 8006394:	20001170 	.word	0x20001170

08006398 <prvDeleteTCB>:
	{
 8006398:	b510      	push	{r4, lr}
 800639a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800639c:	3054      	adds	r0, #84	; 0x54
 800639e:	f001 f8c7 	bl	8007530 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063a2:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80063a6:	b93b      	cbnz	r3, 80063b8 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 80063a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80063aa:	f000 ffd5 	bl	8007358 <vPortFree>
				vPortFree( pxTCB );
 80063ae:	4620      	mov	r0, r4
	}
 80063b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80063b4:	f000 bfd0 	b.w	8007358 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d0f8      	beq.n	80063ae <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d008      	beq.n	80063d2 <prvDeleteTCB+0x3a>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	e7fe      	b.n	80063d0 <prvDeleteTCB+0x38>
	}
 80063d2:	bd10      	pop	{r4, pc}

080063d4 <prvIdleTask>:
{
 80063d4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063d6:	4c13      	ldr	r4, [pc, #76]	; (8006424 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80063d8:	4f13      	ldr	r7, [pc, #76]	; (8006428 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80063da:	4d14      	ldr	r5, [pc, #80]	; (800642c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	b973      	cbnz	r3, 80063fe <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <prvIdleTask+0x5c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d9f8      	bls.n	80063da <prvIdleTask+0x6>
				taskYIELD();
 80063e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	e7ed      	b.n	80063da <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80063fe:	f000 fde9 	bl	8006fd4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006406:	1d30      	adds	r0, r6, #4
 8006408:	f7ff fbeb 	bl	8005be2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	3b01      	subs	r3, #1
 8006410:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	3b01      	subs	r3, #1
 8006416:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006418:	f000 fdfc 	bl	8007014 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800641c:	4630      	mov	r0, r6
 800641e:	f7ff ffbb 	bl	8006398 <prvDeleteTCB>
 8006422:	e7db      	b.n	80063dc <prvIdleTask+0x8>
 8006424:	20001134 	.word	0x20001134
 8006428:	200011a4 	.word	0x200011a4
 800642c:	20001130 	.word	0x20001130
 8006430:	20000cd0 	.word	0x20000cd0

08006434 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	460d      	mov	r5, r1
 800643a:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800643e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006442:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006444:	4606      	mov	r6, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006446:	21a5      	movs	r1, #165	; 0xa5
 8006448:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800644a:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800644c:	f001 f868 	bl	8007520 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006450:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006452:	f1a9 0904 	sub.w	r9, r9, #4
 8006456:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006458:	f023 0907 	bic.w	r9, r3, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800645c:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8006460:	1e6b      	subs	r3, r5, #1
 8006462:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006464:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006468:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 800646c:	b109      	cbz	r1, 8006472 <prvInitialiseNewTask.constprop.0+0x3e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800646e:	42ab      	cmp	r3, r5
 8006470:	d1f8      	bne.n	8006464 <prvInitialiseNewTask.constprop.0+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006472:	9d08      	ldr	r5, [sp, #32]
 8006474:	f04f 0a00 	mov.w	sl, #0
 8006478:	2d37      	cmp	r5, #55	; 0x37
 800647a:	bf28      	it	cs
 800647c:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800647e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8006480:	e9c4 5a13 	strd	r5, sl, [r4, #76]	; 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8006484:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006486:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800648a:	f7ff fb84 	bl	8005b96 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648e:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006492:	f104 0018 	add.w	r0, r4, #24
 8006496:	f7ff fb7e 	bl	8005b96 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800649a:	224c      	movs	r2, #76	; 0x4c
 800649c:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800649e:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064a2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064a6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064a8:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064ac:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80064b0:	f001 f836 	bl	8007520 <memset>
 80064b4:	4b09      	ldr	r3, [pc, #36]	; (80064dc <prvInitialiseNewTask.constprop.0+0xa8>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064b6:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064b8:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80064be:	33d0      	adds	r3, #208	; 0xd0
 80064c0:	65e2      	str	r2, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064c2:	4648      	mov	r0, r9
 80064c4:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064c6:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064c8:	f000 fd60 	bl	8006f8c <pxPortInitialiseStack>
 80064cc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80064ce:	f1b8 0f00 	cmp.w	r8, #0
 80064d2:	d001      	beq.n	80064d8 <prvInitialiseNewTask.constprop.0+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064d4:	f8c8 4000 	str.w	r4, [r8]
}
 80064d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064dc:	20002888 	.word	0x20002888

080064e0 <xTaskCreateStatic>:
	{
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80064e8:	b945      	cbnz	r5, 80064fc <xTaskCreateStatic+0x1c>
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	e7fe      	b.n	80064fa <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80064fc:	b944      	cbnz	r4, 8006510 <xTaskCreateStatic+0x30>
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	e7fe      	b.n	800650e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006510:	26a8      	movs	r6, #168	; 0xa8
 8006512:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006514:	9e05      	ldr	r6, [sp, #20]
 8006516:	2ea8      	cmp	r6, #168	; 0xa8
 8006518:	d008      	beq.n	800652c <xTaskCreateStatic+0x4c>
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	e7fe      	b.n	800652a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800652c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800652e:	2502      	movs	r5, #2
 8006530:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006534:	ad04      	add	r5, sp, #16
 8006536:	9501      	str	r5, [sp, #4]
 8006538:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800653a:	9402      	str	r4, [sp, #8]
 800653c:	9500      	str	r5, [sp, #0]
 800653e:	f7ff ff79 	bl	8006434 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff fe5e 	bl	8006204 <prvAddNewTaskToReadyList>
	}
 8006548:	9804      	ldr	r0, [sp, #16]
 800654a:	b006      	add	sp, #24
 800654c:	bd70      	pop	{r4, r5, r6, pc}

0800654e <xTaskCreate>:
	{
 800654e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006552:	4607      	mov	r7, r0
 8006554:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006556:	0090      	lsls	r0, r2, #2
	{
 8006558:	4688      	mov	r8, r1
 800655a:	4616      	mov	r6, r2
 800655c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800655e:	f000 fe69 	bl	8007234 <pvPortMalloc>
			if( pxStack != NULL )
 8006562:	4605      	mov	r5, r0
 8006564:	b1e8      	cbz	r0, 80065a2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006566:	20a8      	movs	r0, #168	; 0xa8
 8006568:	f000 fe64 	bl	8007234 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800656c:	4604      	mov	r4, r0
 800656e:	b1a8      	cbz	r0, 800659c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006570:	2300      	movs	r3, #0
 8006572:	f880 30a5 	strb.w	r3, [r0, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8006578:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800657e:	4632      	mov	r2, r6
 8006580:	4641      	mov	r1, r8
 8006582:	9002      	str	r0, [sp, #8]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4638      	mov	r0, r7
 8006588:	464b      	mov	r3, r9
 800658a:	f7ff ff53 	bl	8006434 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800658e:	4620      	mov	r0, r4
 8006590:	f7ff fe38 	bl	8006204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006594:	2001      	movs	r0, #1
	}
 8006596:	b005      	add	sp, #20
 8006598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800659c:	4628      	mov	r0, r5
 800659e:	f000 fedb 	bl	8007358 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80065a6:	e7f6      	b.n	8006596 <xTaskCreate+0x48>

080065a8 <vTaskStartScheduler>:
{
 80065a8:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065aa:	2400      	movs	r4, #0
{
 80065ac:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065ae:	aa07      	add	r2, sp, #28
 80065b0:	a906      	add	r1, sp, #24
 80065b2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065b4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065b8:	f7ff faca 	bl	8005b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065bc:	9b05      	ldr	r3, [sp, #20]
 80065be:	9a07      	ldr	r2, [sp, #28]
 80065c0:	9302      	str	r3, [sp, #8]
 80065c2:	9b06      	ldr	r3, [sp, #24]
 80065c4:	4919      	ldr	r1, [pc, #100]	; (800662c <vTaskStartScheduler+0x84>)
 80065c6:	e9cd 4300 	strd	r4, r3, [sp]
 80065ca:	4819      	ldr	r0, [pc, #100]	; (8006630 <vTaskStartScheduler+0x88>)
 80065cc:	4623      	mov	r3, r4
 80065ce:	f7ff ff87 	bl	80064e0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80065d2:	b340      	cbz	r0, 8006626 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 80065d4:	f000 fb1c 	bl	8006c10 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80065d8:	2801      	cmp	r0, #1
 80065da:	d119      	bne.n	8006610 <vTaskStartScheduler+0x68>
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <vTaskStartScheduler+0x8c>)
 80065ee:	4a12      	ldr	r2, [pc, #72]	; (8006638 <vTaskStartScheduler+0x90>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3354      	adds	r3, #84	; 0x54
 80065f4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80065f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <vTaskStartScheduler+0x94>)
 80065fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065fe:	4b10      	ldr	r3, [pc, #64]	; (8006640 <vTaskStartScheduler+0x98>)
 8006600:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006602:	4b10      	ldr	r3, [pc, #64]	; (8006644 <vTaskStartScheduler+0x9c>)
 8006604:	601c      	str	r4, [r3, #0]
}
 8006606:	b008      	add	sp, #32
 8006608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800660c:	f000 bd62 	b.w	80070d4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006610:	3001      	adds	r0, #1
 8006612:	d108      	bne.n	8006626 <vTaskStartScheduler+0x7e>
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	e7fe      	b.n	8006624 <vTaskStartScheduler+0x7c>
}
 8006626:	b008      	add	sp, #32
 8006628:	bd10      	pop	{r4, pc}
 800662a:	bf00      	nop
 800662c:	080096ba 	.word	0x080096ba
 8006630:	080063d5 	.word	0x080063d5
 8006634:	20000cc4 	.word	0x20000cc4
 8006638:	20000098 	.word	0x20000098
 800663c:	20001170 	.word	0x20001170
 8006640:	2000118c 	.word	0x2000118c
 8006644:	200011b8 	.word	0x200011b8

08006648 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006648:	4a02      	ldr	r2, [pc, #8]	; (8006654 <vTaskSuspendAll+0xc>)
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	2000113c 	.word	0x2000113c

08006658 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006658:	4b01      	ldr	r3, [pc, #4]	; (8006660 <xTaskGetTickCount+0x8>)
 800665a:	6818      	ldr	r0, [r3, #0]
}
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	200011b8 	.word	0x200011b8

08006664 <xTaskIncrementTick>:
{
 8006664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006668:	4b3b      	ldr	r3, [pc, #236]	; (8006758 <xTaskIncrementTick+0xf4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d16d      	bne.n	800674c <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006670:	4b3a      	ldr	r3, [pc, #232]	; (800675c <xTaskIncrementTick+0xf8>)
 8006672:	681d      	ldr	r5, [r3, #0]
 8006674:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006676:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006678:	b9bd      	cbnz	r5, 80066aa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800667a:	4b39      	ldr	r3, [pc, #228]	; (8006760 <xTaskIncrementTick+0xfc>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	b142      	cbz	r2, 8006694 <xTaskIncrementTick+0x30>
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	e7fe      	b.n	8006692 <xTaskIncrementTick+0x2e>
 8006694:	4a33      	ldr	r2, [pc, #204]	; (8006764 <xTaskIncrementTick+0x100>)
 8006696:	6819      	ldr	r1, [r3, #0]
 8006698:	6810      	ldr	r0, [r2, #0]
 800669a:	6018      	str	r0, [r3, #0]
 800669c:	6011      	str	r1, [r2, #0]
 800669e:	4a32      	ldr	r2, [pc, #200]	; (8006768 <xTaskIncrementTick+0x104>)
 80066a0:	6813      	ldr	r3, [r2, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	f7ff fe65 	bl	8006374 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066aa:	4e30      	ldr	r6, [pc, #192]	; (800676c <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 80066ac:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066ae:	6833      	ldr	r3, [r6, #0]
 80066b0:	4f2f      	ldr	r7, [pc, #188]	; (8006770 <xTaskIncrementTick+0x10c>)
 80066b2:	42ab      	cmp	r3, r5
 80066b4:	d910      	bls.n	80066d8 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066b6:	2214      	movs	r2, #20
 80066b8:	4b2e      	ldr	r3, [pc, #184]	; (8006774 <xTaskIncrementTick+0x110>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4353      	muls	r3, r2
 80066c0:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	bf28      	it	cs
 80066c6:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 80066c8:	4b2b      	ldr	r3, [pc, #172]	; (8006778 <xTaskIncrementTick+0x114>)
 80066ca:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80066cc:	2b00      	cmp	r3, #0
}
 80066ce:	bf0c      	ite	eq
 80066d0:	4620      	moveq	r0, r4
 80066d2:	2001      	movne	r0, #1
 80066d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8006760 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 80066dc:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800677c <xTaskIncrementTick+0x118>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066e0:	f8d9 3000 	ldr.w	r3, [r9]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	b91b      	cbnz	r3, 80066f0 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ec:	6033      	str	r3, [r6, #0]
					break;
 80066ee:	e7e2      	b.n	80066b6 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066f0:	f8d9 3000 	ldr.w	r3, [r9]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066fa:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80066fe:	4295      	cmp	r5, r2
 8006700:	d201      	bcs.n	8006706 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8006702:	6032      	str	r2, [r6, #0]
						break;
 8006704:	e7d7      	b.n	80066b6 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006706:	f10b 0804 	add.w	r8, fp, #4
 800670a:	4640      	mov	r0, r8
 800670c:	f7ff fa69 	bl	8005be2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006710:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8006714:	b11a      	cbz	r2, 800671e <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006716:	f10b 0018 	add.w	r0, fp, #24
 800671a:	f7ff fa62 	bl	8005be2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800671e:	2314      	movs	r3, #20
 8006720:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8006724:	f8da 2000 	ldr.w	r2, [sl]
 8006728:	4641      	mov	r1, r8
 800672a:	4290      	cmp	r0, r2
 800672c:	bf88      	it	hi
 800672e:	f8ca 0000 	strhi.w	r0, [sl]
 8006732:	fb03 7000 	mla	r0, r3, r0, r7
 8006736:	f7ff fa31 	bl	8005b9c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800673a:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <xTaskIncrementTick+0x110>)
 800673c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8006740:	6819      	ldr	r1, [r3, #0]
 8006742:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006744:	429a      	cmp	r2, r3
 8006746:	bf28      	it	cs
 8006748:	2401      	movcs	r4, #1
 800674a:	e7c9      	b.n	80066e0 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 800674c:	4a0c      	ldr	r2, [pc, #48]	; (8006780 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800674e:	2400      	movs	r4, #0
		++uxPendedTicks;
 8006750:	6813      	ldr	r3, [r2, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e7b7      	b.n	80066c8 <xTaskIncrementTick+0x64>
 8006758:	2000113c 	.word	0x2000113c
 800675c:	200011b8 	.word	0x200011b8
 8006760:	20000cc8 	.word	0x20000cc8
 8006764:	20000ccc 	.word	0x20000ccc
 8006768:	20001174 	.word	0x20001174
 800676c:	20001170 	.word	0x20001170
 8006770:	20000cd0 	.word	0x20000cd0
 8006774:	20000cc4 	.word	0x20000cc4
 8006778:	200011bc 	.word	0x200011bc
 800677c:	20001144 	.word	0x20001144
 8006780:	20001138 	.word	0x20001138

08006784 <xTaskResumeAll>:
{
 8006784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8006788:	4c30      	ldr	r4, [pc, #192]	; (800684c <xTaskResumeAll+0xc8>)
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	b943      	cbnz	r3, 80067a0 <xTaskResumeAll+0x1c>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	e7fe      	b.n	800679e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80067a0:	f000 fc18 	bl	8006fd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067aa:	6824      	ldr	r4, [r4, #0]
 80067ac:	b12c      	cbz	r4, 80067ba <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80067ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80067b0:	f000 fc30 	bl	8007014 <vPortExitCritical>
}
 80067b4:	4620      	mov	r0, r4
 80067b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067ba:	4b25      	ldr	r3, [pc, #148]	; (8006850 <xTaskResumeAll+0xcc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0f5      	beq.n	80067ae <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067c2:	4d24      	ldr	r5, [pc, #144]	; (8006854 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80067c4:	4e24      	ldr	r6, [pc, #144]	; (8006858 <xTaskResumeAll+0xd4>)
 80067c6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800685c <xTaskResumeAll+0xd8>
 80067ca:	e01d      	b.n	8006808 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80067cc:	68eb      	ldr	r3, [r5, #12]
 80067ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d0:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067d2:	f104 0018 	add.w	r0, r4, #24
 80067d6:	f7ff fa04 	bl	8005be2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067da:	4638      	mov	r0, r7
 80067dc:	f7ff fa01 	bl	8005be2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067e0:	2014      	movs	r0, #20
 80067e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067e4:	6832      	ldr	r2, [r6, #0]
 80067e6:	fb00 8003 	mla	r0, r0, r3, r8
 80067ea:	4293      	cmp	r3, r2
 80067ec:	4639      	mov	r1, r7
 80067ee:	bf88      	it	hi
 80067f0:	6033      	strhi	r3, [r6, #0]
 80067f2:	f7ff f9d3 	bl	8005b9c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <xTaskResumeAll+0xdc>)
 80067f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	429a      	cmp	r2, r3
 8006800:	d302      	bcc.n	8006808 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8006802:	2201      	movs	r2, #1
 8006804:	4b17      	ldr	r3, [pc, #92]	; (8006864 <xTaskResumeAll+0xe0>)
 8006806:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1de      	bne.n	80067cc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800680e:	b10c      	cbz	r4, 8006814 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8006810:	f7ff fdb0 	bl	8006374 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006814:	4d14      	ldr	r5, [pc, #80]	; (8006868 <xTaskResumeAll+0xe4>)
 8006816:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006818:	b144      	cbz	r4, 800682c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800681a:	2701      	movs	r7, #1
 800681c:	4e11      	ldr	r6, [pc, #68]	; (8006864 <xTaskResumeAll+0xe0>)
							if( xTaskIncrementTick() != pdFALSE )
 800681e:	f7ff ff21 	bl	8006664 <xTaskIncrementTick>
 8006822:	b100      	cbz	r0, 8006826 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8006824:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006826:	3c01      	subs	r4, #1
 8006828:	d1f9      	bne.n	800681e <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 800682a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800682c:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <xTaskResumeAll+0xe0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0bc      	beq.n	80067ae <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006834:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006848:	2401      	movs	r4, #1
 800684a:	e7b1      	b.n	80067b0 <xTaskResumeAll+0x2c>
 800684c:	2000113c 	.word	0x2000113c
 8006850:	20001130 	.word	0x20001130
 8006854:	20001178 	.word	0x20001178
 8006858:	20001144 	.word	0x20001144
 800685c:	20000cd0 	.word	0x20000cd0
 8006860:	20000cc4 	.word	0x20000cc4
 8006864:	200011bc 	.word	0x200011bc
 8006868:	20001138 	.word	0x20001138

0800686c <vTaskDelay>:
	{
 800686c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800686e:	b950      	cbnz	r0, 8006886 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006870:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006878:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	f3bf 8f6f 	isb	sy
	}
 8006884:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006886:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <vTaskDelay+0x44>)
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	b141      	cbz	r1, 800689e <vTaskDelay+0x32>
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	e7fe      	b.n	800689c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800689e:	f7ff fed3 	bl	8006648 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068a2:	f7ff fd2f 	bl	8006304 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80068a6:	f7ff ff6d 	bl	8006784 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d0e0      	beq.n	8006870 <vTaskDelay+0x4>
 80068ae:	e7e9      	b.n	8006884 <vTaskDelay+0x18>
 80068b0:	2000113c 	.word	0x2000113c

080068b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068b4:	4b1a      	ldr	r3, [pc, #104]	; (8006920 <vTaskSwitchContext+0x6c>)
{
 80068b6:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <vTaskSwitchContext+0x70>)
 80068bc:	b112      	cbz	r2, 80068c4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
}
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068c4:	2614      	movs	r6, #20
 80068c6:	4d18      	ldr	r5, [pc, #96]	; (8006928 <vTaskSwitchContext+0x74>)
		xYieldPending = pdFALSE;
 80068c8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068ca:	682a      	ldr	r2, [r5, #0]
 80068cc:	4917      	ldr	r1, [pc, #92]	; (800692c <vTaskSwitchContext+0x78>)
 80068ce:	fb06 f302 	mul.w	r3, r6, r2
 80068d2:	58cc      	ldr	r4, [r1, r3]
 80068d4:	18c8      	adds	r0, r1, r3
 80068d6:	b1b4      	cbz	r4, 8006906 <vTaskSwitchContext+0x52>
 80068d8:	6844      	ldr	r4, [r0, #4]
 80068da:	3308      	adds	r3, #8
 80068dc:	6864      	ldr	r4, [r4, #4]
 80068de:	440b      	add	r3, r1
 80068e0:	429c      	cmp	r4, r3
 80068e2:	bf08      	it	eq
 80068e4:	6863      	ldreq	r3, [r4, #4]
 80068e6:	6044      	str	r4, [r0, #4]
 80068e8:	bf08      	it	eq
 80068ea:	6043      	streq	r3, [r0, #4]
 80068ec:	2314      	movs	r3, #20
 80068ee:	fb03 1102 	mla	r1, r3, r2, r1
 80068f2:	684b      	ldr	r3, [r1, #4]
 80068f4:	68d9      	ldr	r1, [r3, #12]
 80068f6:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <vTaskSwitchContext+0x7c>)
 80068f8:	6019      	str	r1, [r3, #0]
 80068fa:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a0d      	ldr	r2, [pc, #52]	; (8006934 <vTaskSwitchContext+0x80>)
 8006900:	3354      	adds	r3, #84	; 0x54
 8006902:	6013      	str	r3, [r2, #0]
}
 8006904:	e7dd      	b.n	80068c2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006906:	b942      	cbnz	r2, 800691a <vTaskSwitchContext+0x66>
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	e7fe      	b.n	8006918 <vTaskSwitchContext+0x64>
 800691a:	3a01      	subs	r2, #1
 800691c:	e7d7      	b.n	80068ce <vTaskSwitchContext+0x1a>
 800691e:	bf00      	nop
 8006920:	2000113c 	.word	0x2000113c
 8006924:	200011bc 	.word	0x200011bc
 8006928:	20001144 	.word	0x20001144
 800692c:	20000cd0 	.word	0x20000cd0
 8006930:	20000cc4 	.word	0x20000cc4
 8006934:	20000098 	.word	0x20000098

08006938 <vTaskPlaceOnEventList>:
{
 8006938:	b510      	push	{r4, lr}
 800693a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800693c:	b940      	cbnz	r0, 8006950 <vTaskPlaceOnEventList+0x18>
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	e7fe      	b.n	800694e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <vTaskPlaceOnEventList+0x30>)
 8006952:	6819      	ldr	r1, [r3, #0]
 8006954:	3118      	adds	r1, #24
 8006956:	f7ff f92d 	bl	8005bb4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800695a:	4620      	mov	r0, r4
}
 800695c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006960:	2101      	movs	r1, #1
 8006962:	f7ff bccf 	b.w	8006304 <prvAddCurrentTaskToDelayedList>
 8006966:	bf00      	nop
 8006968:	20000cc4 	.word	0x20000cc4

0800696c <vTaskPlaceOnEventListRestricted>:
	{
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	460d      	mov	r5, r1
 8006970:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8006972:	b940      	cbnz	r0, 8006986 <vTaskPlaceOnEventListRestricted+0x1a>
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	e7fe      	b.n	8006984 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <vTaskPlaceOnEventListRestricted+0x3c>)
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	3118      	adds	r1, #24
 800698c:	f7ff f906 	bl	8005b9c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006990:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006992:	4621      	mov	r1, r4
 8006994:	bf08      	it	eq
 8006996:	4628      	moveq	r0, r5
	}
 8006998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800699c:	bf18      	it	ne
 800699e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80069a2:	f7ff bcaf 	b.w	8006304 <prvAddCurrentTaskToDelayedList>
 80069a6:	bf00      	nop
 80069a8:	20000cc4 	.word	0x20000cc4

080069ac <xTaskRemoveFromEventList>:
{
 80069ac:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80069ae:	68c3      	ldr	r3, [r0, #12]
 80069b0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80069b2:	b944      	cbnz	r4, 80069c6 <xTaskRemoveFromEventList+0x1a>
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	e7fe      	b.n	80069c4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069c6:	f104 0518 	add.w	r5, r4, #24
 80069ca:	4628      	mov	r0, r5
 80069cc:	f7ff f909 	bl	8005be2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d0:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <xTaskRemoveFromEventList+0x68>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	b9db      	cbnz	r3, 8006a0e <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069d6:	1d25      	adds	r5, r4, #4
 80069d8:	4628      	mov	r0, r5
 80069da:	f7ff f902 	bl	8005be2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069de:	4a0e      	ldr	r2, [pc, #56]	; (8006a18 <xTaskRemoveFromEventList+0x6c>)
 80069e0:	2014      	movs	r0, #20
 80069e2:	6811      	ldr	r1, [r2, #0]
 80069e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069e6:	428b      	cmp	r3, r1
 80069e8:	4629      	mov	r1, r5
 80069ea:	bf88      	it	hi
 80069ec:	6013      	strhi	r3, [r2, #0]
 80069ee:	4a0b      	ldr	r2, [pc, #44]	; (8006a1c <xTaskRemoveFromEventList+0x70>)
 80069f0:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069f4:	f7ff f8d2 	bl	8005b9c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <xTaskRemoveFromEventList+0x74>)
 80069fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006a02:	bf85      	ittet	hi
 8006a04:	2001      	movhi	r0, #1
 8006a06:	4b07      	ldrhi	r3, [pc, #28]	; (8006a24 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8006a08:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8006a0a:	6018      	strhi	r0, [r3, #0]
}
 8006a0c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4805      	ldr	r0, [pc, #20]	; (8006a28 <xTaskRemoveFromEventList+0x7c>)
 8006a12:	e7ef      	b.n	80069f4 <xTaskRemoveFromEventList+0x48>
 8006a14:	2000113c 	.word	0x2000113c
 8006a18:	20001144 	.word	0x20001144
 8006a1c:	20000cd0 	.word	0x20000cd0
 8006a20:	20000cc4 	.word	0x20000cc4
 8006a24:	200011bc 	.word	0x200011bc
 8006a28:	20001178 	.word	0x20001178

08006a2c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a2c:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <vTaskInternalSetTimeOutState+0x10>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a32:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <vTaskInternalSetTimeOutState+0x14>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6043      	str	r3, [r0, #4]
}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20001174 	.word	0x20001174
 8006a40:	200011b8 	.word	0x200011b8

08006a44 <xTaskCheckForTimeOut>:
{
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006a48:	4605      	mov	r5, r0
 8006a4a:	b940      	cbnz	r0, 8006a5e <xTaskCheckForTimeOut+0x1a>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	e7fe      	b.n	8006a5c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8006a5e:	b941      	cbnz	r1, 8006a72 <xTaskCheckForTimeOut+0x2e>
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	e7fe      	b.n	8006a70 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8006a72:	f000 faaf 	bl	8006fd4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <xTaskCheckForTimeOut+0x70>)
 8006a78:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	d010      	beq.n	8006aa2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a80:	480d      	ldr	r0, [pc, #52]	; (8006ab8 <xTaskCheckForTimeOut+0x74>)
 8006a82:	682e      	ldr	r6, [r5, #0]
 8006a84:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a86:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a88:	4286      	cmp	r6, r0
 8006a8a:	d001      	beq.n	8006a90 <xTaskCheckForTimeOut+0x4c>
 8006a8c:	428a      	cmp	r2, r1
 8006a8e:	d90f      	bls.n	8006ab0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a90:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a92:	4283      	cmp	r3, r0
 8006a94:	d90a      	bls.n	8006aac <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006a96:	1a5b      	subs	r3, r3, r1
 8006a98:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a9a:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8006a9c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a9e:	f7ff ffc5 	bl	8006a2c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8006aa2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006aa4:	f000 fab6 	bl	8007014 <vPortExitCritical>
}
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006ab0:	2401      	movs	r4, #1
 8006ab2:	e7f7      	b.n	8006aa4 <xTaskCheckForTimeOut+0x60>
 8006ab4:	200011b8 	.word	0x200011b8
 8006ab8:	20001174 	.word	0x20001174

08006abc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006abc:	2201      	movs	r2, #1
 8006abe:	4b01      	ldr	r3, [pc, #4]	; (8006ac4 <vTaskMissedYield+0x8>)
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	4770      	bx	lr
 8006ac4:	200011bc 	.word	0x200011bc

08006ac8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <xTaskGetSchedulerState+0x18>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	b133      	cbz	r3, 8006adc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ace:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <xTaskGetSchedulerState+0x1c>)
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	fab0 f080 	clz	r0, r0
 8006ad6:	0940      	lsrs	r0, r0, #5
 8006ad8:	0040      	lsls	r0, r0, #1
 8006ada:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006adc:	2001      	movs	r0, #1
	}
 8006ade:	4770      	bx	lr
 8006ae0:	2000118c 	.word	0x2000118c
 8006ae4:	2000113c 	.word	0x2000113c

08006ae8 <xTaskPriorityDisinherit>:
	{
 8006ae8:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8006aea:	b908      	cbnz	r0, 8006af0 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8006aec:	2000      	movs	r0, #0
	}
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8006af0:	4b1b      	ldr	r3, [pc, #108]	; (8006b60 <xTaskPriorityDisinherit+0x78>)
 8006af2:	681c      	ldr	r4, [r3, #0]
 8006af4:	4284      	cmp	r4, r0
 8006af6:	d008      	beq.n	8006b0a <xTaskPriorityDisinherit+0x22>
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	e7fe      	b.n	8006b08 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b0c:	b943      	cbnz	r3, 8006b20 <xTaskPriorityDisinherit+0x38>
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	e7fe      	b.n	8006b1e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006b22:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006b24:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b26:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006b28:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b2a:	d0df      	beq.n	8006aec <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1dd      	bne.n	8006aec <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b30:	1d25      	adds	r5, r4, #4
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7ff f855 	bl	8005be2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b38:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b40:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b42:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b44:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006b46:	6811      	ldr	r1, [r2, #0]
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	bf88      	it	hi
 8006b4c:	6013      	strhi	r3, [r2, #0]
 8006b4e:	4a06      	ldr	r2, [pc, #24]	; (8006b68 <xTaskPriorityDisinherit+0x80>)
 8006b50:	4629      	mov	r1, r5
 8006b52:	fb00 2003 	mla	r0, r0, r3, r2
 8006b56:	f7ff f821 	bl	8005b9c <vListInsertEnd>
					xReturn = pdTRUE;
 8006b5a:	2001      	movs	r0, #1
		return xReturn;
 8006b5c:	e7c7      	b.n	8006aee <xTaskPriorityDisinherit+0x6>
 8006b5e:	bf00      	nop
 8006b60:	20000cc4 	.word	0x20000cc4
 8006b64:	20001144 	.word	0x20001144
 8006b68:	20000cd0 	.word	0x20000cd0

08006b6c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006b6e:	4c11      	ldr	r4, [pc, #68]	; (8006bb4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8006b70:	f000 fa30 	bl	8006fd4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006b74:	6825      	ldr	r5, [r4, #0]
 8006b76:	b9bd      	cbnz	r5, 8006ba8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b78:	4f0f      	ldr	r7, [pc, #60]	; (8006bb8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8006b7a:	4e10      	ldr	r6, [pc, #64]	; (8006bbc <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7fe ffff 	bl	8005b80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7fe fffc 	bl	8005b80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b88:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b8a:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8006b8c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b90:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8006b92:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b94:	4a0c      	ldr	r2, [pc, #48]	; (8006bc8 <prvCheckForValidListAndQueue+0x5c>)
 8006b96:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <prvCheckForValidListAndQueue+0x60>)
 8006b98:	9500      	str	r5, [sp, #0]
 8006b9a:	f7ff f8fd 	bl	8005d98 <xQueueGenericCreateStatic>
 8006b9e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ba0:	b110      	cbz	r0, 8006ba8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ba2:	490b      	ldr	r1, [pc, #44]	; (8006bd0 <prvCheckForValidListAndQueue+0x64>)
 8006ba4:	f7ff faf8 	bl	8006198 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8006ba8:	b003      	add	sp, #12
 8006baa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8006bae:	f000 ba31 	b.w	8007014 <vPortExitCritical>
 8006bb2:	bf00      	nop
 8006bb4:	200012e4 	.word	0x200012e4
 8006bb8:	20001268 	.word	0x20001268
 8006bbc:	2000127c 	.word	0x2000127c
 8006bc0:	200011c0 	.word	0x200011c0
 8006bc4:	200011c4 	.word	0x200011c4
 8006bc8:	200011c8 	.word	0x200011c8
 8006bcc:	20001294 	.word	0x20001294
 8006bd0:	080096bf 	.word	0x080096bf

08006bd4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8006bd4:	4291      	cmp	r1, r2
{
 8006bd6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bd8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bda:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006bdc:	d80a      	bhi.n	8006bf4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	6983      	ldr	r3, [r0, #24]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d20d      	bcs.n	8006c02 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006be6:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <prvInsertTimerInActiveList+0x34>)
 8006be8:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	f7fe ffe2 	bl	8005bb4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006bf0:	2000      	movs	r0, #0
}
 8006bf2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d201      	bcs.n	8006bfc <prvInsertTimerInActiveList+0x28>
 8006bf8:	4299      	cmp	r1, r3
 8006bfa:	d202      	bcs.n	8006c02 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bfc:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <prvInsertTimerInActiveList+0x38>)
 8006bfe:	1d01      	adds	r1, r0, #4
 8006c00:	e7f3      	b.n	8006bea <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8006c02:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006c04:	e7f5      	b.n	8006bf2 <prvInsertTimerInActiveList+0x1e>
 8006c06:	bf00      	nop
 8006c08:	200011c4 	.word	0x200011c4
 8006c0c:	200011c0 	.word	0x200011c0

08006c10 <xTimerCreateTimerTask>:
{
 8006c10:	b510      	push	{r4, lr}
 8006c12:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006c14:	f7ff ffaa 	bl	8006b6c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006c18:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <xTimerCreateTimerTask+0x54>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	b1b3      	cbz	r3, 8006c4c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c1e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c20:	aa07      	add	r2, sp, #28
 8006c22:	a906      	add	r1, sp, #24
 8006c24:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c26:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c2a:	f7fe ff9d 	bl	8005b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c2e:	9b05      	ldr	r3, [sp, #20]
 8006c30:	9a07      	ldr	r2, [sp, #28]
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	9b06      	ldr	r3, [sp, #24]
 8006c36:	490c      	ldr	r1, [pc, #48]	; (8006c68 <xTimerCreateTimerTask+0x58>)
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	480b      	ldr	r0, [pc, #44]	; (8006c6c <xTimerCreateTimerTask+0x5c>)
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4623      	mov	r3, r4
 8006c42:	f7ff fc4d 	bl	80064e0 <xTaskCreateStatic>
 8006c46:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <xTimerCreateTimerTask+0x60>)
 8006c48:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006c4a:	b940      	cbnz	r0, 8006c5e <xTimerCreateTimerTask+0x4e>
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006c5c:	e7fe      	b.n	8006c5c <xTimerCreateTimerTask+0x4c>
}
 8006c5e:	2001      	movs	r0, #1
 8006c60:	b008      	add	sp, #32
 8006c62:	bd10      	pop	{r4, pc}
 8006c64:	200012e4 	.word	0x200012e4
 8006c68:	080096c4 	.word	0x080096c4
 8006c6c:	08006d75 	.word	0x08006d75
 8006c70:	200012e8 	.word	0x200012e8

08006c74 <xTimerGenericCommand>:
{
 8006c74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006c76:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8006c78:	4604      	mov	r4, r0
{
 8006c7a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8006c7c:	b940      	cbnz	r0, 8006c90 <xTimerGenericCommand+0x1c>
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	e7fe      	b.n	8006c8e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8006c90:	4d0d      	ldr	r5, [pc, #52]	; (8006cc8 <xTimerGenericCommand+0x54>)
 8006c92:	6828      	ldr	r0, [r5, #0]
 8006c94:	b180      	cbz	r0, 8006cb8 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c96:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c98:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c9c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c9e:	dc0d      	bgt.n	8006cbc <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ca0:	f7ff ff12 	bl	8006ac8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ca4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ca6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ca8:	bf18      	it	ne
 8006caa:	461a      	movne	r2, r3
 8006cac:	4669      	mov	r1, sp
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cae:	bf08      	it	eq
 8006cb0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cb2:	6828      	ldr	r0, [r5, #0]
 8006cb4:	f7ff f8bd 	bl	8005e32 <xQueueGenericSend>
}
 8006cb8:	b004      	add	sp, #16
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4669      	mov	r1, sp
 8006cc0:	f7ff f96a 	bl	8005f98 <xQueueGenericSendFromISR>
 8006cc4:	e7f8      	b.n	8006cb8 <xTimerGenericCommand+0x44>
 8006cc6:	bf00      	nop
 8006cc8:	200012e4 	.word	0x200012e4

08006ccc <prvSampleTimeNow>:
{
 8006ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8006cd2:	f7ff fcc1 	bl	8006658 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006cd6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006d68 <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 8006cda:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8006cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce0:	4283      	cmp	r3, r0
 8006ce2:	d90b      	bls.n	8006cfc <prvSampleTimeNow+0x30>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ce4:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ce8:	4f20      	ldr	r7, [pc, #128]	; (8006d6c <prvSampleTimeNow+0xa0>)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	b96a      	cbnz	r2, 8006d0c <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8006cf0:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <prvSampleTimeNow+0xa4>)
 8006cf2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006cf4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8006cf6:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <prvSampleTimeNow+0x32>
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8006d00:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8006d02:	f8c8 5000 	str.w	r5, [r8]
}
 8006d06:	b003      	add	sp, #12
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d0c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d0e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d10:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d14:	f104 0b04 	add.w	fp, r4, #4
 8006d18:	4658      	mov	r0, fp
 8006d1a:	f7fe ff62 	bl	8005be2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d20:	4620      	mov	r0, r4
 8006d22:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d24:	69e3      	ldr	r3, [r4, #28]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d1df      	bne.n	8006cea <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d2a:	69a3      	ldr	r3, [r4, #24]
 8006d2c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8006d2e:	459a      	cmp	sl, r3
 8006d30:	d206      	bcs.n	8006d40 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d32:	4659      	mov	r1, fp
 8006d34:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d36:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d38:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d3a:	f7fe ff3b 	bl	8005bb4 <vListInsert>
 8006d3e:	e7d4      	b.n	8006cea <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d40:	2300      	movs	r3, #0
 8006d42:	4652      	mov	r2, sl
 8006d44:	4619      	mov	r1, r3
 8006d46:	4620      	mov	r0, r4
 8006d48:	f8cd 9000 	str.w	r9, [sp]
 8006d4c:	f7ff ff92 	bl	8006c74 <xTimerGenericCommand>
				configASSERT( xResult );
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d1ca      	bne.n	8006cea <prvSampleTimeNow+0x1e>
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	e7fe      	b.n	8006d64 <prvSampleTimeNow+0x98>
 8006d66:	bf00      	nop
 8006d68:	20001290 	.word	0x20001290
 8006d6c:	200011c0 	.word	0x200011c0
 8006d70:	200011c4 	.word	0x200011c4

08006d74 <prvTimerTask>:
{
 8006d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d78:	4e69      	ldr	r6, [pc, #420]	; (8006f20 <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d7a:	4f6a      	ldr	r7, [pc, #424]	; (8006f24 <prvTimerTask+0x1b0>)
{
 8006d7c:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d7e:	6833      	ldr	r3, [r6, #0]
 8006d80:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d82:	2d00      	cmp	r5, #0
 8006d84:	d033      	beq.n	8006dee <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8006d8c:	f7ff fc5c 	bl	8006648 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d90:	a804      	add	r0, sp, #16
 8006d92:	f7ff ff9b 	bl	8006ccc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8006d96:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d98:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006d9a:	2c00      	cmp	r4, #0
 8006d9c:	d175      	bne.n	8006e8a <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	d058      	beq.n	8006e54 <prvTimerTask+0xe0>
 8006da2:	4540      	cmp	r0, r8
 8006da4:	d35c      	bcc.n	8006e60 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8006da6:	f7ff fced 	bl	8006784 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006daa:	6833      	ldr	r3, [r6, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006db0:	1d28      	adds	r0, r5, #4
 8006db2:	f7fe ff16 	bl	8005be2 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006db6:	69eb      	ldr	r3, [r5, #28]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d11a      	bne.n	8006df2 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dbc:	69a9      	ldr	r1, [r5, #24]
 8006dbe:	4643      	mov	r3, r8
 8006dc0:	464a      	mov	r2, r9
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	4441      	add	r1, r8
 8006dc6:	f7ff ff05 	bl	8006bd4 <prvInsertTimerInActiveList>
 8006dca:	b190      	cbz	r0, 8006df2 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dcc:	4623      	mov	r3, r4
 8006dce:	4642      	mov	r2, r8
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	9400      	str	r4, [sp, #0]
 8006dd6:	f7ff ff4d 	bl	8006c74 <xTimerGenericCommand>
			configASSERT( xResult );
 8006dda:	b950      	cbnz	r0, 8006df2 <prvTimerTask+0x7e>
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	e7fe      	b.n	8006dec <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8006dee:	46a8      	mov	r8, r5
 8006df0:	e7cc      	b.n	8006d8c <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006df2:	4628      	mov	r0, r5
 8006df4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006df6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006df8:	2500      	movs	r5, #0
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	6838      	ldr	r0, [r7, #0]
 8006dfe:	a904      	add	r1, sp, #16
 8006e00:	f7ff f92b 	bl	800605a <xQueueReceive>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d0ba      	beq.n	8006d7e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e08:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e0a:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	db3f      	blt.n	8006e90 <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e10:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e12:	6963      	ldr	r3, [r4, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d142      	bne.n	8006e9e <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e18:	a803      	add	r0, sp, #12
 8006e1a:	f7ff ff57 	bl	8006ccc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006e1e:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e20:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8006e22:	2b09      	cmp	r3, #9
 8006e24:	d8e9      	bhi.n	8006dfa <prvTimerTask+0x86>
 8006e26:	a101      	add	r1, pc, #4	; (adr r1, 8006e2c <prvTimerTask+0xb8>)
 8006e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e2c:	08006ea7 	.word	0x08006ea7
 8006e30:	08006ea7 	.word	0x08006ea7
 8006e34:	08006ea7 	.word	0x08006ea7
 8006e38:	08006dfb 	.word	0x08006dfb
 8006e3c:	08006eeb 	.word	0x08006eeb
 8006e40:	08006f0f 	.word	0x08006f0f
 8006e44:	08006ea7 	.word	0x08006ea7
 8006e48:	08006ea7 	.word	0x08006ea7
 8006e4c:	08006dfb 	.word	0x08006dfb
 8006e50:	08006eeb 	.word	0x08006eeb
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e54:	4b34      	ldr	r3, [pc, #208]	; (8006f28 <prvTimerTask+0x1b4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681c      	ldr	r4, [r3, #0]
 8006e5a:	fab4 f484 	clz	r4, r4
 8006e5e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e60:	4622      	mov	r2, r4
 8006e62:	6838      	ldr	r0, [r7, #0]
 8006e64:	eba8 0109 	sub.w	r1, r8, r9
 8006e68:	f7ff f9a8 	bl	80061bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e6c:	f7ff fc8a 	bl	8006784 <xTaskResumeAll>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d1c1      	bne.n	8006df8 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8006e74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	e7b6      	b.n	8006df8 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8006e8a:	f7ff fc7b 	bl	8006784 <xTaskResumeAll>
 8006e8e:	e7b3      	b.n	8006df8 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	9907      	ldr	r1, [sp, #28]
 8006e94:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dbae      	blt.n	8006dfa <prvTimerTask+0x86>
 8006e9c:	e7b8      	b.n	8006e10 <prvTimerTask+0x9c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e9e:	1d20      	adds	r0, r4, #4
 8006ea0:	f7fe fe9f 	bl	8005be2 <uxListRemove>
 8006ea4:	e7b8      	b.n	8006e18 <prvTimerTask+0xa4>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ea6:	69a1      	ldr	r1, [r4, #24]
 8006ea8:	9b05      	ldr	r3, [sp, #20]
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4419      	add	r1, r3
 8006eae:	f7ff fe91 	bl	8006bd4 <prvInsertTimerInActiveList>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d0a1      	beq.n	8006dfa <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eb8:	4620      	mov	r0, r4
 8006eba:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ebc:	69e3      	ldr	r3, [r4, #28]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d19b      	bne.n	8006dfa <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	69a2      	ldr	r2, [r4, #24]
 8006ec6:	9905      	ldr	r1, [sp, #20]
 8006ec8:	4620      	mov	r0, r4
 8006eca:	440a      	add	r2, r1
 8006ecc:	9500      	str	r5, [sp, #0]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f7ff fed0 	bl	8006c74 <xTimerGenericCommand>
							configASSERT( xResult );
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d190      	bne.n	8006dfa <prvTimerTask+0x86>
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	e7fe      	b.n	8006ee8 <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006eea:	9905      	ldr	r1, [sp, #20]
 8006eec:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006eee:	b941      	cbnz	r1, 8006f02 <prvTimerTask+0x18e>
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	e7fe      	b.n	8006f00 <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f02:	4603      	mov	r3, r0
 8006f04:	4401      	add	r1, r0
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff fe64 	bl	8006bd4 <prvInsertTimerInActiveList>
					break;
 8006f0c:	e775      	b.n	8006dfa <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f0e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f47f af71 	bne.w	8006dfa <prvTimerTask+0x86>
							vPortFree( pxTimer );
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 fa1d 	bl	8007358 <vPortFree>
 8006f1e:	e76c      	b.n	8006dfa <prvTimerTask+0x86>
 8006f20:	200011c0 	.word	0x200011c0
 8006f24:	200012e4 	.word	0x200012e4
 8006f28:	200011c4 	.word	0x200011c4

08006f2c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f2c:	4806      	ldr	r0, [pc, #24]	; (8006f48 <prvPortStartFirstTask+0x1c>)
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	6800      	ldr	r0, [r0, #0]
 8006f32:	f380 8808 	msr	MSP, r0
 8006f36:	b662      	cpsie	i
 8006f38:	b661      	cpsie	f
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	df00      	svc	0
 8006f44:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f46:	0000      	.short	0x0000
 8006f48:	e000ed08 	.word	0xe000ed08

08006f4c <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8006f4c:	2300      	movs	r3, #0
{
 8006f4e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006f50:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <prvTaskExitError+0x3c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3301      	adds	r3, #1
 8006f58:	d008      	beq.n	8006f6c <prvTaskExitError+0x20>
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	e7fe      	b.n	8006f6a <prvTaskExitError+0x1e>
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0fc      	beq.n	8006f7c <prvTaskExitError+0x30>
}
 8006f82:	b002      	add	sp, #8
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000048 	.word	0x20000048

08006f8c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f90:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f96:	f021 0101 	bic.w	r1, r1, #1
 8006f9a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f9e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fa2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006fa6:	3840      	subs	r0, #64	; 0x40
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	08006f4d 	.word	0x08006f4d

08006fb0 <SVC_Handler>:
	__asm volatile (
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <pxCurrentTCBConst2>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fba:	f380 8809 	msr	PSP, r0
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	f04e 0e0d 	orr.w	lr, lr, #13
 8006fce:	4770      	bx	lr

08006fd0 <pxCurrentTCBConst2>:
 8006fd0:	20000cc4 	.word	0x20000cc4

08006fd4 <vPortEnterCritical>:
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fe4:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <vPortEnterCritical+0x3c>)
 8006fe6:	6813      	ldr	r3, [r2, #0]
 8006fe8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006fec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006fee:	d10e      	bne.n	800700e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ff0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ff4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	b143      	cbz	r3, 800700e <vPortEnterCritical+0x3a>
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	e7fe      	b.n	800700c <vPortEnterCritical+0x38>
	}
}
 800700e:	4770      	bx	lr
 8007010:	20000048 	.word	0x20000048

08007014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007014:	4a08      	ldr	r2, [pc, #32]	; (8007038 <vPortExitCritical+0x24>)
 8007016:	6813      	ldr	r3, [r2, #0]
 8007018:	b943      	cbnz	r3, 800702c <vPortExitCritical+0x18>
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	e7fe      	b.n	800702a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800702c:	3b01      	subs	r3, #1
 800702e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007030:	b90b      	cbnz	r3, 8007036 <vPortExitCritical+0x22>
	__asm volatile
 8007032:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007036:	4770      	bx	lr
 8007038:	20000048 	.word	0x20000048
 800703c:	00000000 	.word	0x00000000

08007040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007040:	f3ef 8009 	mrs	r0, PSP
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <pxCurrentTCBConst>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007050:	6010      	str	r0, [r2, #0]
 8007052:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007056:	f04f 0050 	mov.w	r0, #80	; 0x50
 800705a:	f380 8811 	msr	BASEPRI, r0
 800705e:	f7ff fc29 	bl	80068b4 <vTaskSwitchContext>
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800706e:	6819      	ldr	r1, [r3, #0]
 8007070:	6808      	ldr	r0, [r1, #0]
 8007072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007076:	f380 8809 	msr	PSP, r0
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	4770      	bx	lr

08007080 <pxCurrentTCBConst>:
 8007080:	20000cc4 	.word	0x20000cc4

08007084 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007084:	b508      	push	{r3, lr}
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007096:	f7ff fae5 	bl	8006664 <xTaskIncrementTick>
 800709a:	b128      	cbz	r0, 80070a8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800709c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80070a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80070a8:	2300      	movs	r3, #0
 80070aa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80070ae:	bd08      	pop	{r3, pc}

080070b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80070b4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070ba:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070bc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070be:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <vPortSetupTimerInterrupt+0x20>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80070c6:	3b01      	subs	r3, #1
 80070c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ca:	2307      	movs	r3, #7
 80070cc:	6113      	str	r3, [r2, #16]
}
 80070ce:	4770      	bx	lr
 80070d0:	2000003c 	.word	0x2000003c

080070d4 <xPortStartScheduler>:
{
 80070d4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070d6:	4b29      	ldr	r3, [pc, #164]	; (800717c <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070d8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070da:	781a      	ldrb	r2, [r3, #0]
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070e0:	22ff      	movs	r2, #255	; 0xff
 80070e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070e4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070e6:	4a26      	ldr	r2, [pc, #152]	; (8007180 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070f8:	2307      	movs	r3, #7
 80070fa:	4a22      	ldr	r2, [pc, #136]	; (8007184 <xPortStartScheduler+0xb0>)
 80070fc:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007102:	1e5c      	subs	r4, r3, #1
 8007104:	0600      	lsls	r0, r0, #24
 8007106:	d40c      	bmi.n	8007122 <xPortStartScheduler+0x4e>
 8007108:	b111      	cbz	r1, 8007110 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800710a:	2b03      	cmp	r3, #3
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	d011      	beq.n	8007134 <xPortStartScheduler+0x60>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	e7fe      	b.n	8007120 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007122:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007126:	2101      	movs	r1, #1
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	b2db      	uxtb	r3, r3
 800712c:	f88d 3003 	strb.w	r3, [sp, #3]
 8007130:	4623      	mov	r3, r4
 8007132:	e7e4      	b.n	80070fe <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007134:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007138:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800713a:	9b01      	ldr	r3, [sp, #4]
 800713c:	4a0f      	ldr	r2, [pc, #60]	; (800717c <xPortStartScheduler+0xa8>)
 800713e:	b2db      	uxtb	r3, r3
 8007140:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007142:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8007146:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007148:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800714c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007150:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007154:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007158:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800715c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007160:	f7ff ffa6 	bl	80070b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007164:	4b08      	ldr	r3, [pc, #32]	; (8007188 <xPortStartScheduler+0xb4>)
 8007166:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007168:	f7ff fee0 	bl	8006f2c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800716c:	f7ff fba2 	bl	80068b4 <vTaskSwitchContext>
}
 8007170:	4620      	mov	r0, r4
	prvTaskExitError();
 8007172:	f7ff feeb 	bl	8006f4c <prvTaskExitError>
}
 8007176:	b002      	add	sp, #8
 8007178:	bd10      	pop	{r4, pc}
 800717a:	bf00      	nop
 800717c:	e000e400 	.word	0xe000e400
 8007180:	200012ec 	.word	0x200012ec
 8007184:	200012f0 	.word	0x200012f0
 8007188:	20000048 	.word	0x20000048

0800718c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800718c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007190:	2b0f      	cmp	r3, #15
 8007192:	d90e      	bls.n	80071b2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007194:	4a11      	ldr	r2, [pc, #68]	; (80071dc <vPortValidateInterruptPriority+0x50>)
 8007196:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007198:	4a11      	ldr	r2, [pc, #68]	; (80071e0 <vPortValidateInterruptPriority+0x54>)
 800719a:	7812      	ldrb	r2, [r2, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d908      	bls.n	80071b2 <vPortValidateInterruptPriority+0x26>
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	e7fe      	b.n	80071b0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80071b6:	4a0b      	ldr	r2, [pc, #44]	; (80071e4 <vPortValidateInterruptPriority+0x58>)
 80071b8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d908      	bls.n	80071d8 <vPortValidateInterruptPriority+0x4c>
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	e7fe      	b.n	80071d6 <vPortValidateInterruptPriority+0x4a>
	}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	e000e3f0 	.word	0xe000e3f0
 80071e0:	200012ec 	.word	0x200012ec
 80071e4:	200012f0 	.word	0x200012f0

080071e8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071e8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071ea:	4b10      	ldr	r3, [pc, #64]	; (800722c <prvInsertBlockIntoFreeList+0x44>)
 80071ec:	461a      	mov	r2, r3
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4283      	cmp	r3, r0
 80071f2:	d3fb      	bcc.n	80071ec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071f4:	6854      	ldr	r4, [r2, #4]
 80071f6:	1911      	adds	r1, r2, r4
 80071f8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071fa:	bf01      	itttt	eq
 80071fc:	6841      	ldreq	r1, [r0, #4]
 80071fe:	4610      	moveq	r0, r2
 8007200:	1909      	addeq	r1, r1, r4
 8007202:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007204:	6844      	ldr	r4, [r0, #4]
 8007206:	1901      	adds	r1, r0, r4
 8007208:	428b      	cmp	r3, r1
 800720a:	d10c      	bne.n	8007226 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800720c:	4908      	ldr	r1, [pc, #32]	; (8007230 <prvInsertBlockIntoFreeList+0x48>)
 800720e:	6809      	ldr	r1, [r1, #0]
 8007210:	428b      	cmp	r3, r1
 8007212:	d003      	beq.n	800721c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007214:	6859      	ldr	r1, [r3, #4]
 8007216:	4421      	add	r1, r4
 8007218:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800721a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800721c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800721e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007220:	bf18      	it	ne
 8007222:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007224:	bd10      	pop	{r4, pc}
 8007226:	4619      	mov	r1, r3
 8007228:	e7f8      	b.n	800721c <prvInsertBlockIntoFreeList+0x34>
 800722a:	bf00      	nop
 800722c:	20002880 	.word	0x20002880
 8007230:	200012f4 	.word	0x200012f4

08007234 <pvPortMalloc>:
{
 8007234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800723a:	f7ff fa05 	bl	8006648 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800723e:	493f      	ldr	r1, [pc, #252]	; (800733c <pvPortMalloc+0x108>)
 8007240:	4d3f      	ldr	r5, [pc, #252]	; (8007340 <pvPortMalloc+0x10c>)
 8007242:	680b      	ldr	r3, [r1, #0]
 8007244:	b9fb      	cbnz	r3, 8007286 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8007246:	4a3f      	ldr	r2, [pc, #252]	; (8007344 <pvPortMalloc+0x110>)
	xStart.xBlockSize = ( size_t ) 0;
 8007248:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800724a:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800724c:	bf0f      	iteee	eq
 800724e:	f241 537c 	movweq	r3, #5500	; 0x157c
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007252:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007254:	4b3c      	ldrne	r3, [pc, #240]	; (8007348 <pvPortMalloc+0x114>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007256:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800725a:	bf18      	it	ne
 800725c:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800725e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007260:	4e3a      	ldr	r6, [pc, #232]	; (800734c <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 8007262:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007264:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007268:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800726a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800726c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007270:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007272:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007276:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007278:	4b35      	ldr	r3, [pc, #212]	; (8007350 <pvPortMalloc+0x11c>)
 800727a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800727c:	4b35      	ldr	r3, [pc, #212]	; (8007354 <pvPortMalloc+0x120>)
 800727e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007284:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007286:	682e      	ldr	r6, [r5, #0]
 8007288:	4226      	tst	r6, r4
 800728a:	d151      	bne.n	8007330 <pvPortMalloc+0xfc>
			if( xWantedSize > 0 )
 800728c:	2c00      	cmp	r4, #0
 800728e:	d042      	beq.n	8007316 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8007290:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007294:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007296:	bf1c      	itt	ne
 8007298:	f023 0307 	bicne.w	r3, r3, #7
 800729c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d046      	beq.n	8007330 <pvPortMalloc+0xfc>
 80072a2:	4f2c      	ldr	r7, [pc, #176]	; (8007354 <pvPortMalloc+0x120>)
 80072a4:	683c      	ldr	r4, [r7, #0]
 80072a6:	429c      	cmp	r4, r3
 80072a8:	d342      	bcc.n	8007330 <pvPortMalloc+0xfc>
				pxBlock = xStart.pxNextFreeBlock;
 80072aa:	4a28      	ldr	r2, [pc, #160]	; (800734c <pvPortMalloc+0x118>)
 80072ac:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ae:	6868      	ldr	r0, [r5, #4]
 80072b0:	4298      	cmp	r0, r3
 80072b2:	d204      	bcs.n	80072be <pvPortMalloc+0x8a>
 80072b4:	f8d5 c000 	ldr.w	ip, [r5]
 80072b8:	f1bc 0f00 	cmp.w	ip, #0
 80072bc:	d115      	bne.n	80072ea <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 80072be:	6809      	ldr	r1, [r1, #0]
 80072c0:	42a9      	cmp	r1, r5
 80072c2:	d035      	beq.n	8007330 <pvPortMalloc+0xfc>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072c4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072c6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072ca:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072cc:	1ac2      	subs	r2, r0, r3
 80072ce:	2a10      	cmp	r2, #16
 80072d0:	d912      	bls.n	80072f8 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072d2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072d4:	0741      	lsls	r1, r0, #29
 80072d6:	d00b      	beq.n	80072f0 <pvPortMalloc+0xbc>
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	e7fe      	b.n	80072e8 <pvPortMalloc+0xb4>
 80072ea:	462a      	mov	r2, r5
 80072ec:	4665      	mov	r5, ip
 80072ee:	e7de      	b.n	80072ae <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072f0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072f2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072f4:	f7ff ff78 	bl	80071e8 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 80072f8:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072fa:	4915      	ldr	r1, [pc, #84]	; (8007350 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072fc:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072fe:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007300:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007302:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007304:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007308:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800730a:	bf38      	it	cc
 800730c:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800730e:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007310:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8007314:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007316:	f7ff fa35 	bl	8006784 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800731a:	0763      	lsls	r3, r4, #29
 800731c:	d00a      	beq.n	8007334 <pvPortMalloc+0x100>
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	e7fe      	b.n	800732e <pvPortMalloc+0xfa>
void *pvReturn = NULL;
 8007330:	2400      	movs	r4, #0
 8007332:	e7f0      	b.n	8007316 <pvPortMalloc+0xe2>
}
 8007334:	4620      	mov	r0, r4
 8007336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800733a:	bf00      	nop
 800733c:	200012f4 	.word	0x200012f4
 8007340:	20002874 	.word	0x20002874
 8007344:	200012f8 	.word	0x200012f8
 8007348:	20002874 	.word	0x20002874
 800734c:	20002880 	.word	0x20002880
 8007350:	2000287c 	.word	0x2000287c
 8007354:	20002878 	.word	0x20002878

08007358 <vPortFree>:
{
 8007358:	b510      	push	{r4, lr}
	if( pv != NULL )
 800735a:	4604      	mov	r4, r0
 800735c:	b370      	cbz	r0, 80073bc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800735e:	4a18      	ldr	r2, [pc, #96]	; (80073c0 <vPortFree+0x68>)
 8007360:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	4213      	tst	r3, r2
 8007368:	d108      	bne.n	800737c <vPortFree+0x24>
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	e7fe      	b.n	800737a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800737c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007380:	b141      	cbz	r1, 8007394 <vPortFree+0x3c>
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	e7fe      	b.n	8007392 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007394:	ea23 0302 	bic.w	r3, r3, r2
 8007398:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800739c:	f7ff f954 	bl	8006648 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073a0:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <vPortFree+0x6c>)
 80073a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80073a6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073a8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073ac:	440b      	add	r3, r1
 80073ae:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073b0:	f7ff ff1a 	bl	80071e8 <prvInsertBlockIntoFreeList>
}
 80073b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80073b8:	f7ff b9e4 	b.w	8006784 <xTaskResumeAll>
}
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	bf00      	nop
 80073c0:	20002874 	.word	0x20002874
 80073c4:	20002878 	.word	0x20002878

080073c8 <atoi>:
 80073c8:	220a      	movs	r2, #10
 80073ca:	2100      	movs	r1, #0
 80073cc:	f000 b87e 	b.w	80074cc <strtol>

080073d0 <_strtol_l.constprop.0>:
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d6:	4686      	mov	lr, r0
 80073d8:	4690      	mov	r8, r2
 80073da:	d001      	beq.n	80073e0 <_strtol_l.constprop.0+0x10>
 80073dc:	2b24      	cmp	r3, #36	; 0x24
 80073de:	d906      	bls.n	80073ee <_strtol_l.constprop.0+0x1e>
 80073e0:	f000 f8fc 	bl	80075dc <__errno>
 80073e4:	2316      	movs	r3, #22
 80073e6:	6003      	str	r3, [r0, #0]
 80073e8:	2000      	movs	r0, #0
 80073ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ee:	460d      	mov	r5, r1
 80073f0:	4835      	ldr	r0, [pc, #212]	; (80074c8 <_strtol_l.constprop.0+0xf8>)
 80073f2:	462a      	mov	r2, r5
 80073f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073f8:	5d06      	ldrb	r6, [r0, r4]
 80073fa:	f016 0608 	ands.w	r6, r6, #8
 80073fe:	d1f8      	bne.n	80073f2 <_strtol_l.constprop.0+0x22>
 8007400:	2c2d      	cmp	r4, #45	; 0x2d
 8007402:	d12e      	bne.n	8007462 <_strtol_l.constprop.0+0x92>
 8007404:	2601      	movs	r6, #1
 8007406:	782c      	ldrb	r4, [r5, #0]
 8007408:	1c95      	adds	r5, r2, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d057      	beq.n	80074be <_strtol_l.constprop.0+0xee>
 800740e:	2b10      	cmp	r3, #16
 8007410:	d109      	bne.n	8007426 <_strtol_l.constprop.0+0x56>
 8007412:	2c30      	cmp	r4, #48	; 0x30
 8007414:	d107      	bne.n	8007426 <_strtol_l.constprop.0+0x56>
 8007416:	782a      	ldrb	r2, [r5, #0]
 8007418:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800741c:	2a58      	cmp	r2, #88	; 0x58
 800741e:	d149      	bne.n	80074b4 <_strtol_l.constprop.0+0xe4>
 8007420:	2310      	movs	r3, #16
 8007422:	786c      	ldrb	r4, [r5, #1]
 8007424:	3502      	adds	r5, #2
 8007426:	2200      	movs	r2, #0
 8007428:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800742c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007430:	fbbc f9f3 	udiv	r9, ip, r3
 8007434:	4610      	mov	r0, r2
 8007436:	fb03 ca19 	mls	sl, r3, r9, ip
 800743a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800743e:	2f09      	cmp	r7, #9
 8007440:	d814      	bhi.n	800746c <_strtol_l.constprop.0+0x9c>
 8007442:	463c      	mov	r4, r7
 8007444:	42a3      	cmp	r3, r4
 8007446:	dd20      	ble.n	800748a <_strtol_l.constprop.0+0xba>
 8007448:	1c57      	adds	r7, r2, #1
 800744a:	d007      	beq.n	800745c <_strtol_l.constprop.0+0x8c>
 800744c:	4581      	cmp	r9, r0
 800744e:	d319      	bcc.n	8007484 <_strtol_l.constprop.0+0xb4>
 8007450:	d101      	bne.n	8007456 <_strtol_l.constprop.0+0x86>
 8007452:	45a2      	cmp	sl, r4
 8007454:	db16      	blt.n	8007484 <_strtol_l.constprop.0+0xb4>
 8007456:	2201      	movs	r2, #1
 8007458:	fb00 4003 	mla	r0, r0, r3, r4
 800745c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007460:	e7eb      	b.n	800743a <_strtol_l.constprop.0+0x6a>
 8007462:	2c2b      	cmp	r4, #43	; 0x2b
 8007464:	bf04      	itt	eq
 8007466:	782c      	ldrbeq	r4, [r5, #0]
 8007468:	1c95      	addeq	r5, r2, #2
 800746a:	e7ce      	b.n	800740a <_strtol_l.constprop.0+0x3a>
 800746c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007470:	2f19      	cmp	r7, #25
 8007472:	d801      	bhi.n	8007478 <_strtol_l.constprop.0+0xa8>
 8007474:	3c37      	subs	r4, #55	; 0x37
 8007476:	e7e5      	b.n	8007444 <_strtol_l.constprop.0+0x74>
 8007478:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800747c:	2f19      	cmp	r7, #25
 800747e:	d804      	bhi.n	800748a <_strtol_l.constprop.0+0xba>
 8007480:	3c57      	subs	r4, #87	; 0x57
 8007482:	e7df      	b.n	8007444 <_strtol_l.constprop.0+0x74>
 8007484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007488:	e7e8      	b.n	800745c <_strtol_l.constprop.0+0x8c>
 800748a:	1c53      	adds	r3, r2, #1
 800748c:	d108      	bne.n	80074a0 <_strtol_l.constprop.0+0xd0>
 800748e:	2322      	movs	r3, #34	; 0x22
 8007490:	4660      	mov	r0, ip
 8007492:	f8ce 3000 	str.w	r3, [lr]
 8007496:	f1b8 0f00 	cmp.w	r8, #0
 800749a:	d0a6      	beq.n	80073ea <_strtol_l.constprop.0+0x1a>
 800749c:	1e69      	subs	r1, r5, #1
 800749e:	e006      	b.n	80074ae <_strtol_l.constprop.0+0xde>
 80074a0:	b106      	cbz	r6, 80074a4 <_strtol_l.constprop.0+0xd4>
 80074a2:	4240      	negs	r0, r0
 80074a4:	f1b8 0f00 	cmp.w	r8, #0
 80074a8:	d09f      	beq.n	80073ea <_strtol_l.constprop.0+0x1a>
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	d1f6      	bne.n	800749c <_strtol_l.constprop.0+0xcc>
 80074ae:	f8c8 1000 	str.w	r1, [r8]
 80074b2:	e79a      	b.n	80073ea <_strtol_l.constprop.0+0x1a>
 80074b4:	2430      	movs	r4, #48	; 0x30
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1b5      	bne.n	8007426 <_strtol_l.constprop.0+0x56>
 80074ba:	2308      	movs	r3, #8
 80074bc:	e7b3      	b.n	8007426 <_strtol_l.constprop.0+0x56>
 80074be:	2c30      	cmp	r4, #48	; 0x30
 80074c0:	d0a9      	beq.n	8007416 <_strtol_l.constprop.0+0x46>
 80074c2:	230a      	movs	r3, #10
 80074c4:	e7af      	b.n	8007426 <_strtol_l.constprop.0+0x56>
 80074c6:	bf00      	nop
 80074c8:	080096cd 	.word	0x080096cd

080074cc <strtol>:
 80074cc:	4613      	mov	r3, r2
 80074ce:	460a      	mov	r2, r1
 80074d0:	4601      	mov	r1, r0
 80074d2:	4802      	ldr	r0, [pc, #8]	; (80074dc <strtol+0x10>)
 80074d4:	6800      	ldr	r0, [r0, #0]
 80074d6:	f7ff bf7b 	b.w	80073d0 <_strtol_l.constprop.0>
 80074da:	bf00      	nop
 80074dc:	20000098 	.word	0x20000098

080074e0 <siprintf>:
 80074e0:	b40e      	push	{r1, r2, r3}
 80074e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074e6:	b500      	push	{lr}
 80074e8:	b09c      	sub	sp, #112	; 0x70
 80074ea:	ab1d      	add	r3, sp, #116	; 0x74
 80074ec:	9002      	str	r0, [sp, #8]
 80074ee:	9006      	str	r0, [sp, #24]
 80074f0:	9107      	str	r1, [sp, #28]
 80074f2:	9104      	str	r1, [sp, #16]
 80074f4:	4808      	ldr	r0, [pc, #32]	; (8007518 <siprintf+0x38>)
 80074f6:	4909      	ldr	r1, [pc, #36]	; (800751c <siprintf+0x3c>)
 80074f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fc:	9105      	str	r1, [sp, #20]
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	a902      	add	r1, sp, #8
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	f000 f9fa 	bl	80078fc <_svfiprintf_r>
 8007508:	2200      	movs	r2, #0
 800750a:	9b02      	ldr	r3, [sp, #8]
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	b01c      	add	sp, #112	; 0x70
 8007510:	f85d eb04 	ldr.w	lr, [sp], #4
 8007514:	b003      	add	sp, #12
 8007516:	4770      	bx	lr
 8007518:	20000098 	.word	0x20000098
 800751c:	ffff0208 	.word	0xffff0208

08007520 <memset>:
 8007520:	4603      	mov	r3, r0
 8007522:	4402      	add	r2, r0
 8007524:	4293      	cmp	r3, r2
 8007526:	d100      	bne.n	800752a <memset+0xa>
 8007528:	4770      	bx	lr
 800752a:	f803 1b01 	strb.w	r1, [r3], #1
 800752e:	e7f9      	b.n	8007524 <memset+0x4>

08007530 <_reclaim_reent>:
 8007530:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <_reclaim_reent+0xa8>)
 8007532:	b570      	push	{r4, r5, r6, lr}
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4604      	mov	r4, r0
 8007538:	4283      	cmp	r3, r0
 800753a:	d04b      	beq.n	80075d4 <_reclaim_reent+0xa4>
 800753c:	69c3      	ldr	r3, [r0, #28]
 800753e:	b143      	cbz	r3, 8007552 <_reclaim_reent+0x22>
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d144      	bne.n	80075d0 <_reclaim_reent+0xa0>
 8007546:	69e3      	ldr	r3, [r4, #28]
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	b111      	cbz	r1, 8007552 <_reclaim_reent+0x22>
 800754c:	4620      	mov	r0, r4
 800754e:	f000 f887 	bl	8007660 <_free_r>
 8007552:	6961      	ldr	r1, [r4, #20]
 8007554:	b111      	cbz	r1, 800755c <_reclaim_reent+0x2c>
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f882 	bl	8007660 <_free_r>
 800755c:	69e1      	ldr	r1, [r4, #28]
 800755e:	b111      	cbz	r1, 8007566 <_reclaim_reent+0x36>
 8007560:	4620      	mov	r0, r4
 8007562:	f000 f87d 	bl	8007660 <_free_r>
 8007566:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007568:	b111      	cbz	r1, 8007570 <_reclaim_reent+0x40>
 800756a:	4620      	mov	r0, r4
 800756c:	f000 f878 	bl	8007660 <_free_r>
 8007570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007572:	b111      	cbz	r1, 800757a <_reclaim_reent+0x4a>
 8007574:	4620      	mov	r0, r4
 8007576:	f000 f873 	bl	8007660 <_free_r>
 800757a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800757c:	b111      	cbz	r1, 8007584 <_reclaim_reent+0x54>
 800757e:	4620      	mov	r0, r4
 8007580:	f000 f86e 	bl	8007660 <_free_r>
 8007584:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007586:	b111      	cbz	r1, 800758e <_reclaim_reent+0x5e>
 8007588:	4620      	mov	r0, r4
 800758a:	f000 f869 	bl	8007660 <_free_r>
 800758e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007590:	b111      	cbz	r1, 8007598 <_reclaim_reent+0x68>
 8007592:	4620      	mov	r0, r4
 8007594:	f000 f864 	bl	8007660 <_free_r>
 8007598:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800759a:	b111      	cbz	r1, 80075a2 <_reclaim_reent+0x72>
 800759c:	4620      	mov	r0, r4
 800759e:	f000 f85f 	bl	8007660 <_free_r>
 80075a2:	6a23      	ldr	r3, [r4, #32]
 80075a4:	b1b3      	cbz	r3, 80075d4 <_reclaim_reent+0xa4>
 80075a6:	4620      	mov	r0, r4
 80075a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075ac:	4718      	bx	r3
 80075ae:	5949      	ldr	r1, [r1, r5]
 80075b0:	b941      	cbnz	r1, 80075c4 <_reclaim_reent+0x94>
 80075b2:	3504      	adds	r5, #4
 80075b4:	69e3      	ldr	r3, [r4, #28]
 80075b6:	2d80      	cmp	r5, #128	; 0x80
 80075b8:	68d9      	ldr	r1, [r3, #12]
 80075ba:	d1f8      	bne.n	80075ae <_reclaim_reent+0x7e>
 80075bc:	4620      	mov	r0, r4
 80075be:	f000 f84f 	bl	8007660 <_free_r>
 80075c2:	e7c0      	b.n	8007546 <_reclaim_reent+0x16>
 80075c4:	680e      	ldr	r6, [r1, #0]
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 f84a 	bl	8007660 <_free_r>
 80075cc:	4631      	mov	r1, r6
 80075ce:	e7ef      	b.n	80075b0 <_reclaim_reent+0x80>
 80075d0:	2500      	movs	r5, #0
 80075d2:	e7ef      	b.n	80075b4 <_reclaim_reent+0x84>
 80075d4:	bd70      	pop	{r4, r5, r6, pc}
 80075d6:	bf00      	nop
 80075d8:	20000098 	.word	0x20000098

080075dc <__errno>:
 80075dc:	4b01      	ldr	r3, [pc, #4]	; (80075e4 <__errno+0x8>)
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20000098 	.word	0x20000098

080075e8 <__libc_init_array>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	2600      	movs	r6, #0
 80075ec:	4d0c      	ldr	r5, [pc, #48]	; (8007620 <__libc_init_array+0x38>)
 80075ee:	4c0d      	ldr	r4, [pc, #52]	; (8007624 <__libc_init_array+0x3c>)
 80075f0:	1b64      	subs	r4, r4, r5
 80075f2:	10a4      	asrs	r4, r4, #2
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	d109      	bne.n	800760c <__libc_init_array+0x24>
 80075f8:	f001 fde8 	bl	80091cc <_init>
 80075fc:	2600      	movs	r6, #0
 80075fe:	4d0a      	ldr	r5, [pc, #40]	; (8007628 <__libc_init_array+0x40>)
 8007600:	4c0a      	ldr	r4, [pc, #40]	; (800762c <__libc_init_array+0x44>)
 8007602:	1b64      	subs	r4, r4, r5
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	42a6      	cmp	r6, r4
 8007608:	d105      	bne.n	8007616 <__libc_init_array+0x2e>
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007610:	4798      	blx	r3
 8007612:	3601      	adds	r6, #1
 8007614:	e7ee      	b.n	80075f4 <__libc_init_array+0xc>
 8007616:	f855 3b04 	ldr.w	r3, [r5], #4
 800761a:	4798      	blx	r3
 800761c:	3601      	adds	r6, #1
 800761e:	e7f2      	b.n	8007606 <__libc_init_array+0x1e>
 8007620:	080098a0 	.word	0x080098a0
 8007624:	080098a0 	.word	0x080098a0
 8007628:	080098a0 	.word	0x080098a0
 800762c:	080098a4 	.word	0x080098a4

08007630 <__retarget_lock_acquire_recursive>:
 8007630:	4770      	bx	lr

08007632 <__retarget_lock_release_recursive>:
 8007632:	4770      	bx	lr

08007634 <strcpy>:
 8007634:	4603      	mov	r3, r0
 8007636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800763a:	f803 2b01 	strb.w	r2, [r3], #1
 800763e:	2a00      	cmp	r2, #0
 8007640:	d1f9      	bne.n	8007636 <strcpy+0x2>
 8007642:	4770      	bx	lr

08007644 <memcpy>:
 8007644:	440a      	add	r2, r1
 8007646:	4291      	cmp	r1, r2
 8007648:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800764c:	d100      	bne.n	8007650 <memcpy+0xc>
 800764e:	4770      	bx	lr
 8007650:	b510      	push	{r4, lr}
 8007652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007656:	4291      	cmp	r1, r2
 8007658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800765c:	d1f9      	bne.n	8007652 <memcpy+0xe>
 800765e:	bd10      	pop	{r4, pc}

08007660 <_free_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4605      	mov	r5, r0
 8007664:	2900      	cmp	r1, #0
 8007666:	d040      	beq.n	80076ea <_free_r+0x8a>
 8007668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766c:	1f0c      	subs	r4, r1, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfb8      	it	lt
 8007672:	18e4      	addlt	r4, r4, r3
 8007674:	f000 f8dc 	bl	8007830 <__malloc_lock>
 8007678:	4a1c      	ldr	r2, [pc, #112]	; (80076ec <_free_r+0x8c>)
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	b933      	cbnz	r3, 800768c <_free_r+0x2c>
 800767e:	6063      	str	r3, [r4, #4]
 8007680:	6014      	str	r4, [r2, #0]
 8007682:	4628      	mov	r0, r5
 8007684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007688:	f000 b8d8 	b.w	800783c <__malloc_unlock>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d908      	bls.n	80076a2 <_free_r+0x42>
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	1821      	adds	r1, r4, r0
 8007694:	428b      	cmp	r3, r1
 8007696:	bf01      	itttt	eq
 8007698:	6819      	ldreq	r1, [r3, #0]
 800769a:	685b      	ldreq	r3, [r3, #4]
 800769c:	1809      	addeq	r1, r1, r0
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	e7ed      	b.n	800767e <_free_r+0x1e>
 80076a2:	461a      	mov	r2, r3
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b10b      	cbz	r3, 80076ac <_free_r+0x4c>
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d9fa      	bls.n	80076a2 <_free_r+0x42>
 80076ac:	6811      	ldr	r1, [r2, #0]
 80076ae:	1850      	adds	r0, r2, r1
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d10b      	bne.n	80076cc <_free_r+0x6c>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	4401      	add	r1, r0
 80076b8:	1850      	adds	r0, r2, r1
 80076ba:	4283      	cmp	r3, r0
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	d1e0      	bne.n	8007682 <_free_r+0x22>
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4408      	add	r0, r1
 80076c6:	6010      	str	r0, [r2, #0]
 80076c8:	6053      	str	r3, [r2, #4]
 80076ca:	e7da      	b.n	8007682 <_free_r+0x22>
 80076cc:	d902      	bls.n	80076d4 <_free_r+0x74>
 80076ce:	230c      	movs	r3, #12
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	e7d6      	b.n	8007682 <_free_r+0x22>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	1821      	adds	r1, r4, r0
 80076d8:	428b      	cmp	r3, r1
 80076da:	bf01      	itttt	eq
 80076dc:	6819      	ldreq	r1, [r3, #0]
 80076de:	685b      	ldreq	r3, [r3, #4]
 80076e0:	1809      	addeq	r1, r1, r0
 80076e2:	6021      	streq	r1, [r4, #0]
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	6054      	str	r4, [r2, #4]
 80076e8:	e7cb      	b.n	8007682 <_free_r+0x22>
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	200029c8 	.word	0x200029c8

080076f0 <sbrk_aligned>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	4e0e      	ldr	r6, [pc, #56]	; (800772c <sbrk_aligned+0x3c>)
 80076f4:	460c      	mov	r4, r1
 80076f6:	6831      	ldr	r1, [r6, #0]
 80076f8:	4605      	mov	r5, r0
 80076fa:	b911      	cbnz	r1, 8007702 <sbrk_aligned+0x12>
 80076fc:	f000 fbaa 	bl	8007e54 <_sbrk_r>
 8007700:	6030      	str	r0, [r6, #0]
 8007702:	4621      	mov	r1, r4
 8007704:	4628      	mov	r0, r5
 8007706:	f000 fba5 	bl	8007e54 <_sbrk_r>
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d00a      	beq.n	8007724 <sbrk_aligned+0x34>
 800770e:	1cc4      	adds	r4, r0, #3
 8007710:	f024 0403 	bic.w	r4, r4, #3
 8007714:	42a0      	cmp	r0, r4
 8007716:	d007      	beq.n	8007728 <sbrk_aligned+0x38>
 8007718:	1a21      	subs	r1, r4, r0
 800771a:	4628      	mov	r0, r5
 800771c:	f000 fb9a 	bl	8007e54 <_sbrk_r>
 8007720:	3001      	adds	r0, #1
 8007722:	d101      	bne.n	8007728 <sbrk_aligned+0x38>
 8007724:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007728:	4620      	mov	r0, r4
 800772a:	bd70      	pop	{r4, r5, r6, pc}
 800772c:	200029cc 	.word	0x200029cc

08007730 <_malloc_r>:
 8007730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007734:	1ccd      	adds	r5, r1, #3
 8007736:	f025 0503 	bic.w	r5, r5, #3
 800773a:	3508      	adds	r5, #8
 800773c:	2d0c      	cmp	r5, #12
 800773e:	bf38      	it	cc
 8007740:	250c      	movcc	r5, #12
 8007742:	2d00      	cmp	r5, #0
 8007744:	4607      	mov	r7, r0
 8007746:	db01      	blt.n	800774c <_malloc_r+0x1c>
 8007748:	42a9      	cmp	r1, r5
 800774a:	d905      	bls.n	8007758 <_malloc_r+0x28>
 800774c:	230c      	movs	r3, #12
 800774e:	2600      	movs	r6, #0
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4630      	mov	r0, r6
 8007754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007758:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800782c <_malloc_r+0xfc>
 800775c:	f000 f868 	bl	8007830 <__malloc_lock>
 8007760:	f8d8 3000 	ldr.w	r3, [r8]
 8007764:	461c      	mov	r4, r3
 8007766:	bb5c      	cbnz	r4, 80077c0 <_malloc_r+0x90>
 8007768:	4629      	mov	r1, r5
 800776a:	4638      	mov	r0, r7
 800776c:	f7ff ffc0 	bl	80076f0 <sbrk_aligned>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	4604      	mov	r4, r0
 8007774:	d155      	bne.n	8007822 <_malloc_r+0xf2>
 8007776:	f8d8 4000 	ldr.w	r4, [r8]
 800777a:	4626      	mov	r6, r4
 800777c:	2e00      	cmp	r6, #0
 800777e:	d145      	bne.n	800780c <_malloc_r+0xdc>
 8007780:	2c00      	cmp	r4, #0
 8007782:	d048      	beq.n	8007816 <_malloc_r+0xe6>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	4631      	mov	r1, r6
 8007788:	4638      	mov	r0, r7
 800778a:	eb04 0903 	add.w	r9, r4, r3
 800778e:	f000 fb61 	bl	8007e54 <_sbrk_r>
 8007792:	4581      	cmp	r9, r0
 8007794:	d13f      	bne.n	8007816 <_malloc_r+0xe6>
 8007796:	6821      	ldr	r1, [r4, #0]
 8007798:	4638      	mov	r0, r7
 800779a:	1a6d      	subs	r5, r5, r1
 800779c:	4629      	mov	r1, r5
 800779e:	f7ff ffa7 	bl	80076f0 <sbrk_aligned>
 80077a2:	3001      	adds	r0, #1
 80077a4:	d037      	beq.n	8007816 <_malloc_r+0xe6>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	442b      	add	r3, r5
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	f8d8 3000 	ldr.w	r3, [r8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d038      	beq.n	8007826 <_malloc_r+0xf6>
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	42a2      	cmp	r2, r4
 80077b8:	d12b      	bne.n	8007812 <_malloc_r+0xe2>
 80077ba:	2200      	movs	r2, #0
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	e00f      	b.n	80077e0 <_malloc_r+0xb0>
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	1b52      	subs	r2, r2, r5
 80077c4:	d41f      	bmi.n	8007806 <_malloc_r+0xd6>
 80077c6:	2a0b      	cmp	r2, #11
 80077c8:	d917      	bls.n	80077fa <_malloc_r+0xca>
 80077ca:	1961      	adds	r1, r4, r5
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	6025      	str	r5, [r4, #0]
 80077d0:	bf18      	it	ne
 80077d2:	6059      	strne	r1, [r3, #4]
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	bf08      	it	eq
 80077d8:	f8c8 1000 	streq.w	r1, [r8]
 80077dc:	5162      	str	r2, [r4, r5]
 80077de:	604b      	str	r3, [r1, #4]
 80077e0:	4638      	mov	r0, r7
 80077e2:	f104 060b 	add.w	r6, r4, #11
 80077e6:	f000 f829 	bl	800783c <__malloc_unlock>
 80077ea:	f026 0607 	bic.w	r6, r6, #7
 80077ee:	1d23      	adds	r3, r4, #4
 80077f0:	1af2      	subs	r2, r6, r3
 80077f2:	d0ae      	beq.n	8007752 <_malloc_r+0x22>
 80077f4:	1b9b      	subs	r3, r3, r6
 80077f6:	50a3      	str	r3, [r4, r2]
 80077f8:	e7ab      	b.n	8007752 <_malloc_r+0x22>
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	6862      	ldr	r2, [r4, #4]
 80077fe:	d1dd      	bne.n	80077bc <_malloc_r+0x8c>
 8007800:	f8c8 2000 	str.w	r2, [r8]
 8007804:	e7ec      	b.n	80077e0 <_malloc_r+0xb0>
 8007806:	4623      	mov	r3, r4
 8007808:	6864      	ldr	r4, [r4, #4]
 800780a:	e7ac      	b.n	8007766 <_malloc_r+0x36>
 800780c:	4634      	mov	r4, r6
 800780e:	6876      	ldr	r6, [r6, #4]
 8007810:	e7b4      	b.n	800777c <_malloc_r+0x4c>
 8007812:	4613      	mov	r3, r2
 8007814:	e7cc      	b.n	80077b0 <_malloc_r+0x80>
 8007816:	230c      	movs	r3, #12
 8007818:	4638      	mov	r0, r7
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	f000 f80e 	bl	800783c <__malloc_unlock>
 8007820:	e797      	b.n	8007752 <_malloc_r+0x22>
 8007822:	6025      	str	r5, [r4, #0]
 8007824:	e7dc      	b.n	80077e0 <_malloc_r+0xb0>
 8007826:	605b      	str	r3, [r3, #4]
 8007828:	deff      	udf	#255	; 0xff
 800782a:	bf00      	nop
 800782c:	200029c8 	.word	0x200029c8

08007830 <__malloc_lock>:
 8007830:	4801      	ldr	r0, [pc, #4]	; (8007838 <__malloc_lock+0x8>)
 8007832:	f7ff befd 	b.w	8007630 <__retarget_lock_acquire_recursive>
 8007836:	bf00      	nop
 8007838:	200029c4 	.word	0x200029c4

0800783c <__malloc_unlock>:
 800783c:	4801      	ldr	r0, [pc, #4]	; (8007844 <__malloc_unlock+0x8>)
 800783e:	f7ff bef8 	b.w	8007632 <__retarget_lock_release_recursive>
 8007842:	bf00      	nop
 8007844:	200029c4 	.word	0x200029c4

08007848 <__ssputs_r>:
 8007848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	461f      	mov	r7, r3
 800784e:	688e      	ldr	r6, [r1, #8]
 8007850:	4682      	mov	sl, r0
 8007852:	42be      	cmp	r6, r7
 8007854:	460c      	mov	r4, r1
 8007856:	4690      	mov	r8, r2
 8007858:	680b      	ldr	r3, [r1, #0]
 800785a:	d82c      	bhi.n	80078b6 <__ssputs_r+0x6e>
 800785c:	898a      	ldrh	r2, [r1, #12]
 800785e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007862:	d026      	beq.n	80078b2 <__ssputs_r+0x6a>
 8007864:	6965      	ldr	r5, [r4, #20]
 8007866:	6909      	ldr	r1, [r1, #16]
 8007868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800786c:	eba3 0901 	sub.w	r9, r3, r1
 8007870:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007874:	1c7b      	adds	r3, r7, #1
 8007876:	444b      	add	r3, r9
 8007878:	106d      	asrs	r5, r5, #1
 800787a:	429d      	cmp	r5, r3
 800787c:	bf38      	it	cc
 800787e:	461d      	movcc	r5, r3
 8007880:	0553      	lsls	r3, r2, #21
 8007882:	d527      	bpl.n	80078d4 <__ssputs_r+0x8c>
 8007884:	4629      	mov	r1, r5
 8007886:	f7ff ff53 	bl	8007730 <_malloc_r>
 800788a:	4606      	mov	r6, r0
 800788c:	b360      	cbz	r0, 80078e8 <__ssputs_r+0xa0>
 800788e:	464a      	mov	r2, r9
 8007890:	6921      	ldr	r1, [r4, #16]
 8007892:	f7ff fed7 	bl	8007644 <memcpy>
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800789c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	6126      	str	r6, [r4, #16]
 80078a4:	444e      	add	r6, r9
 80078a6:	6026      	str	r6, [r4, #0]
 80078a8:	463e      	mov	r6, r7
 80078aa:	6165      	str	r5, [r4, #20]
 80078ac:	eba5 0509 	sub.w	r5, r5, r9
 80078b0:	60a5      	str	r5, [r4, #8]
 80078b2:	42be      	cmp	r6, r7
 80078b4:	d900      	bls.n	80078b8 <__ssputs_r+0x70>
 80078b6:	463e      	mov	r6, r7
 80078b8:	4632      	mov	r2, r6
 80078ba:	4641      	mov	r1, r8
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	f000 faaf 	bl	8007e20 <memmove>
 80078c2:	2000      	movs	r0, #0
 80078c4:	68a3      	ldr	r3, [r4, #8]
 80078c6:	1b9b      	subs	r3, r3, r6
 80078c8:	60a3      	str	r3, [r4, #8]
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	4433      	add	r3, r6
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d4:	462a      	mov	r2, r5
 80078d6:	f000 fadb 	bl	8007e90 <_realloc_r>
 80078da:	4606      	mov	r6, r0
 80078dc:	2800      	cmp	r0, #0
 80078de:	d1e0      	bne.n	80078a2 <__ssputs_r+0x5a>
 80078e0:	4650      	mov	r0, sl
 80078e2:	6921      	ldr	r1, [r4, #16]
 80078e4:	f7ff febc 	bl	8007660 <_free_r>
 80078e8:	230c      	movs	r3, #12
 80078ea:	f8ca 3000 	str.w	r3, [sl]
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f8:	81a3      	strh	r3, [r4, #12]
 80078fa:	e7e9      	b.n	80078d0 <__ssputs_r+0x88>

080078fc <_svfiprintf_r>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	4698      	mov	r8, r3
 8007902:	898b      	ldrh	r3, [r1, #12]
 8007904:	4607      	mov	r7, r0
 8007906:	061b      	lsls	r3, r3, #24
 8007908:	460d      	mov	r5, r1
 800790a:	4614      	mov	r4, r2
 800790c:	b09d      	sub	sp, #116	; 0x74
 800790e:	d50e      	bpl.n	800792e <_svfiprintf_r+0x32>
 8007910:	690b      	ldr	r3, [r1, #16]
 8007912:	b963      	cbnz	r3, 800792e <_svfiprintf_r+0x32>
 8007914:	2140      	movs	r1, #64	; 0x40
 8007916:	f7ff ff0b 	bl	8007730 <_malloc_r>
 800791a:	6028      	str	r0, [r5, #0]
 800791c:	6128      	str	r0, [r5, #16]
 800791e:	b920      	cbnz	r0, 800792a <_svfiprintf_r+0x2e>
 8007920:	230c      	movs	r3, #12
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007928:	e0d0      	b.n	8007acc <_svfiprintf_r+0x1d0>
 800792a:	2340      	movs	r3, #64	; 0x40
 800792c:	616b      	str	r3, [r5, #20]
 800792e:	2300      	movs	r3, #0
 8007930:	9309      	str	r3, [sp, #36]	; 0x24
 8007932:	2320      	movs	r3, #32
 8007934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007938:	2330      	movs	r3, #48	; 0x30
 800793a:	f04f 0901 	mov.w	r9, #1
 800793e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007942:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007ae4 <_svfiprintf_r+0x1e8>
 8007946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800794a:	4623      	mov	r3, r4
 800794c:	469a      	mov	sl, r3
 800794e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007952:	b10a      	cbz	r2, 8007958 <_svfiprintf_r+0x5c>
 8007954:	2a25      	cmp	r2, #37	; 0x25
 8007956:	d1f9      	bne.n	800794c <_svfiprintf_r+0x50>
 8007958:	ebba 0b04 	subs.w	fp, sl, r4
 800795c:	d00b      	beq.n	8007976 <_svfiprintf_r+0x7a>
 800795e:	465b      	mov	r3, fp
 8007960:	4622      	mov	r2, r4
 8007962:	4629      	mov	r1, r5
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff ff6f 	bl	8007848 <__ssputs_r>
 800796a:	3001      	adds	r0, #1
 800796c:	f000 80a9 	beq.w	8007ac2 <_svfiprintf_r+0x1c6>
 8007970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007972:	445a      	add	r2, fp
 8007974:	9209      	str	r2, [sp, #36]	; 0x24
 8007976:	f89a 3000 	ldrb.w	r3, [sl]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80a1 	beq.w	8007ac2 <_svfiprintf_r+0x1c6>
 8007980:	2300      	movs	r3, #0
 8007982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800798a:	f10a 0a01 	add.w	sl, sl, #1
 800798e:	9304      	str	r3, [sp, #16]
 8007990:	9307      	str	r3, [sp, #28]
 8007992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007996:	931a      	str	r3, [sp, #104]	; 0x68
 8007998:	4654      	mov	r4, sl
 800799a:	2205      	movs	r2, #5
 800799c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a0:	4850      	ldr	r0, [pc, #320]	; (8007ae4 <_svfiprintf_r+0x1e8>)
 80079a2:	f000 fa67 	bl	8007e74 <memchr>
 80079a6:	9a04      	ldr	r2, [sp, #16]
 80079a8:	b9d8      	cbnz	r0, 80079e2 <_svfiprintf_r+0xe6>
 80079aa:	06d0      	lsls	r0, r2, #27
 80079ac:	bf44      	itt	mi
 80079ae:	2320      	movmi	r3, #32
 80079b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b4:	0711      	lsls	r1, r2, #28
 80079b6:	bf44      	itt	mi
 80079b8:	232b      	movmi	r3, #43	; 0x2b
 80079ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079be:	f89a 3000 	ldrb.w	r3, [sl]
 80079c2:	2b2a      	cmp	r3, #42	; 0x2a
 80079c4:	d015      	beq.n	80079f2 <_svfiprintf_r+0xf6>
 80079c6:	4654      	mov	r4, sl
 80079c8:	2000      	movs	r0, #0
 80079ca:	f04f 0c0a 	mov.w	ip, #10
 80079ce:	9a07      	ldr	r2, [sp, #28]
 80079d0:	4621      	mov	r1, r4
 80079d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079d6:	3b30      	subs	r3, #48	; 0x30
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d94d      	bls.n	8007a78 <_svfiprintf_r+0x17c>
 80079dc:	b1b0      	cbz	r0, 8007a0c <_svfiprintf_r+0x110>
 80079de:	9207      	str	r2, [sp, #28]
 80079e0:	e014      	b.n	8007a0c <_svfiprintf_r+0x110>
 80079e2:	eba0 0308 	sub.w	r3, r0, r8
 80079e6:	fa09 f303 	lsl.w	r3, r9, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	46a2      	mov	sl, r4
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	e7d2      	b.n	8007998 <_svfiprintf_r+0x9c>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	1d19      	adds	r1, r3, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	9103      	str	r1, [sp, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfbb      	ittet	lt
 80079fe:	425b      	neglt	r3, r3
 8007a00:	f042 0202 	orrlt.w	r2, r2, #2
 8007a04:	9307      	strge	r3, [sp, #28]
 8007a06:	9307      	strlt	r3, [sp, #28]
 8007a08:	bfb8      	it	lt
 8007a0a:	9204      	strlt	r2, [sp, #16]
 8007a0c:	7823      	ldrb	r3, [r4, #0]
 8007a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a10:	d10c      	bne.n	8007a2c <_svfiprintf_r+0x130>
 8007a12:	7863      	ldrb	r3, [r4, #1]
 8007a14:	2b2a      	cmp	r3, #42	; 0x2a
 8007a16:	d134      	bne.n	8007a82 <_svfiprintf_r+0x186>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	3402      	adds	r4, #2
 8007a1c:	1d1a      	adds	r2, r3, #4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	9203      	str	r2, [sp, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bfb8      	it	lt
 8007a26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007ae8 <_svfiprintf_r+0x1ec>
 8007a30:	2203      	movs	r2, #3
 8007a32:	4650      	mov	r0, sl
 8007a34:	7821      	ldrb	r1, [r4, #0]
 8007a36:	f000 fa1d 	bl	8007e74 <memchr>
 8007a3a:	b138      	cbz	r0, 8007a4c <_svfiprintf_r+0x150>
 8007a3c:	2240      	movs	r2, #64	; 0x40
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	eba0 000a 	sub.w	r0, r0, sl
 8007a44:	4082      	lsls	r2, r0
 8007a46:	4313      	orrs	r3, r2
 8007a48:	3401      	adds	r4, #1
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a50:	2206      	movs	r2, #6
 8007a52:	4826      	ldr	r0, [pc, #152]	; (8007aec <_svfiprintf_r+0x1f0>)
 8007a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a58:	f000 fa0c 	bl	8007e74 <memchr>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d038      	beq.n	8007ad2 <_svfiprintf_r+0x1d6>
 8007a60:	4b23      	ldr	r3, [pc, #140]	; (8007af0 <_svfiprintf_r+0x1f4>)
 8007a62:	bb1b      	cbnz	r3, 8007aac <_svfiprintf_r+0x1b0>
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	3307      	adds	r3, #7
 8007a68:	f023 0307 	bic.w	r3, r3, #7
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	9303      	str	r3, [sp, #12]
 8007a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a72:	4433      	add	r3, r6
 8007a74:	9309      	str	r3, [sp, #36]	; 0x24
 8007a76:	e768      	b.n	800794a <_svfiprintf_r+0x4e>
 8007a78:	460c      	mov	r4, r1
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a80:	e7a6      	b.n	80079d0 <_svfiprintf_r+0xd4>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f04f 0c0a 	mov.w	ip, #10
 8007a88:	4619      	mov	r1, r3
 8007a8a:	3401      	adds	r4, #1
 8007a8c:	9305      	str	r3, [sp, #20]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a94:	3a30      	subs	r2, #48	; 0x30
 8007a96:	2a09      	cmp	r2, #9
 8007a98:	d903      	bls.n	8007aa2 <_svfiprintf_r+0x1a6>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0c6      	beq.n	8007a2c <_svfiprintf_r+0x130>
 8007a9e:	9105      	str	r1, [sp, #20]
 8007aa0:	e7c4      	b.n	8007a2c <_svfiprintf_r+0x130>
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aaa:	e7f0      	b.n	8007a8e <_svfiprintf_r+0x192>
 8007aac:	ab03      	add	r3, sp, #12
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	462a      	mov	r2, r5
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <_svfiprintf_r+0x1f8>)
 8007ab6:	a904      	add	r1, sp, #16
 8007ab8:	f3af 8000 	nop.w
 8007abc:	1c42      	adds	r2, r0, #1
 8007abe:	4606      	mov	r6, r0
 8007ac0:	d1d6      	bne.n	8007a70 <_svfiprintf_r+0x174>
 8007ac2:	89ab      	ldrh	r3, [r5, #12]
 8007ac4:	065b      	lsls	r3, r3, #25
 8007ac6:	f53f af2d 	bmi.w	8007924 <_svfiprintf_r+0x28>
 8007aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007acc:	b01d      	add	sp, #116	; 0x74
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	ab03      	add	r3, sp, #12
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4638      	mov	r0, r7
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <_svfiprintf_r+0x1f8>)
 8007adc:	a904      	add	r1, sp, #16
 8007ade:	f000 f87d 	bl	8007bdc <_printf_i>
 8007ae2:	e7eb      	b.n	8007abc <_svfiprintf_r+0x1c0>
 8007ae4:	080097cd 	.word	0x080097cd
 8007ae8:	080097d3 	.word	0x080097d3
 8007aec:	080097d7 	.word	0x080097d7
 8007af0:	00000000 	.word	0x00000000
 8007af4:	08007849 	.word	0x08007849

08007af8 <_printf_common>:
 8007af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afc:	4616      	mov	r6, r2
 8007afe:	4699      	mov	r9, r3
 8007b00:	688a      	ldr	r2, [r1, #8]
 8007b02:	690b      	ldr	r3, [r1, #16]
 8007b04:	4607      	mov	r7, r0
 8007b06:	4293      	cmp	r3, r2
 8007b08:	bfb8      	it	lt
 8007b0a:	4613      	movlt	r3, r2
 8007b0c:	6033      	str	r3, [r6, #0]
 8007b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b12:	460c      	mov	r4, r1
 8007b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b18:	b10a      	cbz	r2, 8007b1e <_printf_common+0x26>
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	6033      	str	r3, [r6, #0]
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	0699      	lsls	r1, r3, #26
 8007b22:	bf42      	ittt	mi
 8007b24:	6833      	ldrmi	r3, [r6, #0]
 8007b26:	3302      	addmi	r3, #2
 8007b28:	6033      	strmi	r3, [r6, #0]
 8007b2a:	6825      	ldr	r5, [r4, #0]
 8007b2c:	f015 0506 	ands.w	r5, r5, #6
 8007b30:	d106      	bne.n	8007b40 <_printf_common+0x48>
 8007b32:	f104 0a19 	add.w	sl, r4, #25
 8007b36:	68e3      	ldr	r3, [r4, #12]
 8007b38:	6832      	ldr	r2, [r6, #0]
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	42ab      	cmp	r3, r5
 8007b3e:	dc2b      	bgt.n	8007b98 <_printf_common+0xa0>
 8007b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b44:	1e13      	subs	r3, r2, #0
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	bf18      	it	ne
 8007b4a:	2301      	movne	r3, #1
 8007b4c:	0692      	lsls	r2, r2, #26
 8007b4e:	d430      	bmi.n	8007bb2 <_printf_common+0xba>
 8007b50:	4649      	mov	r1, r9
 8007b52:	4638      	mov	r0, r7
 8007b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b58:	47c0      	blx	r8
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d023      	beq.n	8007ba6 <_printf_common+0xae>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	6922      	ldr	r2, [r4, #16]
 8007b62:	f003 0306 	and.w	r3, r3, #6
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	bf14      	ite	ne
 8007b6a:	2500      	movne	r5, #0
 8007b6c:	6833      	ldreq	r3, [r6, #0]
 8007b6e:	f04f 0600 	mov.w	r6, #0
 8007b72:	bf08      	it	eq
 8007b74:	68e5      	ldreq	r5, [r4, #12]
 8007b76:	f104 041a 	add.w	r4, r4, #26
 8007b7a:	bf08      	it	eq
 8007b7c:	1aed      	subeq	r5, r5, r3
 8007b7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b82:	bf08      	it	eq
 8007b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	bfc4      	itt	gt
 8007b8c:	1a9b      	subgt	r3, r3, r2
 8007b8e:	18ed      	addgt	r5, r5, r3
 8007b90:	42b5      	cmp	r5, r6
 8007b92:	d11a      	bne.n	8007bca <_printf_common+0xd2>
 8007b94:	2000      	movs	r0, #0
 8007b96:	e008      	b.n	8007baa <_printf_common+0xb2>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	47c0      	blx	r8
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d103      	bne.n	8007bae <_printf_common+0xb6>
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bae:	3501      	adds	r5, #1
 8007bb0:	e7c1      	b.n	8007b36 <_printf_common+0x3e>
 8007bb2:	2030      	movs	r0, #48	; 0x30
 8007bb4:	18e1      	adds	r1, r4, r3
 8007bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bc0:	4422      	add	r2, r4
 8007bc2:	3302      	adds	r3, #2
 8007bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc8:	e7c2      	b.n	8007b50 <_printf_common+0x58>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4622      	mov	r2, r4
 8007bce:	4649      	mov	r1, r9
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	47c0      	blx	r8
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d0e6      	beq.n	8007ba6 <_printf_common+0xae>
 8007bd8:	3601      	adds	r6, #1
 8007bda:	e7d9      	b.n	8007b90 <_printf_common+0x98>

08007bdc <_printf_i>:
 8007bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	7e0f      	ldrb	r7, [r1, #24]
 8007be2:	4691      	mov	r9, r2
 8007be4:	2f78      	cmp	r7, #120	; 0x78
 8007be6:	4680      	mov	r8, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	469a      	mov	sl, r3
 8007bec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bf2:	d807      	bhi.n	8007c04 <_printf_i+0x28>
 8007bf4:	2f62      	cmp	r7, #98	; 0x62
 8007bf6:	d80a      	bhi.n	8007c0e <_printf_i+0x32>
 8007bf8:	2f00      	cmp	r7, #0
 8007bfa:	f000 80d5 	beq.w	8007da8 <_printf_i+0x1cc>
 8007bfe:	2f58      	cmp	r7, #88	; 0x58
 8007c00:	f000 80c1 	beq.w	8007d86 <_printf_i+0x1aa>
 8007c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c0c:	e03a      	b.n	8007c84 <_printf_i+0xa8>
 8007c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c12:	2b15      	cmp	r3, #21
 8007c14:	d8f6      	bhi.n	8007c04 <_printf_i+0x28>
 8007c16:	a101      	add	r1, pc, #4	; (adr r1, 8007c1c <_printf_i+0x40>)
 8007c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c1c:	08007c75 	.word	0x08007c75
 8007c20:	08007c89 	.word	0x08007c89
 8007c24:	08007c05 	.word	0x08007c05
 8007c28:	08007c05 	.word	0x08007c05
 8007c2c:	08007c05 	.word	0x08007c05
 8007c30:	08007c05 	.word	0x08007c05
 8007c34:	08007c89 	.word	0x08007c89
 8007c38:	08007c05 	.word	0x08007c05
 8007c3c:	08007c05 	.word	0x08007c05
 8007c40:	08007c05 	.word	0x08007c05
 8007c44:	08007c05 	.word	0x08007c05
 8007c48:	08007d8f 	.word	0x08007d8f
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007d49 	.word	0x08007d49
 8007c54:	08007c05 	.word	0x08007c05
 8007c58:	08007c05 	.word	0x08007c05
 8007c5c:	08007db1 	.word	0x08007db1
 8007c60:	08007c05 	.word	0x08007c05
 8007c64:	08007cb5 	.word	0x08007cb5
 8007c68:	08007c05 	.word	0x08007c05
 8007c6c:	08007c05 	.word	0x08007c05
 8007c70:	08007d51 	.word	0x08007d51
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	1d1a      	adds	r2, r3, #4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	602a      	str	r2, [r5, #0]
 8007c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c84:	2301      	movs	r3, #1
 8007c86:	e0a0      	b.n	8007dca <_printf_i+0x1ee>
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	682b      	ldr	r3, [r5, #0]
 8007c8c:	0607      	lsls	r7, r0, #24
 8007c8e:	f103 0104 	add.w	r1, r3, #4
 8007c92:	6029      	str	r1, [r5, #0]
 8007c94:	d501      	bpl.n	8007c9a <_printf_i+0xbe>
 8007c96:	681e      	ldr	r6, [r3, #0]
 8007c98:	e003      	b.n	8007ca2 <_printf_i+0xc6>
 8007c9a:	0646      	lsls	r6, r0, #25
 8007c9c:	d5fb      	bpl.n	8007c96 <_printf_i+0xba>
 8007c9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	da03      	bge.n	8007cae <_printf_i+0xd2>
 8007ca6:	232d      	movs	r3, #45	; 0x2d
 8007ca8:	4276      	negs	r6, r6
 8007caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cae:	230a      	movs	r3, #10
 8007cb0:	4859      	ldr	r0, [pc, #356]	; (8007e18 <_printf_i+0x23c>)
 8007cb2:	e012      	b.n	8007cda <_printf_i+0xfe>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	6820      	ldr	r0, [r4, #0]
 8007cb8:	1d19      	adds	r1, r3, #4
 8007cba:	6029      	str	r1, [r5, #0]
 8007cbc:	0605      	lsls	r5, r0, #24
 8007cbe:	d501      	bpl.n	8007cc4 <_printf_i+0xe8>
 8007cc0:	681e      	ldr	r6, [r3, #0]
 8007cc2:	e002      	b.n	8007cca <_printf_i+0xee>
 8007cc4:	0641      	lsls	r1, r0, #25
 8007cc6:	d5fb      	bpl.n	8007cc0 <_printf_i+0xe4>
 8007cc8:	881e      	ldrh	r6, [r3, #0]
 8007cca:	2f6f      	cmp	r7, #111	; 0x6f
 8007ccc:	bf0c      	ite	eq
 8007cce:	2308      	moveq	r3, #8
 8007cd0:	230a      	movne	r3, #10
 8007cd2:	4851      	ldr	r0, [pc, #324]	; (8007e18 <_printf_i+0x23c>)
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cda:	6865      	ldr	r5, [r4, #4]
 8007cdc:	2d00      	cmp	r5, #0
 8007cde:	bfa8      	it	ge
 8007ce0:	6821      	ldrge	r1, [r4, #0]
 8007ce2:	60a5      	str	r5, [r4, #8]
 8007ce4:	bfa4      	itt	ge
 8007ce6:	f021 0104 	bicge.w	r1, r1, #4
 8007cea:	6021      	strge	r1, [r4, #0]
 8007cec:	b90e      	cbnz	r6, 8007cf2 <_printf_i+0x116>
 8007cee:	2d00      	cmp	r5, #0
 8007cf0:	d04b      	beq.n	8007d8a <_printf_i+0x1ae>
 8007cf2:	4615      	mov	r5, r2
 8007cf4:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cf8:	fb03 6711 	mls	r7, r3, r1, r6
 8007cfc:	5dc7      	ldrb	r7, [r0, r7]
 8007cfe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d02:	4637      	mov	r7, r6
 8007d04:	42bb      	cmp	r3, r7
 8007d06:	460e      	mov	r6, r1
 8007d08:	d9f4      	bls.n	8007cf4 <_printf_i+0x118>
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d10b      	bne.n	8007d26 <_printf_i+0x14a>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	07de      	lsls	r6, r3, #31
 8007d12:	d508      	bpl.n	8007d26 <_printf_i+0x14a>
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	6861      	ldr	r1, [r4, #4]
 8007d18:	4299      	cmp	r1, r3
 8007d1a:	bfde      	ittt	le
 8007d1c:	2330      	movle	r3, #48	; 0x30
 8007d1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d26:	1b52      	subs	r2, r2, r5
 8007d28:	6122      	str	r2, [r4, #16]
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	4640      	mov	r0, r8
 8007d30:	f8cd a000 	str.w	sl, [sp]
 8007d34:	aa03      	add	r2, sp, #12
 8007d36:	f7ff fedf 	bl	8007af8 <_printf_common>
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d14a      	bne.n	8007dd4 <_printf_i+0x1f8>
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d42:	b004      	add	sp, #16
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	f043 0320 	orr.w	r3, r3, #32
 8007d4e:	6023      	str	r3, [r4, #0]
 8007d50:	2778      	movs	r7, #120	; 0x78
 8007d52:	4832      	ldr	r0, [pc, #200]	; (8007e1c <_printf_i+0x240>)
 8007d54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	6829      	ldr	r1, [r5, #0]
 8007d5c:	061f      	lsls	r7, r3, #24
 8007d5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d62:	d402      	bmi.n	8007d6a <_printf_i+0x18e>
 8007d64:	065f      	lsls	r7, r3, #25
 8007d66:	bf48      	it	mi
 8007d68:	b2b6      	uxthmi	r6, r6
 8007d6a:	07df      	lsls	r7, r3, #31
 8007d6c:	bf48      	it	mi
 8007d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d72:	6029      	str	r1, [r5, #0]
 8007d74:	bf48      	it	mi
 8007d76:	6023      	strmi	r3, [r4, #0]
 8007d78:	b91e      	cbnz	r6, 8007d82 <_printf_i+0x1a6>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	f023 0320 	bic.w	r3, r3, #32
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	2310      	movs	r3, #16
 8007d84:	e7a6      	b.n	8007cd4 <_printf_i+0xf8>
 8007d86:	4824      	ldr	r0, [pc, #144]	; (8007e18 <_printf_i+0x23c>)
 8007d88:	e7e4      	b.n	8007d54 <_printf_i+0x178>
 8007d8a:	4615      	mov	r5, r2
 8007d8c:	e7bd      	b.n	8007d0a <_printf_i+0x12e>
 8007d8e:	682b      	ldr	r3, [r5, #0]
 8007d90:	6826      	ldr	r6, [r4, #0]
 8007d92:	1d18      	adds	r0, r3, #4
 8007d94:	6961      	ldr	r1, [r4, #20]
 8007d96:	6028      	str	r0, [r5, #0]
 8007d98:	0635      	lsls	r5, r6, #24
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	d501      	bpl.n	8007da2 <_printf_i+0x1c6>
 8007d9e:	6019      	str	r1, [r3, #0]
 8007da0:	e002      	b.n	8007da8 <_printf_i+0x1cc>
 8007da2:	0670      	lsls	r0, r6, #25
 8007da4:	d5fb      	bpl.n	8007d9e <_printf_i+0x1c2>
 8007da6:	8019      	strh	r1, [r3, #0]
 8007da8:	2300      	movs	r3, #0
 8007daa:	4615      	mov	r5, r2
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	e7bc      	b.n	8007d2a <_printf_i+0x14e>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	2100      	movs	r1, #0
 8007db4:	1d1a      	adds	r2, r3, #4
 8007db6:	602a      	str	r2, [r5, #0]
 8007db8:	681d      	ldr	r5, [r3, #0]
 8007dba:	6862      	ldr	r2, [r4, #4]
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f000 f859 	bl	8007e74 <memchr>
 8007dc2:	b108      	cbz	r0, 8007dc8 <_printf_i+0x1ec>
 8007dc4:	1b40      	subs	r0, r0, r5
 8007dc6:	6060      	str	r0, [r4, #4]
 8007dc8:	6863      	ldr	r3, [r4, #4]
 8007dca:	6123      	str	r3, [r4, #16]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd2:	e7aa      	b.n	8007d2a <_printf_i+0x14e>
 8007dd4:	462a      	mov	r2, r5
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	47d0      	blx	sl
 8007dde:	3001      	adds	r0, #1
 8007de0:	d0ad      	beq.n	8007d3e <_printf_i+0x162>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	079b      	lsls	r3, r3, #30
 8007de6:	d413      	bmi.n	8007e10 <_printf_i+0x234>
 8007de8:	68e0      	ldr	r0, [r4, #12]
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	4298      	cmp	r0, r3
 8007dee:	bfb8      	it	lt
 8007df0:	4618      	movlt	r0, r3
 8007df2:	e7a6      	b.n	8007d42 <_printf_i+0x166>
 8007df4:	2301      	movs	r3, #1
 8007df6:	4632      	mov	r2, r6
 8007df8:	4649      	mov	r1, r9
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	47d0      	blx	sl
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d09d      	beq.n	8007d3e <_printf_i+0x162>
 8007e02:	3501      	adds	r5, #1
 8007e04:	68e3      	ldr	r3, [r4, #12]
 8007e06:	9903      	ldr	r1, [sp, #12]
 8007e08:	1a5b      	subs	r3, r3, r1
 8007e0a:	42ab      	cmp	r3, r5
 8007e0c:	dcf2      	bgt.n	8007df4 <_printf_i+0x218>
 8007e0e:	e7eb      	b.n	8007de8 <_printf_i+0x20c>
 8007e10:	2500      	movs	r5, #0
 8007e12:	f104 0619 	add.w	r6, r4, #25
 8007e16:	e7f5      	b.n	8007e04 <_printf_i+0x228>
 8007e18:	080097de 	.word	0x080097de
 8007e1c:	080097ef 	.word	0x080097ef

08007e20 <memmove>:
 8007e20:	4288      	cmp	r0, r1
 8007e22:	b510      	push	{r4, lr}
 8007e24:	eb01 0402 	add.w	r4, r1, r2
 8007e28:	d902      	bls.n	8007e30 <memmove+0x10>
 8007e2a:	4284      	cmp	r4, r0
 8007e2c:	4623      	mov	r3, r4
 8007e2e:	d807      	bhi.n	8007e40 <memmove+0x20>
 8007e30:	1e43      	subs	r3, r0, #1
 8007e32:	42a1      	cmp	r1, r4
 8007e34:	d008      	beq.n	8007e48 <memmove+0x28>
 8007e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e3e:	e7f8      	b.n	8007e32 <memmove+0x12>
 8007e40:	4601      	mov	r1, r0
 8007e42:	4402      	add	r2, r0
 8007e44:	428a      	cmp	r2, r1
 8007e46:	d100      	bne.n	8007e4a <memmove+0x2a>
 8007e48:	bd10      	pop	{r4, pc}
 8007e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e52:	e7f7      	b.n	8007e44 <memmove+0x24>

08007e54 <_sbrk_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	2300      	movs	r3, #0
 8007e58:	4d05      	ldr	r5, [pc, #20]	; (8007e70 <_sbrk_r+0x1c>)
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	f7fa fe78 	bl	8002b54 <_sbrk>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_sbrk_r+0x1a>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_sbrk_r+0x1a>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	200029c0 	.word	0x200029c0

08007e74 <memchr>:
 8007e74:	4603      	mov	r3, r0
 8007e76:	b510      	push	{r4, lr}
 8007e78:	b2c9      	uxtb	r1, r1
 8007e7a:	4402      	add	r2, r0
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	d101      	bne.n	8007e86 <memchr+0x12>
 8007e82:	2000      	movs	r0, #0
 8007e84:	e003      	b.n	8007e8e <memchr+0x1a>
 8007e86:	7804      	ldrb	r4, [r0, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	428c      	cmp	r4, r1
 8007e8c:	d1f6      	bne.n	8007e7c <memchr+0x8>
 8007e8e:	bd10      	pop	{r4, pc}

08007e90 <_realloc_r>:
 8007e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e94:	4680      	mov	r8, r0
 8007e96:	4614      	mov	r4, r2
 8007e98:	460e      	mov	r6, r1
 8007e9a:	b921      	cbnz	r1, 8007ea6 <_realloc_r+0x16>
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea2:	f7ff bc45 	b.w	8007730 <_malloc_r>
 8007ea6:	b92a      	cbnz	r2, 8007eb4 <_realloc_r+0x24>
 8007ea8:	f7ff fbda 	bl	8007660 <_free_r>
 8007eac:	4625      	mov	r5, r4
 8007eae:	4628      	mov	r0, r5
 8007eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb4:	f000 f81b 	bl	8007eee <_malloc_usable_size_r>
 8007eb8:	4284      	cmp	r4, r0
 8007eba:	4607      	mov	r7, r0
 8007ebc:	d802      	bhi.n	8007ec4 <_realloc_r+0x34>
 8007ebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ec2:	d812      	bhi.n	8007eea <_realloc_r+0x5a>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	f7ff fc32 	bl	8007730 <_malloc_r>
 8007ecc:	4605      	mov	r5, r0
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d0ed      	beq.n	8007eae <_realloc_r+0x1e>
 8007ed2:	42bc      	cmp	r4, r7
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	bf28      	it	cs
 8007eda:	463a      	movcs	r2, r7
 8007edc:	f7ff fbb2 	bl	8007644 <memcpy>
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	f7ff fbbc 	bl	8007660 <_free_r>
 8007ee8:	e7e1      	b.n	8007eae <_realloc_r+0x1e>
 8007eea:	4635      	mov	r5, r6
 8007eec:	e7df      	b.n	8007eae <_realloc_r+0x1e>

08007eee <_malloc_usable_size_r>:
 8007eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef2:	1f18      	subs	r0, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bfbc      	itt	lt
 8007ef8:	580b      	ldrlt	r3, [r1, r0]
 8007efa:	18c0      	addlt	r0, r0, r3
 8007efc:	4770      	bx	lr

08007efe <atan2>:
 8007efe:	f000 b86f 	b.w	8007fe0 <__ieee754_atan2>
	...

08007f04 <pow>:
 8007f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f08:	4614      	mov	r4, r2
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4689      	mov	r9, r1
 8007f10:	f000 f936 	bl	8008180 <__ieee754_pow>
 8007f14:	4622      	mov	r2, r4
 8007f16:	4606      	mov	r6, r0
 8007f18:	460f      	mov	r7, r1
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 fd74 	bl	8000a0c <__aeabi_dcmpun>
 8007f24:	bbc8      	cbnz	r0, 8007f9a <pow+0x96>
 8007f26:	2200      	movs	r2, #0
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	f7f8 fd3b 	bl	80009a8 <__aeabi_dcmpeq>
 8007f32:	b1b8      	cbz	r0, 8007f64 <pow+0x60>
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	4620      	mov	r0, r4
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	f7f8 fd34 	bl	80009a8 <__aeabi_dcmpeq>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d141      	bne.n	8007fc8 <pow+0xc4>
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f000 f844 	bl	8007fd4 <finite>
 8007f4c:	b328      	cbz	r0, 8007f9a <pow+0x96>
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2300      	movs	r3, #0
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7f8 fd31 	bl	80009bc <__aeabi_dcmplt>
 8007f5a:	b1f0      	cbz	r0, 8007f9a <pow+0x96>
 8007f5c:	f7ff fb3e 	bl	80075dc <__errno>
 8007f60:	2322      	movs	r3, #34	; 0x22
 8007f62:	e019      	b.n	8007f98 <pow+0x94>
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f000 f834 	bl	8007fd4 <finite>
 8007f6c:	b9c8      	cbnz	r0, 8007fa2 <pow+0x9e>
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f000 f82f 	bl	8007fd4 <finite>
 8007f76:	b1a0      	cbz	r0, 8007fa2 <pow+0x9e>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f000 f82a 	bl	8007fd4 <finite>
 8007f80:	b178      	cbz	r0, 8007fa2 <pow+0x9e>
 8007f82:	4632      	mov	r2, r6
 8007f84:	463b      	mov	r3, r7
 8007f86:	4630      	mov	r0, r6
 8007f88:	4639      	mov	r1, r7
 8007f8a:	f7f8 fd3f 	bl	8000a0c <__aeabi_dcmpun>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d0e4      	beq.n	8007f5c <pow+0x58>
 8007f92:	f7ff fb23 	bl	80075dc <__errno>
 8007f96:	2321      	movs	r3, #33	; 0x21
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 fcfd 	bl	80009a8 <__aeabi_dcmpeq>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d0f3      	beq.n	8007f9a <pow+0x96>
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	f000 f80d 	bl	8007fd4 <finite>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d0ed      	beq.n	8007f9a <pow+0x96>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f000 f807 	bl	8007fd4 <finite>
 8007fc6:	e7c8      	b.n	8007f5a <pow+0x56>
 8007fc8:	2600      	movs	r6, #0
 8007fca:	4f01      	ldr	r7, [pc, #4]	; (8007fd0 <pow+0xcc>)
 8007fcc:	e7e5      	b.n	8007f9a <pow+0x96>
 8007fce:	bf00      	nop
 8007fd0:	3ff00000 	.word	0x3ff00000

08007fd4 <finite>:
 8007fd4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8007fd8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007fdc:	0fc0      	lsrs	r0, r0, #31
 8007fde:	4770      	bx	lr

08007fe0 <__ieee754_atan2>:
 8007fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	4617      	mov	r7, r2
 8007fe6:	4692      	mov	sl, r2
 8007fe8:	4699      	mov	r9, r3
 8007fea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fee:	427b      	negs	r3, r7
 8007ff0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008170 <__ieee754_atan2+0x190>
 8007ff4:	433b      	orrs	r3, r7
 8007ff6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007ffa:	4543      	cmp	r3, r8
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	d809      	bhi.n	8008016 <__ieee754_atan2+0x36>
 8008002:	4246      	negs	r6, r0
 8008004:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008008:	4306      	orrs	r6, r0
 800800a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800800e:	4546      	cmp	r6, r8
 8008010:	468e      	mov	lr, r1
 8008012:	4683      	mov	fp, r0
 8008014:	d908      	bls.n	8008028 <__ieee754_atan2+0x48>
 8008016:	4652      	mov	r2, sl
 8008018:	464b      	mov	r3, r9
 800801a:	4620      	mov	r0, r4
 800801c:	4629      	mov	r1, r5
 800801e:	f7f8 f8a5 	bl	800016c <__adddf3>
 8008022:	4604      	mov	r4, r0
 8008024:	460d      	mov	r5, r1
 8008026:	e019      	b.n	800805c <__ieee754_atan2+0x7c>
 8008028:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800802c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008030:	433e      	orrs	r6, r7
 8008032:	d103      	bne.n	800803c <__ieee754_atan2+0x5c>
 8008034:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	f000 bdba 	b.w	8008bb0 <atan>
 800803c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008040:	f006 0602 	and.w	r6, r6, #2
 8008044:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008048:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800804c:	d10a      	bne.n	8008064 <__ieee754_atan2+0x84>
 800804e:	2e02      	cmp	r6, #2
 8008050:	d067      	beq.n	8008122 <__ieee754_atan2+0x142>
 8008052:	2e03      	cmp	r6, #3
 8008054:	d102      	bne.n	800805c <__ieee754_atan2+0x7c>
 8008056:	a53a      	add	r5, pc, #232	; (adr r5, 8008140 <__ieee754_atan2+0x160>)
 8008058:	e9d5 4500 	ldrd	r4, r5, [r5]
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	4317      	orrs	r7, r2
 8008066:	d106      	bne.n	8008076 <__ieee754_atan2+0x96>
 8008068:	f1be 0f00 	cmp.w	lr, #0
 800806c:	da64      	bge.n	8008138 <__ieee754_atan2+0x158>
 800806e:	a536      	add	r5, pc, #216	; (adr r5, 8008148 <__ieee754_atan2+0x168>)
 8008070:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008074:	e7f2      	b.n	800805c <__ieee754_atan2+0x7c>
 8008076:	4542      	cmp	r2, r8
 8008078:	d10f      	bne.n	800809a <__ieee754_atan2+0xba>
 800807a:	4293      	cmp	r3, r2
 800807c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8008080:	d107      	bne.n	8008092 <__ieee754_atan2+0xb2>
 8008082:	2e02      	cmp	r6, #2
 8008084:	d851      	bhi.n	800812a <__ieee754_atan2+0x14a>
 8008086:	4b3b      	ldr	r3, [pc, #236]	; (8008174 <__ieee754_atan2+0x194>)
 8008088:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800808c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008090:	e7e4      	b.n	800805c <__ieee754_atan2+0x7c>
 8008092:	2e02      	cmp	r6, #2
 8008094:	d84d      	bhi.n	8008132 <__ieee754_atan2+0x152>
 8008096:	4b38      	ldr	r3, [pc, #224]	; (8008178 <__ieee754_atan2+0x198>)
 8008098:	e7f6      	b.n	8008088 <__ieee754_atan2+0xa8>
 800809a:	4543      	cmp	r3, r8
 800809c:	d0e4      	beq.n	8008068 <__ieee754_atan2+0x88>
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80080a4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80080a8:	da21      	bge.n	80080ee <__ieee754_atan2+0x10e>
 80080aa:	f1b9 0f00 	cmp.w	r9, #0
 80080ae:	da01      	bge.n	80080b4 <__ieee754_atan2+0xd4>
 80080b0:	323c      	adds	r2, #60	; 0x3c
 80080b2:	db20      	blt.n	80080f6 <__ieee754_atan2+0x116>
 80080b4:	4652      	mov	r2, sl
 80080b6:	464b      	mov	r3, r9
 80080b8:	4620      	mov	r0, r4
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7f8 fb36 	bl	800072c <__aeabi_ddiv>
 80080c0:	f000 ff00 	bl	8008ec4 <fabs>
 80080c4:	f000 fd74 	bl	8008bb0 <atan>
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	2e01      	cmp	r6, #1
 80080ce:	d015      	beq.n	80080fc <__ieee754_atan2+0x11c>
 80080d0:	2e02      	cmp	r6, #2
 80080d2:	d017      	beq.n	8008104 <__ieee754_atan2+0x124>
 80080d4:	2e00      	cmp	r6, #0
 80080d6:	d0c1      	beq.n	800805c <__ieee754_atan2+0x7c>
 80080d8:	a31d      	add	r3, pc, #116	; (adr r3, 8008150 <__ieee754_atan2+0x170>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 f841 	bl	8000168 <__aeabi_dsub>
 80080e6:	a31c      	add	r3, pc, #112	; (adr r3, 8008158 <__ieee754_atan2+0x178>)
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	e016      	b.n	800811c <__ieee754_atan2+0x13c>
 80080ee:	a51c      	add	r5, pc, #112	; (adr r5, 8008160 <__ieee754_atan2+0x180>)
 80080f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080f4:	e7ea      	b.n	80080cc <__ieee754_atan2+0xec>
 80080f6:	2400      	movs	r4, #0
 80080f8:	2500      	movs	r5, #0
 80080fa:	e7e7      	b.n	80080cc <__ieee754_atan2+0xec>
 80080fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008100:	461d      	mov	r5, r3
 8008102:	e7ab      	b.n	800805c <__ieee754_atan2+0x7c>
 8008104:	a312      	add	r3, pc, #72	; (adr r3, 8008150 <__ieee754_atan2+0x170>)
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	4620      	mov	r0, r4
 800810c:	4629      	mov	r1, r5
 800810e:	f7f8 f82b 	bl	8000168 <__aeabi_dsub>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	a110      	add	r1, pc, #64	; (adr r1, 8008158 <__ieee754_atan2+0x178>)
 8008118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800811c:	f7f8 f824 	bl	8000168 <__aeabi_dsub>
 8008120:	e77f      	b.n	8008022 <__ieee754_atan2+0x42>
 8008122:	a50d      	add	r5, pc, #52	; (adr r5, 8008158 <__ieee754_atan2+0x178>)
 8008124:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008128:	e798      	b.n	800805c <__ieee754_atan2+0x7c>
 800812a:	a50f      	add	r5, pc, #60	; (adr r5, 8008168 <__ieee754_atan2+0x188>)
 800812c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008130:	e794      	b.n	800805c <__ieee754_atan2+0x7c>
 8008132:	2400      	movs	r4, #0
 8008134:	2500      	movs	r5, #0
 8008136:	e791      	b.n	800805c <__ieee754_atan2+0x7c>
 8008138:	a509      	add	r5, pc, #36	; (adr r5, 8008160 <__ieee754_atan2+0x180>)
 800813a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800813e:	e78d      	b.n	800805c <__ieee754_atan2+0x7c>
 8008140:	54442d18 	.word	0x54442d18
 8008144:	c00921fb 	.word	0xc00921fb
 8008148:	54442d18 	.word	0x54442d18
 800814c:	bff921fb 	.word	0xbff921fb
 8008150:	33145c07 	.word	0x33145c07
 8008154:	3ca1a626 	.word	0x3ca1a626
 8008158:	54442d18 	.word	0x54442d18
 800815c:	400921fb 	.word	0x400921fb
 8008160:	54442d18 	.word	0x54442d18
 8008164:	3ff921fb 	.word	0x3ff921fb
 8008168:	54442d18 	.word	0x54442d18
 800816c:	3fe921fb 	.word	0x3fe921fb
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	08009800 	.word	0x08009800
 8008178:	08009818 	.word	0x08009818
 800817c:	00000000 	.word	0x00000000

08008180 <__ieee754_pow>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	b093      	sub	sp, #76	; 0x4c
 8008186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800818a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800818e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008192:	4689      	mov	r9, r1
 8008194:	ea56 0102 	orrs.w	r1, r6, r2
 8008198:	4680      	mov	r8, r0
 800819a:	d111      	bne.n	80081c0 <__ieee754_pow+0x40>
 800819c:	1803      	adds	r3, r0, r0
 800819e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80081a2:	4152      	adcs	r2, r2
 80081a4:	4299      	cmp	r1, r3
 80081a6:	4b82      	ldr	r3, [pc, #520]	; (80083b0 <__ieee754_pow+0x230>)
 80081a8:	4193      	sbcs	r3, r2
 80081aa:	f080 84ba 	bcs.w	8008b22 <__ieee754_pow+0x9a2>
 80081ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081b2:	4640      	mov	r0, r8
 80081b4:	4649      	mov	r1, r9
 80081b6:	f7f7 ffd9 	bl	800016c <__adddf3>
 80081ba:	4683      	mov	fp, r0
 80081bc:	468c      	mov	ip, r1
 80081be:	e06f      	b.n	80082a0 <__ieee754_pow+0x120>
 80081c0:	4b7c      	ldr	r3, [pc, #496]	; (80083b4 <__ieee754_pow+0x234>)
 80081c2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80081c6:	429c      	cmp	r4, r3
 80081c8:	464d      	mov	r5, r9
 80081ca:	4682      	mov	sl, r0
 80081cc:	dc06      	bgt.n	80081dc <__ieee754_pow+0x5c>
 80081ce:	d101      	bne.n	80081d4 <__ieee754_pow+0x54>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1ec      	bne.n	80081ae <__ieee754_pow+0x2e>
 80081d4:	429e      	cmp	r6, r3
 80081d6:	dc01      	bgt.n	80081dc <__ieee754_pow+0x5c>
 80081d8:	d10f      	bne.n	80081fa <__ieee754_pow+0x7a>
 80081da:	b172      	cbz	r2, 80081fa <__ieee754_pow+0x7a>
 80081dc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80081e0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80081e4:	ea55 050a 	orrs.w	r5, r5, sl
 80081e8:	d1e1      	bne.n	80081ae <__ieee754_pow+0x2e>
 80081ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80081ee:	18db      	adds	r3, r3, r3
 80081f0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80081f4:	4152      	adcs	r2, r2
 80081f6:	429d      	cmp	r5, r3
 80081f8:	e7d5      	b.n	80081a6 <__ieee754_pow+0x26>
 80081fa:	2d00      	cmp	r5, #0
 80081fc:	da39      	bge.n	8008272 <__ieee754_pow+0xf2>
 80081fe:	4b6e      	ldr	r3, [pc, #440]	; (80083b8 <__ieee754_pow+0x238>)
 8008200:	429e      	cmp	r6, r3
 8008202:	dc52      	bgt.n	80082aa <__ieee754_pow+0x12a>
 8008204:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008208:	429e      	cmp	r6, r3
 800820a:	f340 849d 	ble.w	8008b48 <__ieee754_pow+0x9c8>
 800820e:	1533      	asrs	r3, r6, #20
 8008210:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008214:	2b14      	cmp	r3, #20
 8008216:	dd0f      	ble.n	8008238 <__ieee754_pow+0xb8>
 8008218:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800821c:	fa22 f103 	lsr.w	r1, r2, r3
 8008220:	fa01 f303 	lsl.w	r3, r1, r3
 8008224:	4293      	cmp	r3, r2
 8008226:	f040 848f 	bne.w	8008b48 <__ieee754_pow+0x9c8>
 800822a:	f001 0101 	and.w	r1, r1, #1
 800822e:	f1c1 0302 	rsb	r3, r1, #2
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	b182      	cbz	r2, 8008258 <__ieee754_pow+0xd8>
 8008236:	e05d      	b.n	80082f4 <__ieee754_pow+0x174>
 8008238:	2a00      	cmp	r2, #0
 800823a:	d159      	bne.n	80082f0 <__ieee754_pow+0x170>
 800823c:	f1c3 0314 	rsb	r3, r3, #20
 8008240:	fa46 f103 	asr.w	r1, r6, r3
 8008244:	fa01 f303 	lsl.w	r3, r1, r3
 8008248:	42b3      	cmp	r3, r6
 800824a:	f040 847a 	bne.w	8008b42 <__ieee754_pow+0x9c2>
 800824e:	f001 0101 	and.w	r1, r1, #1
 8008252:	f1c1 0302 	rsb	r3, r1, #2
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	4b58      	ldr	r3, [pc, #352]	; (80083bc <__ieee754_pow+0x23c>)
 800825a:	429e      	cmp	r6, r3
 800825c:	d132      	bne.n	80082c4 <__ieee754_pow+0x144>
 800825e:	2f00      	cmp	r7, #0
 8008260:	f280 846b 	bge.w	8008b3a <__ieee754_pow+0x9ba>
 8008264:	4642      	mov	r2, r8
 8008266:	464b      	mov	r3, r9
 8008268:	2000      	movs	r0, #0
 800826a:	4954      	ldr	r1, [pc, #336]	; (80083bc <__ieee754_pow+0x23c>)
 800826c:	f7f8 fa5e 	bl	800072c <__aeabi_ddiv>
 8008270:	e7a3      	b.n	80081ba <__ieee754_pow+0x3a>
 8008272:	2300      	movs	r3, #0
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	2a00      	cmp	r2, #0
 8008278:	d13c      	bne.n	80082f4 <__ieee754_pow+0x174>
 800827a:	4b4e      	ldr	r3, [pc, #312]	; (80083b4 <__ieee754_pow+0x234>)
 800827c:	429e      	cmp	r6, r3
 800827e:	d1eb      	bne.n	8008258 <__ieee754_pow+0xd8>
 8008280:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008284:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008288:	ea53 030a 	orrs.w	r3, r3, sl
 800828c:	f000 8449 	beq.w	8008b22 <__ieee754_pow+0x9a2>
 8008290:	4b4b      	ldr	r3, [pc, #300]	; (80083c0 <__ieee754_pow+0x240>)
 8008292:	429c      	cmp	r4, r3
 8008294:	dd0b      	ble.n	80082ae <__ieee754_pow+0x12e>
 8008296:	2f00      	cmp	r7, #0
 8008298:	f2c0 8449 	blt.w	8008b2e <__ieee754_pow+0x9ae>
 800829c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80082a0:	4658      	mov	r0, fp
 80082a2:	4661      	mov	r1, ip
 80082a4:	b013      	add	sp, #76	; 0x4c
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	2302      	movs	r3, #2
 80082ac:	e7e2      	b.n	8008274 <__ieee754_pow+0xf4>
 80082ae:	2f00      	cmp	r7, #0
 80082b0:	f04f 0b00 	mov.w	fp, #0
 80082b4:	f04f 0c00 	mov.w	ip, #0
 80082b8:	daf2      	bge.n	80082a0 <__ieee754_pow+0x120>
 80082ba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80082be:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80082c2:	e7ed      	b.n	80082a0 <__ieee754_pow+0x120>
 80082c4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80082c8:	d106      	bne.n	80082d8 <__ieee754_pow+0x158>
 80082ca:	4642      	mov	r2, r8
 80082cc:	464b      	mov	r3, r9
 80082ce:	4640      	mov	r0, r8
 80082d0:	4649      	mov	r1, r9
 80082d2:	f7f8 f901 	bl	80004d8 <__aeabi_dmul>
 80082d6:	e770      	b.n	80081ba <__ieee754_pow+0x3a>
 80082d8:	4b3a      	ldr	r3, [pc, #232]	; (80083c4 <__ieee754_pow+0x244>)
 80082da:	429f      	cmp	r7, r3
 80082dc:	d10a      	bne.n	80082f4 <__ieee754_pow+0x174>
 80082de:	2d00      	cmp	r5, #0
 80082e0:	db08      	blt.n	80082f4 <__ieee754_pow+0x174>
 80082e2:	4640      	mov	r0, r8
 80082e4:	4649      	mov	r1, r9
 80082e6:	b013      	add	sp, #76	; 0x4c
 80082e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	f000 be96 	b.w	800901c <__ieee754_sqrt>
 80082f0:	2300      	movs	r3, #0
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4640      	mov	r0, r8
 80082f6:	4649      	mov	r1, r9
 80082f8:	f000 fde4 	bl	8008ec4 <fabs>
 80082fc:	4683      	mov	fp, r0
 80082fe:	468c      	mov	ip, r1
 8008300:	f1ba 0f00 	cmp.w	sl, #0
 8008304:	d128      	bne.n	8008358 <__ieee754_pow+0x1d8>
 8008306:	b124      	cbz	r4, 8008312 <__ieee754_pow+0x192>
 8008308:	4b2c      	ldr	r3, [pc, #176]	; (80083bc <__ieee754_pow+0x23c>)
 800830a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800830e:	429a      	cmp	r2, r3
 8008310:	d122      	bne.n	8008358 <__ieee754_pow+0x1d8>
 8008312:	2f00      	cmp	r7, #0
 8008314:	da07      	bge.n	8008326 <__ieee754_pow+0x1a6>
 8008316:	465a      	mov	r2, fp
 8008318:	4663      	mov	r3, ip
 800831a:	2000      	movs	r0, #0
 800831c:	4927      	ldr	r1, [pc, #156]	; (80083bc <__ieee754_pow+0x23c>)
 800831e:	f7f8 fa05 	bl	800072c <__aeabi_ddiv>
 8008322:	4683      	mov	fp, r0
 8008324:	468c      	mov	ip, r1
 8008326:	2d00      	cmp	r5, #0
 8008328:	daba      	bge.n	80082a0 <__ieee754_pow+0x120>
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008330:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008334:	431c      	orrs	r4, r3
 8008336:	d108      	bne.n	800834a <__ieee754_pow+0x1ca>
 8008338:	465a      	mov	r2, fp
 800833a:	4663      	mov	r3, ip
 800833c:	4658      	mov	r0, fp
 800833e:	4661      	mov	r1, ip
 8008340:	f7f7 ff12 	bl	8000168 <__aeabi_dsub>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	e790      	b.n	800826c <__ieee754_pow+0xec>
 800834a:	9b00      	ldr	r3, [sp, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d1a7      	bne.n	80082a0 <__ieee754_pow+0x120>
 8008350:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008354:	469c      	mov	ip, r3
 8008356:	e7a3      	b.n	80082a0 <__ieee754_pow+0x120>
 8008358:	0feb      	lsrs	r3, r5, #31
 800835a:	3b01      	subs	r3, #1
 800835c:	930c      	str	r3, [sp, #48]	; 0x30
 800835e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008360:	9b00      	ldr	r3, [sp, #0]
 8008362:	4313      	orrs	r3, r2
 8008364:	d104      	bne.n	8008370 <__ieee754_pow+0x1f0>
 8008366:	4642      	mov	r2, r8
 8008368:	464b      	mov	r3, r9
 800836a:	4640      	mov	r0, r8
 800836c:	4649      	mov	r1, r9
 800836e:	e7e7      	b.n	8008340 <__ieee754_pow+0x1c0>
 8008370:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <__ieee754_pow+0x248>)
 8008372:	429e      	cmp	r6, r3
 8008374:	f340 80f6 	ble.w	8008564 <__ieee754_pow+0x3e4>
 8008378:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800837c:	429e      	cmp	r6, r3
 800837e:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <__ieee754_pow+0x240>)
 8008380:	dd09      	ble.n	8008396 <__ieee754_pow+0x216>
 8008382:	429c      	cmp	r4, r3
 8008384:	dc0c      	bgt.n	80083a0 <__ieee754_pow+0x220>
 8008386:	2f00      	cmp	r7, #0
 8008388:	da0c      	bge.n	80083a4 <__ieee754_pow+0x224>
 800838a:	2000      	movs	r0, #0
 800838c:	b013      	add	sp, #76	; 0x4c
 800838e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008392:	f000 be3e 	b.w	8009012 <__math_oflow>
 8008396:	429c      	cmp	r4, r3
 8008398:	dbf5      	blt.n	8008386 <__ieee754_pow+0x206>
 800839a:	4b08      	ldr	r3, [pc, #32]	; (80083bc <__ieee754_pow+0x23c>)
 800839c:	429c      	cmp	r4, r3
 800839e:	dd15      	ble.n	80083cc <__ieee754_pow+0x24c>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	dcf2      	bgt.n	800838a <__ieee754_pow+0x20a>
 80083a4:	2000      	movs	r0, #0
 80083a6:	b013      	add	sp, #76	; 0x4c
 80083a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	f000 be2c 	b.w	8009008 <__math_uflow>
 80083b0:	fff00000 	.word	0xfff00000
 80083b4:	7ff00000 	.word	0x7ff00000
 80083b8:	433fffff 	.word	0x433fffff
 80083bc:	3ff00000 	.word	0x3ff00000
 80083c0:	3fefffff 	.word	0x3fefffff
 80083c4:	3fe00000 	.word	0x3fe00000
 80083c8:	41e00000 	.word	0x41e00000
 80083cc:	4661      	mov	r1, ip
 80083ce:	2200      	movs	r2, #0
 80083d0:	4658      	mov	r0, fp
 80083d2:	4b5f      	ldr	r3, [pc, #380]	; (8008550 <__ieee754_pow+0x3d0>)
 80083d4:	f7f7 fec8 	bl	8000168 <__aeabi_dsub>
 80083d8:	a355      	add	r3, pc, #340	; (adr r3, 8008530 <__ieee754_pow+0x3b0>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	4604      	mov	r4, r0
 80083e0:	460d      	mov	r5, r1
 80083e2:	f7f8 f879 	bl	80004d8 <__aeabi_dmul>
 80083e6:	a354      	add	r3, pc, #336	; (adr r3, 8008538 <__ieee754_pow+0x3b8>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	4606      	mov	r6, r0
 80083ee:	460f      	mov	r7, r1
 80083f0:	4620      	mov	r0, r4
 80083f2:	4629      	mov	r1, r5
 80083f4:	f7f8 f870 	bl	80004d8 <__aeabi_dmul>
 80083f8:	2200      	movs	r2, #0
 80083fa:	4682      	mov	sl, r0
 80083fc:	468b      	mov	fp, r1
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	4b54      	ldr	r3, [pc, #336]	; (8008554 <__ieee754_pow+0x3d4>)
 8008404:	f7f8 f868 	bl	80004d8 <__aeabi_dmul>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	a14c      	add	r1, pc, #304	; (adr r1, 8008540 <__ieee754_pow+0x3c0>)
 800840e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008412:	f7f7 fea9 	bl	8000168 <__aeabi_dsub>
 8008416:	4622      	mov	r2, r4
 8008418:	462b      	mov	r3, r5
 800841a:	f7f8 f85d 	bl	80004d8 <__aeabi_dmul>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	2000      	movs	r0, #0
 8008424:	494c      	ldr	r1, [pc, #304]	; (8008558 <__ieee754_pow+0x3d8>)
 8008426:	f7f7 fe9f 	bl	8000168 <__aeabi_dsub>
 800842a:	4622      	mov	r2, r4
 800842c:	462b      	mov	r3, r5
 800842e:	4680      	mov	r8, r0
 8008430:	4689      	mov	r9, r1
 8008432:	4620      	mov	r0, r4
 8008434:	4629      	mov	r1, r5
 8008436:	f7f8 f84f 	bl	80004d8 <__aeabi_dmul>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4640      	mov	r0, r8
 8008440:	4649      	mov	r1, r9
 8008442:	f7f8 f849 	bl	80004d8 <__aeabi_dmul>
 8008446:	a340      	add	r3, pc, #256	; (adr r3, 8008548 <__ieee754_pow+0x3c8>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f7f8 f844 	bl	80004d8 <__aeabi_dmul>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4650      	mov	r0, sl
 8008456:	4659      	mov	r1, fp
 8008458:	f7f7 fe86 	bl	8000168 <__aeabi_dsub>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4604      	mov	r4, r0
 8008462:	460d      	mov	r5, r1
 8008464:	4630      	mov	r0, r6
 8008466:	4639      	mov	r1, r7
 8008468:	f7f7 fe80 	bl	800016c <__adddf3>
 800846c:	2000      	movs	r0, #0
 800846e:	4632      	mov	r2, r6
 8008470:	463b      	mov	r3, r7
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	f7f7 fe77 	bl	8000168 <__aeabi_dsub>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4620      	mov	r0, r4
 8008480:	4629      	mov	r1, r5
 8008482:	f7f7 fe71 	bl	8000168 <__aeabi_dsub>
 8008486:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800848a:	9b00      	ldr	r3, [sp, #0]
 800848c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800848e:	3b01      	subs	r3, #1
 8008490:	4313      	orrs	r3, r2
 8008492:	f04f 0600 	mov.w	r6, #0
 8008496:	f04f 0200 	mov.w	r2, #0
 800849a:	bf0c      	ite	eq
 800849c:	4b2f      	ldreq	r3, [pc, #188]	; (800855c <__ieee754_pow+0x3dc>)
 800849e:	4b2c      	ldrne	r3, [pc, #176]	; (8008550 <__ieee754_pow+0x3d0>)
 80084a0:	4604      	mov	r4, r0
 80084a2:	460d      	mov	r5, r1
 80084a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a8:	e9cd 2300 	strd	r2, r3, [sp]
 80084ac:	4632      	mov	r2, r6
 80084ae:	463b      	mov	r3, r7
 80084b0:	f7f7 fe5a 	bl	8000168 <__aeabi_dsub>
 80084b4:	4652      	mov	r2, sl
 80084b6:	465b      	mov	r3, fp
 80084b8:	f7f8 f80e 	bl	80004d8 <__aeabi_dmul>
 80084bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084c0:	4680      	mov	r8, r0
 80084c2:	4689      	mov	r9, r1
 80084c4:	4620      	mov	r0, r4
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7f8 f806 	bl	80004d8 <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4640      	mov	r0, r8
 80084d2:	4649      	mov	r1, r9
 80084d4:	f7f7 fe4a 	bl	800016c <__adddf3>
 80084d8:	4632      	mov	r2, r6
 80084da:	463b      	mov	r3, r7
 80084dc:	4680      	mov	r8, r0
 80084de:	4689      	mov	r9, r1
 80084e0:	4650      	mov	r0, sl
 80084e2:	4659      	mov	r1, fp
 80084e4:	f7f7 fff8 	bl	80004d8 <__aeabi_dmul>
 80084e8:	4604      	mov	r4, r0
 80084ea:	460d      	mov	r5, r1
 80084ec:	460b      	mov	r3, r1
 80084ee:	4602      	mov	r2, r0
 80084f0:	4649      	mov	r1, r9
 80084f2:	4640      	mov	r0, r8
 80084f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80084f8:	f7f7 fe38 	bl	800016c <__adddf3>
 80084fc:	4b18      	ldr	r3, [pc, #96]	; (8008560 <__ieee754_pow+0x3e0>)
 80084fe:	4682      	mov	sl, r0
 8008500:	4299      	cmp	r1, r3
 8008502:	460f      	mov	r7, r1
 8008504:	460e      	mov	r6, r1
 8008506:	f340 82e7 	ble.w	8008ad8 <__ieee754_pow+0x958>
 800850a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800850e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008512:	4303      	orrs	r3, r0
 8008514:	f000 81e2 	beq.w	80088dc <__ieee754_pow+0x75c>
 8008518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800851c:	2200      	movs	r2, #0
 800851e:	2300      	movs	r3, #0
 8008520:	f7f8 fa4c 	bl	80009bc <__aeabi_dcmplt>
 8008524:	3800      	subs	r0, #0
 8008526:	bf18      	it	ne
 8008528:	2001      	movne	r0, #1
 800852a:	e72f      	b.n	800838c <__ieee754_pow+0x20c>
 800852c:	f3af 8000 	nop.w
 8008530:	60000000 	.word	0x60000000
 8008534:	3ff71547 	.word	0x3ff71547
 8008538:	f85ddf44 	.word	0xf85ddf44
 800853c:	3e54ae0b 	.word	0x3e54ae0b
 8008540:	55555555 	.word	0x55555555
 8008544:	3fd55555 	.word	0x3fd55555
 8008548:	652b82fe 	.word	0x652b82fe
 800854c:	3ff71547 	.word	0x3ff71547
 8008550:	3ff00000 	.word	0x3ff00000
 8008554:	3fd00000 	.word	0x3fd00000
 8008558:	3fe00000 	.word	0x3fe00000
 800855c:	bff00000 	.word	0xbff00000
 8008560:	408fffff 	.word	0x408fffff
 8008564:	4bd4      	ldr	r3, [pc, #848]	; (80088b8 <__ieee754_pow+0x738>)
 8008566:	2200      	movs	r2, #0
 8008568:	402b      	ands	r3, r5
 800856a:	b943      	cbnz	r3, 800857e <__ieee754_pow+0x3fe>
 800856c:	4658      	mov	r0, fp
 800856e:	4661      	mov	r1, ip
 8008570:	4bd2      	ldr	r3, [pc, #840]	; (80088bc <__ieee754_pow+0x73c>)
 8008572:	f7f7 ffb1 	bl	80004d8 <__aeabi_dmul>
 8008576:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800857a:	4683      	mov	fp, r0
 800857c:	460c      	mov	r4, r1
 800857e:	1523      	asrs	r3, r4, #20
 8008580:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008584:	4413      	add	r3, r2
 8008586:	930b      	str	r3, [sp, #44]	; 0x2c
 8008588:	4bcd      	ldr	r3, [pc, #820]	; (80088c0 <__ieee754_pow+0x740>)
 800858a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800858e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008592:	429c      	cmp	r4, r3
 8008594:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008598:	dd08      	ble.n	80085ac <__ieee754_pow+0x42c>
 800859a:	4bca      	ldr	r3, [pc, #808]	; (80088c4 <__ieee754_pow+0x744>)
 800859c:	429c      	cmp	r4, r3
 800859e:	f340 8164 	ble.w	800886a <__ieee754_pow+0x6ea>
 80085a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80085a8:	3301      	adds	r3, #1
 80085aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ac:	2600      	movs	r6, #0
 80085ae:	00f3      	lsls	r3, r6, #3
 80085b0:	930d      	str	r3, [sp, #52]	; 0x34
 80085b2:	4bc5      	ldr	r3, [pc, #788]	; (80088c8 <__ieee754_pow+0x748>)
 80085b4:	4658      	mov	r0, fp
 80085b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085be:	4629      	mov	r1, r5
 80085c0:	461a      	mov	r2, r3
 80085c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80085c6:	4623      	mov	r3, r4
 80085c8:	f7f7 fdce 	bl	8000168 <__aeabi_dsub>
 80085cc:	46da      	mov	sl, fp
 80085ce:	462b      	mov	r3, r5
 80085d0:	4652      	mov	r2, sl
 80085d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80085d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085da:	f7f7 fdc7 	bl	800016c <__adddf3>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	2000      	movs	r0, #0
 80085e4:	49b9      	ldr	r1, [pc, #740]	; (80088cc <__ieee754_pow+0x74c>)
 80085e6:	f7f8 f8a1 	bl	800072c <__aeabi_ddiv>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80085f6:	f7f7 ff6f 	bl	80004d8 <__aeabi_dmul>
 80085fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80085fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008602:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008606:	2300      	movs	r3, #0
 8008608:	2200      	movs	r2, #0
 800860a:	46ab      	mov	fp, r5
 800860c:	106d      	asrs	r5, r5, #1
 800860e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008618:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800861c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008620:	4640      	mov	r0, r8
 8008622:	4649      	mov	r1, r9
 8008624:	4614      	mov	r4, r2
 8008626:	461d      	mov	r5, r3
 8008628:	f7f7 ff56 	bl	80004d8 <__aeabi_dmul>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008634:	f7f7 fd98 	bl	8000168 <__aeabi_dsub>
 8008638:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800863c:	4606      	mov	r6, r0
 800863e:	460f      	mov	r7, r1
 8008640:	4620      	mov	r0, r4
 8008642:	4629      	mov	r1, r5
 8008644:	f7f7 fd90 	bl	8000168 <__aeabi_dsub>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4650      	mov	r0, sl
 800864e:	4659      	mov	r1, fp
 8008650:	f7f7 fd8a 	bl	8000168 <__aeabi_dsub>
 8008654:	4642      	mov	r2, r8
 8008656:	464b      	mov	r3, r9
 8008658:	f7f7 ff3e 	bl	80004d8 <__aeabi_dmul>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4630      	mov	r0, r6
 8008662:	4639      	mov	r1, r7
 8008664:	f7f7 fd80 	bl	8000168 <__aeabi_dsub>
 8008668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800866c:	f7f7 ff34 	bl	80004d8 <__aeabi_dmul>
 8008670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008674:	4682      	mov	sl, r0
 8008676:	468b      	mov	fp, r1
 8008678:	4610      	mov	r0, r2
 800867a:	4619      	mov	r1, r3
 800867c:	f7f7 ff2c 	bl	80004d8 <__aeabi_dmul>
 8008680:	a37b      	add	r3, pc, #492	; (adr r3, 8008870 <__ieee754_pow+0x6f0>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	4604      	mov	r4, r0
 8008688:	460d      	mov	r5, r1
 800868a:	f7f7 ff25 	bl	80004d8 <__aeabi_dmul>
 800868e:	a37a      	add	r3, pc, #488	; (adr r3, 8008878 <__ieee754_pow+0x6f8>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f7 fd6a 	bl	800016c <__adddf3>
 8008698:	4622      	mov	r2, r4
 800869a:	462b      	mov	r3, r5
 800869c:	f7f7 ff1c 	bl	80004d8 <__aeabi_dmul>
 80086a0:	a377      	add	r3, pc, #476	; (adr r3, 8008880 <__ieee754_pow+0x700>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	f7f7 fd61 	bl	800016c <__adddf3>
 80086aa:	4622      	mov	r2, r4
 80086ac:	462b      	mov	r3, r5
 80086ae:	f7f7 ff13 	bl	80004d8 <__aeabi_dmul>
 80086b2:	a375      	add	r3, pc, #468	; (adr r3, 8008888 <__ieee754_pow+0x708>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 fd58 	bl	800016c <__adddf3>
 80086bc:	4622      	mov	r2, r4
 80086be:	462b      	mov	r3, r5
 80086c0:	f7f7 ff0a 	bl	80004d8 <__aeabi_dmul>
 80086c4:	a372      	add	r3, pc, #456	; (adr r3, 8008890 <__ieee754_pow+0x710>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	f7f7 fd4f 	bl	800016c <__adddf3>
 80086ce:	4622      	mov	r2, r4
 80086d0:	462b      	mov	r3, r5
 80086d2:	f7f7 ff01 	bl	80004d8 <__aeabi_dmul>
 80086d6:	a370      	add	r3, pc, #448	; (adr r3, 8008898 <__ieee754_pow+0x718>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7f7 fd46 	bl	800016c <__adddf3>
 80086e0:	4622      	mov	r2, r4
 80086e2:	4606      	mov	r6, r0
 80086e4:	460f      	mov	r7, r1
 80086e6:	462b      	mov	r3, r5
 80086e8:	4620      	mov	r0, r4
 80086ea:	4629      	mov	r1, r5
 80086ec:	f7f7 fef4 	bl	80004d8 <__aeabi_dmul>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f7 feee 	bl	80004d8 <__aeabi_dmul>
 80086fc:	4604      	mov	r4, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008704:	4642      	mov	r2, r8
 8008706:	464b      	mov	r3, r9
 8008708:	f7f7 fd30 	bl	800016c <__adddf3>
 800870c:	4652      	mov	r2, sl
 800870e:	465b      	mov	r3, fp
 8008710:	f7f7 fee2 	bl	80004d8 <__aeabi_dmul>
 8008714:	4622      	mov	r2, r4
 8008716:	462b      	mov	r3, r5
 8008718:	f7f7 fd28 	bl	800016c <__adddf3>
 800871c:	4642      	mov	r2, r8
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	464b      	mov	r3, r9
 8008724:	4640      	mov	r0, r8
 8008726:	4649      	mov	r1, r9
 8008728:	f7f7 fed6 	bl	80004d8 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008734:	2200      	movs	r2, #0
 8008736:	4b66      	ldr	r3, [pc, #408]	; (80088d0 <__ieee754_pow+0x750>)
 8008738:	f7f7 fd18 	bl	800016c <__adddf3>
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	f7f7 fd14 	bl	800016c <__adddf3>
 8008744:	2400      	movs	r4, #0
 8008746:	460d      	mov	r5, r1
 8008748:	4622      	mov	r2, r4
 800874a:	460b      	mov	r3, r1
 800874c:	4640      	mov	r0, r8
 800874e:	4649      	mov	r1, r9
 8008750:	f7f7 fec2 	bl	80004d8 <__aeabi_dmul>
 8008754:	2200      	movs	r2, #0
 8008756:	4680      	mov	r8, r0
 8008758:	4689      	mov	r9, r1
 800875a:	4620      	mov	r0, r4
 800875c:	4629      	mov	r1, r5
 800875e:	4b5c      	ldr	r3, [pc, #368]	; (80088d0 <__ieee754_pow+0x750>)
 8008760:	f7f7 fd02 	bl	8000168 <__aeabi_dsub>
 8008764:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008768:	f7f7 fcfe 	bl	8000168 <__aeabi_dsub>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4630      	mov	r0, r6
 8008772:	4639      	mov	r1, r7
 8008774:	f7f7 fcf8 	bl	8000168 <__aeabi_dsub>
 8008778:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800877c:	f7f7 feac 	bl	80004d8 <__aeabi_dmul>
 8008780:	4622      	mov	r2, r4
 8008782:	4606      	mov	r6, r0
 8008784:	460f      	mov	r7, r1
 8008786:	462b      	mov	r3, r5
 8008788:	4650      	mov	r0, sl
 800878a:	4659      	mov	r1, fp
 800878c:	f7f7 fea4 	bl	80004d8 <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4630      	mov	r0, r6
 8008796:	4639      	mov	r1, r7
 8008798:	f7f7 fce8 	bl	800016c <__adddf3>
 800879c:	2400      	movs	r4, #0
 800879e:	4606      	mov	r6, r0
 80087a0:	460f      	mov	r7, r1
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4640      	mov	r0, r8
 80087a8:	4649      	mov	r1, r9
 80087aa:	f7f7 fcdf 	bl	800016c <__adddf3>
 80087ae:	a33c      	add	r3, pc, #240	; (adr r3, 80088a0 <__ieee754_pow+0x720>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	4620      	mov	r0, r4
 80087b6:	460d      	mov	r5, r1
 80087b8:	f7f7 fe8e 	bl	80004d8 <__aeabi_dmul>
 80087bc:	4642      	mov	r2, r8
 80087be:	464b      	mov	r3, r9
 80087c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f7 fcce 	bl	8000168 <__aeabi_dsub>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4630      	mov	r0, r6
 80087d2:	4639      	mov	r1, r7
 80087d4:	f7f7 fcc8 	bl	8000168 <__aeabi_dsub>
 80087d8:	a333      	add	r3, pc, #204	; (adr r3, 80088a8 <__ieee754_pow+0x728>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f7 fe7b 	bl	80004d8 <__aeabi_dmul>
 80087e2:	a333      	add	r3, pc, #204	; (adr r3, 80088b0 <__ieee754_pow+0x730>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	4606      	mov	r6, r0
 80087ea:	460f      	mov	r7, r1
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f7 fe72 	bl	80004d8 <__aeabi_dmul>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4630      	mov	r0, r6
 80087fa:	4639      	mov	r1, r7
 80087fc:	f7f7 fcb6 	bl	800016c <__adddf3>
 8008800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008802:	4b34      	ldr	r3, [pc, #208]	; (80088d4 <__ieee754_pow+0x754>)
 8008804:	4413      	add	r3, r2
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f7f7 fcaf 	bl	800016c <__adddf3>
 800880e:	4680      	mov	r8, r0
 8008810:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008812:	4689      	mov	r9, r1
 8008814:	f7f7 fdf6 	bl	8000404 <__aeabi_i2d>
 8008818:	4604      	mov	r4, r0
 800881a:	460d      	mov	r5, r1
 800881c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008822:	4b2d      	ldr	r3, [pc, #180]	; (80088d8 <__ieee754_pow+0x758>)
 8008824:	4413      	add	r3, r2
 8008826:	e9d3 6700 	ldrd	r6, r7, [r3]
 800882a:	4642      	mov	r2, r8
 800882c:	464b      	mov	r3, r9
 800882e:	f7f7 fc9d 	bl	800016c <__adddf3>
 8008832:	4632      	mov	r2, r6
 8008834:	463b      	mov	r3, r7
 8008836:	f7f7 fc99 	bl	800016c <__adddf3>
 800883a:	4622      	mov	r2, r4
 800883c:	462b      	mov	r3, r5
 800883e:	f7f7 fc95 	bl	800016c <__adddf3>
 8008842:	2000      	movs	r0, #0
 8008844:	4622      	mov	r2, r4
 8008846:	462b      	mov	r3, r5
 8008848:	4682      	mov	sl, r0
 800884a:	468b      	mov	fp, r1
 800884c:	f7f7 fc8c 	bl	8000168 <__aeabi_dsub>
 8008850:	4632      	mov	r2, r6
 8008852:	463b      	mov	r3, r7
 8008854:	f7f7 fc88 	bl	8000168 <__aeabi_dsub>
 8008858:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800885c:	f7f7 fc84 	bl	8000168 <__aeabi_dsub>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4640      	mov	r0, r8
 8008866:	4649      	mov	r1, r9
 8008868:	e60b      	b.n	8008482 <__ieee754_pow+0x302>
 800886a:	2601      	movs	r6, #1
 800886c:	e69f      	b.n	80085ae <__ieee754_pow+0x42e>
 800886e:	bf00      	nop
 8008870:	4a454eef 	.word	0x4a454eef
 8008874:	3fca7e28 	.word	0x3fca7e28
 8008878:	93c9db65 	.word	0x93c9db65
 800887c:	3fcd864a 	.word	0x3fcd864a
 8008880:	a91d4101 	.word	0xa91d4101
 8008884:	3fd17460 	.word	0x3fd17460
 8008888:	518f264d 	.word	0x518f264d
 800888c:	3fd55555 	.word	0x3fd55555
 8008890:	db6fabff 	.word	0xdb6fabff
 8008894:	3fdb6db6 	.word	0x3fdb6db6
 8008898:	33333303 	.word	0x33333303
 800889c:	3fe33333 	.word	0x3fe33333
 80088a0:	e0000000 	.word	0xe0000000
 80088a4:	3feec709 	.word	0x3feec709
 80088a8:	dc3a03fd 	.word	0xdc3a03fd
 80088ac:	3feec709 	.word	0x3feec709
 80088b0:	145b01f5 	.word	0x145b01f5
 80088b4:	be3e2fe0 	.word	0xbe3e2fe0
 80088b8:	7ff00000 	.word	0x7ff00000
 80088bc:	43400000 	.word	0x43400000
 80088c0:	0003988e 	.word	0x0003988e
 80088c4:	000bb679 	.word	0x000bb679
 80088c8:	08009830 	.word	0x08009830
 80088cc:	3ff00000 	.word	0x3ff00000
 80088d0:	40080000 	.word	0x40080000
 80088d4:	08009850 	.word	0x08009850
 80088d8:	08009840 	.word	0x08009840
 80088dc:	a39c      	add	r3, pc, #624	; (adr r3, 8008b50 <__ieee754_pow+0x9d0>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	4640      	mov	r0, r8
 80088e4:	4649      	mov	r1, r9
 80088e6:	f7f7 fc41 	bl	800016c <__adddf3>
 80088ea:	4622      	mov	r2, r4
 80088ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088f0:	462b      	mov	r3, r5
 80088f2:	4650      	mov	r0, sl
 80088f4:	4639      	mov	r1, r7
 80088f6:	f7f7 fc37 	bl	8000168 <__aeabi_dsub>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008902:	f7f8 f879 	bl	80009f8 <__aeabi_dcmpgt>
 8008906:	2800      	cmp	r0, #0
 8008908:	f47f ae06 	bne.w	8008518 <__ieee754_pow+0x398>
 800890c:	4aa2      	ldr	r2, [pc, #648]	; (8008b98 <__ieee754_pow+0xa18>)
 800890e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008912:	4293      	cmp	r3, r2
 8008914:	f340 8100 	ble.w	8008b18 <__ieee754_pow+0x998>
 8008918:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800891c:	151b      	asrs	r3, r3, #20
 800891e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008922:	fa4a fa03 	asr.w	sl, sl, r3
 8008926:	44b2      	add	sl, r6
 8008928:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800892c:	489b      	ldr	r0, [pc, #620]	; (8008b9c <__ieee754_pow+0xa1c>)
 800892e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008932:	4108      	asrs	r0, r1
 8008934:	ea00 030a 	and.w	r3, r0, sl
 8008938:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800893c:	f1c1 0114 	rsb	r1, r1, #20
 8008940:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008944:	fa4a fa01 	asr.w	sl, sl, r1
 8008948:	2e00      	cmp	r6, #0
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	bfb8      	it	lt
 8008954:	f1ca 0a00 	rsblt	sl, sl, #0
 8008958:	f7f7 fc06 	bl	8000168 <__aeabi_dsub>
 800895c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008964:	2400      	movs	r4, #0
 8008966:	4642      	mov	r2, r8
 8008968:	464b      	mov	r3, r9
 800896a:	f7f7 fbff 	bl	800016c <__adddf3>
 800896e:	a37a      	add	r3, pc, #488	; (adr r3, 8008b58 <__ieee754_pow+0x9d8>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	4620      	mov	r0, r4
 8008976:	460d      	mov	r5, r1
 8008978:	f7f7 fdae 	bl	80004d8 <__aeabi_dmul>
 800897c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008980:	4606      	mov	r6, r0
 8008982:	460f      	mov	r7, r1
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fbee 	bl	8000168 <__aeabi_dsub>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4640      	mov	r0, r8
 8008992:	4649      	mov	r1, r9
 8008994:	f7f7 fbe8 	bl	8000168 <__aeabi_dsub>
 8008998:	a371      	add	r3, pc, #452	; (adr r3, 8008b60 <__ieee754_pow+0x9e0>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fd9b 	bl	80004d8 <__aeabi_dmul>
 80089a2:	a371      	add	r3, pc, #452	; (adr r3, 8008b68 <__ieee754_pow+0x9e8>)
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	4680      	mov	r8, r0
 80089aa:	4689      	mov	r9, r1
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f7 fd92 	bl	80004d8 <__aeabi_dmul>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4640      	mov	r0, r8
 80089ba:	4649      	mov	r1, r9
 80089bc:	f7f7 fbd6 	bl	800016c <__adddf3>
 80089c0:	4604      	mov	r4, r0
 80089c2:	460d      	mov	r5, r1
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f7 fbce 	bl	800016c <__adddf3>
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	4680      	mov	r8, r0
 80089d6:	4689      	mov	r9, r1
 80089d8:	f7f7 fbc6 	bl	8000168 <__aeabi_dsub>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4620      	mov	r0, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	f7f7 fbc0 	bl	8000168 <__aeabi_dsub>
 80089e8:	4642      	mov	r2, r8
 80089ea:	4606      	mov	r6, r0
 80089ec:	460f      	mov	r7, r1
 80089ee:	464b      	mov	r3, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	4649      	mov	r1, r9
 80089f4:	f7f7 fd70 	bl	80004d8 <__aeabi_dmul>
 80089f8:	a35d      	add	r3, pc, #372	; (adr r3, 8008b70 <__ieee754_pow+0x9f0>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	4604      	mov	r4, r0
 8008a00:	460d      	mov	r5, r1
 8008a02:	f7f7 fd69 	bl	80004d8 <__aeabi_dmul>
 8008a06:	a35c      	add	r3, pc, #368	; (adr r3, 8008b78 <__ieee754_pow+0x9f8>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f7f7 fbac 	bl	8000168 <__aeabi_dsub>
 8008a10:	4622      	mov	r2, r4
 8008a12:	462b      	mov	r3, r5
 8008a14:	f7f7 fd60 	bl	80004d8 <__aeabi_dmul>
 8008a18:	a359      	add	r3, pc, #356	; (adr r3, 8008b80 <__ieee754_pow+0xa00>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fba5 	bl	800016c <__adddf3>
 8008a22:	4622      	mov	r2, r4
 8008a24:	462b      	mov	r3, r5
 8008a26:	f7f7 fd57 	bl	80004d8 <__aeabi_dmul>
 8008a2a:	a357      	add	r3, pc, #348	; (adr r3, 8008b88 <__ieee754_pow+0xa08>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f7f7 fb9a 	bl	8000168 <__aeabi_dsub>
 8008a34:	4622      	mov	r2, r4
 8008a36:	462b      	mov	r3, r5
 8008a38:	f7f7 fd4e 	bl	80004d8 <__aeabi_dmul>
 8008a3c:	a354      	add	r3, pc, #336	; (adr r3, 8008b90 <__ieee754_pow+0xa10>)
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	f7f7 fb93 	bl	800016c <__adddf3>
 8008a46:	4622      	mov	r2, r4
 8008a48:	462b      	mov	r3, r5
 8008a4a:	f7f7 fd45 	bl	80004d8 <__aeabi_dmul>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f7 fb87 	bl	8000168 <__aeabi_dsub>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	460d      	mov	r5, r1
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4640      	mov	r0, r8
 8008a64:	4649      	mov	r1, r9
 8008a66:	f7f7 fd37 	bl	80004d8 <__aeabi_dmul>
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a74:	4620      	mov	r0, r4
 8008a76:	4629      	mov	r1, r5
 8008a78:	f7f7 fb76 	bl	8000168 <__aeabi_dsub>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a84:	f7f7 fe52 	bl	800072c <__aeabi_ddiv>
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	463b      	mov	r3, r7
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f7 fd20 	bl	80004d8 <__aeabi_dmul>
 8008a98:	4632      	mov	r2, r6
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	f7f7 fb66 	bl	800016c <__adddf3>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	f7f7 fb5e 	bl	8000168 <__aeabi_dsub>
 8008aac:	4642      	mov	r2, r8
 8008aae:	464b      	mov	r3, r9
 8008ab0:	f7f7 fb5a 	bl	8000168 <__aeabi_dsub>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	2000      	movs	r0, #0
 8008aba:	4939      	ldr	r1, [pc, #228]	; (8008ba0 <__ieee754_pow+0xa20>)
 8008abc:	f7f7 fb54 	bl	8000168 <__aeabi_dsub>
 8008ac0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008ac4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008ac8:	da29      	bge.n	8008b1e <__ieee754_pow+0x99e>
 8008aca:	4652      	mov	r2, sl
 8008acc:	f000 fa00 	bl	8008ed0 <scalbn>
 8008ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ad4:	f7ff bbfd 	b.w	80082d2 <__ieee754_pow+0x152>
 8008ad8:	4b32      	ldr	r3, [pc, #200]	; (8008ba4 <__ieee754_pow+0xa24>)
 8008ada:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008ade:	429f      	cmp	r7, r3
 8008ae0:	f77f af14 	ble.w	800890c <__ieee754_pow+0x78c>
 8008ae4:	4b30      	ldr	r3, [pc, #192]	; (8008ba8 <__ieee754_pow+0xa28>)
 8008ae6:	440b      	add	r3, r1
 8008ae8:	4303      	orrs	r3, r0
 8008aea:	d009      	beq.n	8008b00 <__ieee754_pow+0x980>
 8008aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008af0:	2200      	movs	r2, #0
 8008af2:	2300      	movs	r3, #0
 8008af4:	f7f7 ff62 	bl	80009bc <__aeabi_dcmplt>
 8008af8:	3800      	subs	r0, #0
 8008afa:	bf18      	it	ne
 8008afc:	2001      	movne	r0, #1
 8008afe:	e452      	b.n	80083a6 <__ieee754_pow+0x226>
 8008b00:	4622      	mov	r2, r4
 8008b02:	462b      	mov	r3, r5
 8008b04:	f7f7 fb30 	bl	8000168 <__aeabi_dsub>
 8008b08:	4642      	mov	r2, r8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	f7f7 ff6a 	bl	80009e4 <__aeabi_dcmpge>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	f43f aefb 	beq.w	800890c <__ieee754_pow+0x78c>
 8008b16:	e7e9      	b.n	8008aec <__ieee754_pow+0x96c>
 8008b18:	f04f 0a00 	mov.w	sl, #0
 8008b1c:	e720      	b.n	8008960 <__ieee754_pow+0x7e0>
 8008b1e:	4621      	mov	r1, r4
 8008b20:	e7d6      	b.n	8008ad0 <__ieee754_pow+0x950>
 8008b22:	f04f 0b00 	mov.w	fp, #0
 8008b26:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008ba0 <__ieee754_pow+0xa20>
 8008b2a:	f7ff bbb9 	b.w	80082a0 <__ieee754_pow+0x120>
 8008b2e:	f04f 0b00 	mov.w	fp, #0
 8008b32:	f04f 0c00 	mov.w	ip, #0
 8008b36:	f7ff bbb3 	b.w	80082a0 <__ieee754_pow+0x120>
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7ff bb3c 	b.w	80081ba <__ieee754_pow+0x3a>
 8008b42:	9200      	str	r2, [sp, #0]
 8008b44:	f7ff bb88 	b.w	8008258 <__ieee754_pow+0xd8>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f7ff bb72 	b.w	8008232 <__ieee754_pow+0xb2>
 8008b4e:	bf00      	nop
 8008b50:	652b82fe 	.word	0x652b82fe
 8008b54:	3c971547 	.word	0x3c971547
 8008b58:	00000000 	.word	0x00000000
 8008b5c:	3fe62e43 	.word	0x3fe62e43
 8008b60:	fefa39ef 	.word	0xfefa39ef
 8008b64:	3fe62e42 	.word	0x3fe62e42
 8008b68:	0ca86c39 	.word	0x0ca86c39
 8008b6c:	be205c61 	.word	0xbe205c61
 8008b70:	72bea4d0 	.word	0x72bea4d0
 8008b74:	3e663769 	.word	0x3e663769
 8008b78:	c5d26bf1 	.word	0xc5d26bf1
 8008b7c:	3ebbbd41 	.word	0x3ebbbd41
 8008b80:	af25de2c 	.word	0xaf25de2c
 8008b84:	3f11566a 	.word	0x3f11566a
 8008b88:	16bebd93 	.word	0x16bebd93
 8008b8c:	3f66c16c 	.word	0x3f66c16c
 8008b90:	5555553e 	.word	0x5555553e
 8008b94:	3fc55555 	.word	0x3fc55555
 8008b98:	3fe00000 	.word	0x3fe00000
 8008b9c:	fff00000 	.word	0xfff00000
 8008ba0:	3ff00000 	.word	0x3ff00000
 8008ba4:	4090cbff 	.word	0x4090cbff
 8008ba8:	3f6f3400 	.word	0x3f6f3400
 8008bac:	00000000 	.word	0x00000000

08008bb0 <atan>:
 8008bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	4bb6      	ldr	r3, [pc, #728]	; (8008e90 <atan+0x2e0>)
 8008bb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008bba:	429e      	cmp	r6, r3
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	468b      	mov	fp, r1
 8008bc2:	dd17      	ble.n	8008bf4 <atan+0x44>
 8008bc4:	4bb3      	ldr	r3, [pc, #716]	; (8008e94 <atan+0x2e4>)
 8008bc6:	429e      	cmp	r6, r3
 8008bc8:	dc01      	bgt.n	8008bce <atan+0x1e>
 8008bca:	d109      	bne.n	8008be0 <atan+0x30>
 8008bcc:	b140      	cbz	r0, 8008be0 <atan+0x30>
 8008bce:	4622      	mov	r2, r4
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7f7 fac9 	bl	800016c <__adddf3>
 8008bda:	4604      	mov	r4, r0
 8008bdc:	460d      	mov	r5, r1
 8008bde:	e005      	b.n	8008bec <atan+0x3c>
 8008be0:	f1bb 0f00 	cmp.w	fp, #0
 8008be4:	4cac      	ldr	r4, [pc, #688]	; (8008e98 <atan+0x2e8>)
 8008be6:	f300 8121 	bgt.w	8008e2c <atan+0x27c>
 8008bea:	4dac      	ldr	r5, [pc, #688]	; (8008e9c <atan+0x2ec>)
 8008bec:	4620      	mov	r0, r4
 8008bee:	4629      	mov	r1, r5
 8008bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf4:	4baa      	ldr	r3, [pc, #680]	; (8008ea0 <atan+0x2f0>)
 8008bf6:	429e      	cmp	r6, r3
 8008bf8:	dc11      	bgt.n	8008c1e <atan+0x6e>
 8008bfa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008bfe:	429e      	cmp	r6, r3
 8008c00:	dc0a      	bgt.n	8008c18 <atan+0x68>
 8008c02:	a38b      	add	r3, pc, #556	; (adr r3, 8008e30 <atan+0x280>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fab0 	bl	800016c <__adddf3>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	4ba5      	ldr	r3, [pc, #660]	; (8008ea4 <atan+0x2f4>)
 8008c10:	f7f7 fef2 	bl	80009f8 <__aeabi_dcmpgt>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d1e9      	bne.n	8008bec <atan+0x3c>
 8008c18:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008c1c:	e027      	b.n	8008c6e <atan+0xbe>
 8008c1e:	f000 f951 	bl	8008ec4 <fabs>
 8008c22:	4ba1      	ldr	r3, [pc, #644]	; (8008ea8 <atan+0x2f8>)
 8008c24:	4604      	mov	r4, r0
 8008c26:	429e      	cmp	r6, r3
 8008c28:	460d      	mov	r5, r1
 8008c2a:	f300 80b8 	bgt.w	8008d9e <atan+0x1ee>
 8008c2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c32:	429e      	cmp	r6, r3
 8008c34:	f300 809c 	bgt.w	8008d70 <atan+0x1c0>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	f7f7 fa96 	bl	800016c <__adddf3>
 8008c40:	2200      	movs	r2, #0
 8008c42:	4b98      	ldr	r3, [pc, #608]	; (8008ea4 <atan+0x2f4>)
 8008c44:	f7f7 fa90 	bl	8000168 <__aeabi_dsub>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7f7 fa89 	bl	800016c <__adddf3>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4630      	mov	r0, r6
 8008c60:	4639      	mov	r1, r7
 8008c62:	f7f7 fd63 	bl	800072c <__aeabi_ddiv>
 8008c66:	f04f 0a00 	mov.w	sl, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	4622      	mov	r2, r4
 8008c70:	462b      	mov	r3, r5
 8008c72:	4620      	mov	r0, r4
 8008c74:	4629      	mov	r1, r5
 8008c76:	f7f7 fc2f 	bl	80004d8 <__aeabi_dmul>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4680      	mov	r8, r0
 8008c80:	4689      	mov	r9, r1
 8008c82:	f7f7 fc29 	bl	80004d8 <__aeabi_dmul>
 8008c86:	a36c      	add	r3, pc, #432	; (adr r3, 8008e38 <atan+0x288>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	460f      	mov	r7, r1
 8008c90:	f7f7 fc22 	bl	80004d8 <__aeabi_dmul>
 8008c94:	a36a      	add	r3, pc, #424	; (adr r3, 8008e40 <atan+0x290>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f7f7 fa67 	bl	800016c <__adddf3>
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	f7f7 fc19 	bl	80004d8 <__aeabi_dmul>
 8008ca6:	a368      	add	r3, pc, #416	; (adr r3, 8008e48 <atan+0x298>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fa5e 	bl	800016c <__adddf3>
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	f7f7 fc10 	bl	80004d8 <__aeabi_dmul>
 8008cb8:	a365      	add	r3, pc, #404	; (adr r3, 8008e50 <atan+0x2a0>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fa55 	bl	800016c <__adddf3>
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	463b      	mov	r3, r7
 8008cc6:	f7f7 fc07 	bl	80004d8 <__aeabi_dmul>
 8008cca:	a363      	add	r3, pc, #396	; (adr r3, 8008e58 <atan+0x2a8>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fa4c 	bl	800016c <__adddf3>
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	f7f7 fbfe 	bl	80004d8 <__aeabi_dmul>
 8008cdc:	a360      	add	r3, pc, #384	; (adr r3, 8008e60 <atan+0x2b0>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 fa43 	bl	800016c <__adddf3>
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	464b      	mov	r3, r9
 8008cea:	f7f7 fbf5 	bl	80004d8 <__aeabi_dmul>
 8008cee:	a35e      	add	r3, pc, #376	; (adr r3, 8008e68 <atan+0x2b8>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	4689      	mov	r9, r1
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fbec 	bl	80004d8 <__aeabi_dmul>
 8008d00:	a35b      	add	r3, pc, #364	; (adr r3, 8008e70 <atan+0x2c0>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fa2f 	bl	8000168 <__aeabi_dsub>
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	f7f7 fbe3 	bl	80004d8 <__aeabi_dmul>
 8008d12:	a359      	add	r3, pc, #356	; (adr r3, 8008e78 <atan+0x2c8>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fa26 	bl	8000168 <__aeabi_dsub>
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	f7f7 fbda 	bl	80004d8 <__aeabi_dmul>
 8008d24:	a356      	add	r3, pc, #344	; (adr r3, 8008e80 <atan+0x2d0>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 fa1d 	bl	8000168 <__aeabi_dsub>
 8008d2e:	4632      	mov	r2, r6
 8008d30:	463b      	mov	r3, r7
 8008d32:	f7f7 fbd1 	bl	80004d8 <__aeabi_dmul>
 8008d36:	a354      	add	r3, pc, #336	; (adr r3, 8008e88 <atan+0x2d8>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 fa14 	bl	8000168 <__aeabi_dsub>
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	f7f7 fbc8 	bl	80004d8 <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	4649      	mov	r1, r9
 8008d50:	f7f7 fa0c 	bl	800016c <__adddf3>
 8008d54:	4622      	mov	r2, r4
 8008d56:	462b      	mov	r3, r5
 8008d58:	f7f7 fbbe 	bl	80004d8 <__aeabi_dmul>
 8008d5c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	d144      	bne.n	8008df0 <atan+0x240>
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 f9fd 	bl	8000168 <__aeabi_dsub>
 8008d6e:	e734      	b.n	8008bda <atan+0x2a>
 8008d70:	2200      	movs	r2, #0
 8008d72:	4b4c      	ldr	r3, [pc, #304]	; (8008ea4 <atan+0x2f4>)
 8008d74:	f7f7 f9f8 	bl	8000168 <__aeabi_dsub>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460f      	mov	r7, r1
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	4b48      	ldr	r3, [pc, #288]	; (8008ea4 <atan+0x2f4>)
 8008d84:	f7f7 f9f2 	bl	800016c <__adddf3>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	4639      	mov	r1, r7
 8008d90:	f7f7 fccc 	bl	800072c <__aeabi_ddiv>
 8008d94:	f04f 0a01 	mov.w	sl, #1
 8008d98:	4604      	mov	r4, r0
 8008d9a:	460d      	mov	r5, r1
 8008d9c:	e767      	b.n	8008c6e <atan+0xbe>
 8008d9e:	4b43      	ldr	r3, [pc, #268]	; (8008eac <atan+0x2fc>)
 8008da0:	429e      	cmp	r6, r3
 8008da2:	da1a      	bge.n	8008dda <atan+0x22a>
 8008da4:	2200      	movs	r2, #0
 8008da6:	4b42      	ldr	r3, [pc, #264]	; (8008eb0 <atan+0x300>)
 8008da8:	f7f7 f9de 	bl	8000168 <__aeabi_dsub>
 8008dac:	2200      	movs	r2, #0
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	4620      	mov	r0, r4
 8008db4:	4629      	mov	r1, r5
 8008db6:	4b3e      	ldr	r3, [pc, #248]	; (8008eb0 <atan+0x300>)
 8008db8:	f7f7 fb8e 	bl	80004d8 <__aeabi_dmul>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4b39      	ldr	r3, [pc, #228]	; (8008ea4 <atan+0x2f4>)
 8008dc0:	f7f7 f9d4 	bl	800016c <__adddf3>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fcae 	bl	800072c <__aeabi_ddiv>
 8008dd0:	f04f 0a02 	mov.w	sl, #2
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	e749      	b.n	8008c6e <atan+0xbe>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	2000      	movs	r0, #0
 8008de0:	4934      	ldr	r1, [pc, #208]	; (8008eb4 <atan+0x304>)
 8008de2:	f7f7 fca3 	bl	800072c <__aeabi_ddiv>
 8008de6:	f04f 0a03 	mov.w	sl, #3
 8008dea:	4604      	mov	r4, r0
 8008dec:	460d      	mov	r5, r1
 8008dee:	e73e      	b.n	8008c6e <atan+0xbe>
 8008df0:	4b31      	ldr	r3, [pc, #196]	; (8008eb8 <atan+0x308>)
 8008df2:	4e32      	ldr	r6, [pc, #200]	; (8008ebc <atan+0x30c>)
 8008df4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f7f7 f9b4 	bl	8000168 <__aeabi_dsub>
 8008e00:	4622      	mov	r2, r4
 8008e02:	462b      	mov	r3, r5
 8008e04:	f7f7 f9b0 	bl	8000168 <__aeabi_dsub>
 8008e08:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008e14:	f7f7 f9a8 	bl	8000168 <__aeabi_dsub>
 8008e18:	f1bb 0f00 	cmp.w	fp, #0
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	460d      	mov	r5, r1
 8008e20:	f6bf aee4 	bge.w	8008bec <atan+0x3c>
 8008e24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e28:	461d      	mov	r5, r3
 8008e2a:	e6df      	b.n	8008bec <atan+0x3c>
 8008e2c:	4d24      	ldr	r5, [pc, #144]	; (8008ec0 <atan+0x310>)
 8008e2e:	e6dd      	b.n	8008bec <atan+0x3c>
 8008e30:	8800759c 	.word	0x8800759c
 8008e34:	7e37e43c 	.word	0x7e37e43c
 8008e38:	e322da11 	.word	0xe322da11
 8008e3c:	3f90ad3a 	.word	0x3f90ad3a
 8008e40:	24760deb 	.word	0x24760deb
 8008e44:	3fa97b4b 	.word	0x3fa97b4b
 8008e48:	a0d03d51 	.word	0xa0d03d51
 8008e4c:	3fb10d66 	.word	0x3fb10d66
 8008e50:	c54c206e 	.word	0xc54c206e
 8008e54:	3fb745cd 	.word	0x3fb745cd
 8008e58:	920083ff 	.word	0x920083ff
 8008e5c:	3fc24924 	.word	0x3fc24924
 8008e60:	5555550d 	.word	0x5555550d
 8008e64:	3fd55555 	.word	0x3fd55555
 8008e68:	2c6a6c2f 	.word	0x2c6a6c2f
 8008e6c:	bfa2b444 	.word	0xbfa2b444
 8008e70:	52defd9a 	.word	0x52defd9a
 8008e74:	3fadde2d 	.word	0x3fadde2d
 8008e78:	af749a6d 	.word	0xaf749a6d
 8008e7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008e80:	fe231671 	.word	0xfe231671
 8008e84:	3fbc71c6 	.word	0x3fbc71c6
 8008e88:	9998ebc4 	.word	0x9998ebc4
 8008e8c:	3fc99999 	.word	0x3fc99999
 8008e90:	440fffff 	.word	0x440fffff
 8008e94:	7ff00000 	.word	0x7ff00000
 8008e98:	54442d18 	.word	0x54442d18
 8008e9c:	bff921fb 	.word	0xbff921fb
 8008ea0:	3fdbffff 	.word	0x3fdbffff
 8008ea4:	3ff00000 	.word	0x3ff00000
 8008ea8:	3ff2ffff 	.word	0x3ff2ffff
 8008eac:	40038000 	.word	0x40038000
 8008eb0:	3ff80000 	.word	0x3ff80000
 8008eb4:	bff00000 	.word	0xbff00000
 8008eb8:	08009880 	.word	0x08009880
 8008ebc:	08009860 	.word	0x08009860
 8008ec0:	3ff921fb 	.word	0x3ff921fb

08008ec4 <fabs>:
 8008ec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4770      	bx	lr
 8008ecc:	0000      	movs	r0, r0
	...

08008ed0 <scalbn>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	4616      	mov	r6, r2
 8008ed4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	460b      	mov	r3, r1
 8008ede:	b992      	cbnz	r2, 8008f06 <scalbn+0x36>
 8008ee0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ee4:	4303      	orrs	r3, r0
 8008ee6:	d03c      	beq.n	8008f62 <scalbn+0x92>
 8008ee8:	4b31      	ldr	r3, [pc, #196]	; (8008fb0 <scalbn+0xe0>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	f7f7 faf4 	bl	80004d8 <__aeabi_dmul>
 8008ef0:	4b30      	ldr	r3, [pc, #192]	; (8008fb4 <scalbn+0xe4>)
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	429e      	cmp	r6, r3
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	da0f      	bge.n	8008f1a <scalbn+0x4a>
 8008efa:	a329      	add	r3, pc, #164	; (adr r3, 8008fa0 <scalbn+0xd0>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f7f7 faea 	bl	80004d8 <__aeabi_dmul>
 8008f04:	e006      	b.n	8008f14 <scalbn+0x44>
 8008f06:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008f0a:	42ba      	cmp	r2, r7
 8008f0c:	d109      	bne.n	8008f22 <scalbn+0x52>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	f7f7 f92c 	bl	800016c <__adddf3>
 8008f14:	4604      	mov	r4, r0
 8008f16:	460d      	mov	r5, r1
 8008f18:	e023      	b.n	8008f62 <scalbn+0x92>
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f20:	3a36      	subs	r2, #54	; 0x36
 8008f22:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008f26:	428e      	cmp	r6, r1
 8008f28:	dd0e      	ble.n	8008f48 <scalbn+0x78>
 8008f2a:	a31f      	add	r3, pc, #124	; (adr r3, 8008fa8 <scalbn+0xd8>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008f34:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008f38:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008f3c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008f40:	481d      	ldr	r0, [pc, #116]	; (8008fb8 <scalbn+0xe8>)
 8008f42:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008f46:	e7db      	b.n	8008f00 <scalbn+0x30>
 8008f48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f4c:	4432      	add	r2, r6
 8008f4e:	428a      	cmp	r2, r1
 8008f50:	dceb      	bgt.n	8008f2a <scalbn+0x5a>
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	dd08      	ble.n	8008f68 <scalbn+0x98>
 8008f56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f5e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f62:	4620      	mov	r0, r4
 8008f64:	4629      	mov	r1, r5
 8008f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f68:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008f6c:	da0c      	bge.n	8008f88 <scalbn+0xb8>
 8008f6e:	a30c      	add	r3, pc, #48	; (adr r3, 8008fa0 <scalbn+0xd0>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008f78:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008f7c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008f80:	480e      	ldr	r0, [pc, #56]	; (8008fbc <scalbn+0xec>)
 8008f82:	f041 011f 	orr.w	r1, r1, #31
 8008f86:	e7bb      	b.n	8008f00 <scalbn+0x30>
 8008f88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f8c:	3236      	adds	r2, #54	; 0x36
 8008f8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f96:	4620      	mov	r0, r4
 8008f98:	4629      	mov	r1, r5
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4b08      	ldr	r3, [pc, #32]	; (8008fc0 <scalbn+0xf0>)
 8008f9e:	e7af      	b.n	8008f00 <scalbn+0x30>
 8008fa0:	c2f8f359 	.word	0xc2f8f359
 8008fa4:	01a56e1f 	.word	0x01a56e1f
 8008fa8:	8800759c 	.word	0x8800759c
 8008fac:	7e37e43c 	.word	0x7e37e43c
 8008fb0:	43500000 	.word	0x43500000
 8008fb4:	ffff3cb0 	.word	0xffff3cb0
 8008fb8:	8800759c 	.word	0x8800759c
 8008fbc:	c2f8f359 	.word	0xc2f8f359
 8008fc0:	3c900000 	.word	0x3c900000

08008fc4 <with_errno>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	460d      	mov	r5, r1
 8008fca:	4616      	mov	r6, r2
 8008fcc:	f7fe fb06 	bl	80075dc <__errno>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	6006      	str	r6, [r0, #0]
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}

08008fd8 <xflow>:
 8008fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fda:	4615      	mov	r5, r2
 8008fdc:	461c      	mov	r4, r3
 8008fde:	b180      	cbz	r0, 8009002 <xflow+0x2a>
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8008fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fee:	4628      	mov	r0, r5
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	f7f7 fa71 	bl	80004d8 <__aeabi_dmul>
 8008ff6:	2222      	movs	r2, #34	; 0x22
 8008ff8:	b003      	add	sp, #12
 8008ffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ffe:	f7ff bfe1 	b.w	8008fc4 <with_errno>
 8009002:	4610      	mov	r0, r2
 8009004:	4619      	mov	r1, r3
 8009006:	e7ee      	b.n	8008fe6 <xflow+0xe>

08009008 <__math_uflow>:
 8009008:	2200      	movs	r2, #0
 800900a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800900e:	f7ff bfe3 	b.w	8008fd8 <xflow>

08009012 <__math_oflow>:
 8009012:	2200      	movs	r2, #0
 8009014:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009018:	f7ff bfde 	b.w	8008fd8 <xflow>

0800901c <__ieee754_sqrt>:
 800901c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80091c0 <__ieee754_sqrt+0x1a4>
 8009020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	ea3c 0c01 	bics.w	ip, ip, r1
 8009028:	460b      	mov	r3, r1
 800902a:	4606      	mov	r6, r0
 800902c:	460d      	mov	r5, r1
 800902e:	460a      	mov	r2, r1
 8009030:	4604      	mov	r4, r0
 8009032:	d10e      	bne.n	8009052 <__ieee754_sqrt+0x36>
 8009034:	4602      	mov	r2, r0
 8009036:	f7f7 fa4f 	bl	80004d8 <__aeabi_dmul>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4630      	mov	r0, r6
 8009040:	4629      	mov	r1, r5
 8009042:	f7f7 f893 	bl	800016c <__adddf3>
 8009046:	4606      	mov	r6, r0
 8009048:	460d      	mov	r5, r1
 800904a:	4630      	mov	r0, r6
 800904c:	4629      	mov	r1, r5
 800904e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009052:	2900      	cmp	r1, #0
 8009054:	dc0d      	bgt.n	8009072 <__ieee754_sqrt+0x56>
 8009056:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800905a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800905e:	d0f4      	beq.n	800904a <__ieee754_sqrt+0x2e>
 8009060:	b139      	cbz	r1, 8009072 <__ieee754_sqrt+0x56>
 8009062:	4602      	mov	r2, r0
 8009064:	f7f7 f880 	bl	8000168 <__aeabi_dsub>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	f7f7 fb5e 	bl	800072c <__aeabi_ddiv>
 8009070:	e7e9      	b.n	8009046 <__ieee754_sqrt+0x2a>
 8009072:	1512      	asrs	r2, r2, #20
 8009074:	f000 8089 	beq.w	800918a <__ieee754_sqrt+0x16e>
 8009078:	2500      	movs	r5, #0
 800907a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800907e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009086:	07d2      	lsls	r2, r2, #31
 8009088:	bf5c      	itt	pl
 800908a:	005b      	lslpl	r3, r3, #1
 800908c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009090:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009094:	bf58      	it	pl
 8009096:	0064      	lslpl	r4, r4, #1
 8009098:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800909c:	0062      	lsls	r2, r4, #1
 800909e:	2016      	movs	r0, #22
 80090a0:	4629      	mov	r1, r5
 80090a2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80090a6:	1076      	asrs	r6, r6, #1
 80090a8:	190f      	adds	r7, r1, r4
 80090aa:	429f      	cmp	r7, r3
 80090ac:	bfde      	ittt	le
 80090ae:	1bdb      	suble	r3, r3, r7
 80090b0:	1939      	addle	r1, r7, r4
 80090b2:	192d      	addle	r5, r5, r4
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	3801      	subs	r0, #1
 80090b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80090bc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80090c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80090c4:	d1f0      	bne.n	80090a8 <__ieee754_sqrt+0x8c>
 80090c6:	4604      	mov	r4, r0
 80090c8:	2720      	movs	r7, #32
 80090ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80090ce:	428b      	cmp	r3, r1
 80090d0:	eb0c 0e00 	add.w	lr, ip, r0
 80090d4:	dc02      	bgt.n	80090dc <__ieee754_sqrt+0xc0>
 80090d6:	d113      	bne.n	8009100 <__ieee754_sqrt+0xe4>
 80090d8:	4596      	cmp	lr, r2
 80090da:	d811      	bhi.n	8009100 <__ieee754_sqrt+0xe4>
 80090dc:	f1be 0f00 	cmp.w	lr, #0
 80090e0:	eb0e 000c 	add.w	r0, lr, ip
 80090e4:	da56      	bge.n	8009194 <__ieee754_sqrt+0x178>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	db54      	blt.n	8009194 <__ieee754_sqrt+0x178>
 80090ea:	f101 0801 	add.w	r8, r1, #1
 80090ee:	1a5b      	subs	r3, r3, r1
 80090f0:	4641      	mov	r1, r8
 80090f2:	4596      	cmp	lr, r2
 80090f4:	bf88      	it	hi
 80090f6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80090fa:	eba2 020e 	sub.w	r2, r2, lr
 80090fe:	4464      	add	r4, ip
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	3f01      	subs	r7, #1
 8009104:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009108:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800910c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009110:	d1dd      	bne.n	80090ce <__ieee754_sqrt+0xb2>
 8009112:	4313      	orrs	r3, r2
 8009114:	d01b      	beq.n	800914e <__ieee754_sqrt+0x132>
 8009116:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80091c4 <__ieee754_sqrt+0x1a8>
 800911a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80091c8 <__ieee754_sqrt+0x1ac>
 800911e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009122:	e9db 2300 	ldrd	r2, r3, [fp]
 8009126:	f7f7 f81f 	bl	8000168 <__aeabi_dsub>
 800912a:	e9da 8900 	ldrd	r8, r9, [sl]
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 fc4b 	bl	80009d0 <__aeabi_dcmple>
 800913a:	b140      	cbz	r0, 800914e <__ieee754_sqrt+0x132>
 800913c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009140:	e9db 2300 	ldrd	r2, r3, [fp]
 8009144:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009148:	d126      	bne.n	8009198 <__ieee754_sqrt+0x17c>
 800914a:	463c      	mov	r4, r7
 800914c:	3501      	adds	r5, #1
 800914e:	106b      	asrs	r3, r5, #1
 8009150:	0864      	lsrs	r4, r4, #1
 8009152:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009156:	07ea      	lsls	r2, r5, #31
 8009158:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800915c:	bf48      	it	mi
 800915e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8009162:	4620      	mov	r0, r4
 8009164:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009168:	e76d      	b.n	8009046 <__ieee754_sqrt+0x2a>
 800916a:	0ae3      	lsrs	r3, r4, #11
 800916c:	3915      	subs	r1, #21
 800916e:	0564      	lsls	r4, r4, #21
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0fa      	beq.n	800916a <__ieee754_sqrt+0x14e>
 8009174:	02d8      	lsls	r0, r3, #11
 8009176:	d50a      	bpl.n	800918e <__ieee754_sqrt+0x172>
 8009178:	f1c2 0020 	rsb	r0, r2, #32
 800917c:	fa24 f000 	lsr.w	r0, r4, r0
 8009180:	1e55      	subs	r5, r2, #1
 8009182:	4094      	lsls	r4, r2
 8009184:	4303      	orrs	r3, r0
 8009186:	1b4a      	subs	r2, r1, r5
 8009188:	e776      	b.n	8009078 <__ieee754_sqrt+0x5c>
 800918a:	4611      	mov	r1, r2
 800918c:	e7f0      	b.n	8009170 <__ieee754_sqrt+0x154>
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	3201      	adds	r2, #1
 8009192:	e7ef      	b.n	8009174 <__ieee754_sqrt+0x158>
 8009194:	4688      	mov	r8, r1
 8009196:	e7aa      	b.n	80090ee <__ieee754_sqrt+0xd2>
 8009198:	f7f6 ffe8 	bl	800016c <__adddf3>
 800919c:	e9da 8900 	ldrd	r8, r9, [sl]
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 fc08 	bl	80009bc <__aeabi_dcmplt>
 80091ac:	b120      	cbz	r0, 80091b8 <__ieee754_sqrt+0x19c>
 80091ae:	1ca1      	adds	r1, r4, #2
 80091b0:	bf08      	it	eq
 80091b2:	3501      	addeq	r5, #1
 80091b4:	3402      	adds	r4, #2
 80091b6:	e7ca      	b.n	800914e <__ieee754_sqrt+0x132>
 80091b8:	3401      	adds	r4, #1
 80091ba:	f024 0401 	bic.w	r4, r4, #1
 80091be:	e7c6      	b.n	800914e <__ieee754_sqrt+0x132>
 80091c0:	7ff00000 	.word	0x7ff00000
 80091c4:	200000a0 	.word	0x200000a0
 80091c8:	200000a8 	.word	0x200000a8

080091cc <_init>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr

080091d8 <_fini>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr
